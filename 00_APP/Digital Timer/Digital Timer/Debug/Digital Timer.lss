
Digital Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000eda  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008c  00800060  00000eda  00000f4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000fda  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000100c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000140  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000019fd  00000000  00000000  00001188  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cb4  00000000  00000000  00002b85  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000112e  00000000  00000000  00003839  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f4  00000000  00000000  00004968  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000e2c  00000000  00000000  00004b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000117b  00000000  00000000  00005988  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00006b03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3e       	cpi	r26, 0xEC	; 236
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 55 04 	call	0x8aa	; 0x8aa <main>
  7a:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <Se7enSeg_Init>:
#include "7Segments.h"

extern Se7enSegLED_StrCfg_t Se7venSegmentsArr[NUM_OF_Se7enSeg][7];
extern u8 Se7enSeg_u8ValuesArr[10][7];

Se7enSeg_enuErorState Se7enSeg_Init(void) {
  82:	ff 92       	push	r15
  84:	0f 93       	push	r16
  86:	1f 93       	push	r17
  88:	cf 93       	push	r28
  8a:	df 93       	push	r29
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
  90:	aa 97       	sbiw	r28, 0x2a	; 42
  92:	0f b6       	in	r0, 0x3f	; 63
  94:	f8 94       	cli
  96:	de bf       	out	0x3e, r29	; 62
  98:	0f be       	out	0x3f, r0	; 63
  9a:	cd bf       	out	0x3d, r28	; 61
 PORT_enuErrorStatus_t Loc_PORTErorState = PORT_enuSucceded;
 PORT_StrCFg_t Loc_StrCurrSe7enSegArr[NUM_OF_Se7enSeg][7];
  u8 LocU8Counter;
  u8 LocU8Counter1;

	for (LocU8Counter = 0; LocU8Counter < NUM_OF_Se7enSeg ; LocU8Counter++) 
  9c:	00 e0       	ldi	r16, 0x00	; 0
extern Se7enSegLED_StrCfg_t Se7venSegmentsArr[NUM_OF_Se7enSeg][7];
extern u8 Se7enSeg_u8ValuesArr[10][7];

Se7enSeg_enuErorState Se7enSeg_Init(void) {
 Se7enSeg_enuErorState Loc_Se7enSegErrorState = Se7enSeg_enusucceeded;
 PORT_enuErrorStatus_t Loc_PORTErorState = PORT_enuSucceded;
  9e:	84 e0       	ldi	r24, 0x04	; 4

extern Se7enSegLED_StrCfg_t Se7venSegmentsArr[NUM_OF_Se7enSeg][7];
extern u8 Se7enSeg_u8ValuesArr[10][7];

Se7enSeg_enuErorState Se7enSeg_Init(void) {
 Se7enSeg_enuErorState Loc_Se7enSegErrorState = Se7enSeg_enusucceeded;
  a0:	68 94       	set
  a2:	ff 24       	eor	r15, r15
  a4:	f2 f8       	bld	r15, 2
 PORT_enuErrorStatus_t Loc_PORTErorState = PORT_enuSucceded;
 PORT_StrCFg_t Loc_StrCurrSe7enSegArr[NUM_OF_Se7enSeg][7];
  u8 LocU8Counter;
  u8 LocU8Counter1;

	for (LocU8Counter = 0; LocU8Counter < NUM_OF_Se7enSeg ; LocU8Counter++) 
  a6:	07 c1       	rjmp	.+526    	; 0x2b6 <Se7enSeg_Init+0x234>
	{
		for (LocU8Counter1 = 0; LocU8Counter1 < 7; LocU8Counter1++)
		 { 

			if (Se7venSegmentsArr[LocU8Counter][LocU8Counter1].Se7enSegLED_StrU8PortCfg > NUM_OF_PORTS || Se7venSegmentsArr[LocU8Counter][LocU8Counter1].Se7enSegLED_StrU8PortCfg < Se7enSeg_PORTA) 
  a8:	40 2f       	mov	r20, r16
  aa:	50 e0       	ldi	r21, 0x00	; 0
  ac:	21 2f       	mov	r18, r17
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	fa 01       	movw	r30, r20
  b2:	ee 0f       	add	r30, r30
  b4:	ff 1f       	adc	r31, r31
  b6:	ee 0f       	add	r30, r30
  b8:	ff 1f       	adc	r31, r31
  ba:	ee 0f       	add	r30, r30
  bc:	ff 1f       	adc	r31, r31
  be:	e4 1b       	sub	r30, r20
  c0:	f5 0b       	sbc	r31, r21
  c2:	e2 0f       	add	r30, r18
  c4:	f3 1f       	adc	r31, r19
  c6:	ee 0f       	add	r30, r30
  c8:	ff 1f       	adc	r31, r31
  ca:	ee 0f       	add	r30, r30
  cc:	ff 1f       	adc	r31, r31
  ce:	ea 55       	subi	r30, 0x5A	; 90
  d0:	ff 4f       	sbci	r31, 0xFF	; 255
  d2:	90 81       	ld	r25, Z
  d4:	95 30       	cpi	r25, 0x05	; 5
  d6:	08 f0       	brcs	.+2      	; 0xda <Se7enSeg_Init+0x58>
  d8:	e5 c0       	rjmp	.+458    	; 0x2a4 <Se7enSeg_Init+0x222>
			{
				Loc_Se7enSegErrorState = Se7enSeg_enuInvalidPort;
				break;
			} 
			else if (Se7venSegmentsArr[LocU8Counter][LocU8Counter1].Se7enSegLED_StrU8PinCfg > Se7enSeg_PIN7 ||Se7venSegmentsArr[LocU8Counter][LocU8Counter1].Se7enSegLED_StrU8PinCfg <Se7enSeg_PIN0) 
  da:	fa 01       	movw	r30, r20
  dc:	ee 0f       	add	r30, r30
  de:	ff 1f       	adc	r31, r31
  e0:	ee 0f       	add	r30, r30
  e2:	ff 1f       	adc	r31, r31
  e4:	ee 0f       	add	r30, r30
  e6:	ff 1f       	adc	r31, r31
  e8:	e4 1b       	sub	r30, r20
  ea:	f5 0b       	sbc	r31, r21
  ec:	e2 0f       	add	r30, r18
  ee:	f3 1f       	adc	r31, r19
  f0:	ee 0f       	add	r30, r30
  f2:	ff 1f       	adc	r31, r31
  f4:	ee 0f       	add	r30, r30
  f6:	ff 1f       	adc	r31, r31
  f8:	ea 55       	subi	r30, 0x5A	; 90
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	a1 81       	ldd	r26, Z+1	; 0x01
  fe:	a8 30       	cpi	r26, 0x08	; 8
 100:	08 f0       	brcs	.+2      	; 0x104 <Se7enSeg_Init+0x82>
 102:	d2 c0       	rjmp	.+420    	; 0x2a8 <Se7enSeg_Init+0x226>
			{
				Loc_Se7enSegErrorState = Se7enSeg_enuInvalidPin;
				break;
			}
			 else if (Se7venSegmentsArr[LocU8Counter][LocU8Counter1].Se7enSegLED_StrU8ActiveState != ACTIVE_HIGH && Se7venSegmentsArr[LocU8Counter][LocU8Counter1].Se7enSegLED_StrU8ActiveState!= ACTIVE_LOW) 
 104:	fa 01       	movw	r30, r20
 106:	ee 0f       	add	r30, r30
 108:	ff 1f       	adc	r31, r31
 10a:	ee 0f       	add	r30, r30
 10c:	ff 1f       	adc	r31, r31
 10e:	ee 0f       	add	r30, r30
 110:	ff 1f       	adc	r31, r31
 112:	e4 1b       	sub	r30, r20
 114:	f5 0b       	sbc	r31, r21
 116:	e2 0f       	add	r30, r18
 118:	f3 1f       	adc	r31, r19
 11a:	ee 0f       	add	r30, r30
 11c:	ff 1f       	adc	r31, r31
 11e:	ee 0f       	add	r30, r30
 120:	ff 1f       	adc	r31, r31
 122:	ea 55       	subi	r30, 0x5A	; 90
 124:	ff 4f       	sbci	r31, 0xFF	; 255
 126:	b2 81       	ldd	r27, Z+2	; 0x02
 128:	b2 30       	cpi	r27, 0x02	; 2
 12a:	08 f0       	brcs	.+2      	; 0x12e <Se7enSeg_Init+0xac>
 12c:	c0 c0       	rjmp	.+384    	; 0x2ae <Se7enSeg_Init+0x22c>
				Loc_Se7enSegErrorState = Se7enSeg_enuInvalidActiveState;
				break;
			 } 
				else
				 {
				Loc_StrCurrSe7enSegArr[LocU8Counter][LocU8Counter1].PORT_StrU8PortNum = Se7venSegmentsArr[LocU8Counter][LocU8Counter1].Se7enSegLED_StrU8PortCfg;
 12e:	f9 01       	movw	r30, r18
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	e2 0f       	add	r30, r18
 136:	f3 1f       	adc	r31, r19
 138:	85 e1       	ldi	r24, 0x15	; 21
 13a:	84 9f       	mul	r24, r20
 13c:	b0 01       	movw	r22, r0
 13e:	85 9f       	mul	r24, r21
 140:	70 0d       	add	r23, r0
 142:	11 24       	eor	r1, r1
 144:	e6 0f       	add	r30, r22
 146:	f7 1f       	adc	r31, r23
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	70 e0       	ldi	r23, 0x00	; 0
 14c:	6c 0f       	add	r22, r28
 14e:	7d 1f       	adc	r23, r29
 150:	e6 0f       	add	r30, r22
 152:	f7 1f       	adc	r31, r23
 154:	90 83       	st	Z, r25
				Loc_StrCurrSe7enSegArr[LocU8Counter][LocU8Counter1].PORT_StrU8PinNum = Se7venSegmentsArr[LocU8Counter][LocU8Counter1].Se7enSegLED_StrU8PinCfg;
 156:	a1 83       	std	Z+1, r26	; 0x01

				switch (Se7venSegmentsArr[LocU8Counter][LocU8Counter1].Se7enSegLED_StrU8ActiveState) 
 158:	bb 23       	and	r27, r27
 15a:	09 f4       	brne	.+2      	; 0x15e <Se7enSeg_Init+0xdc>
 15c:	46 c0       	rjmp	.+140    	; 0x1ea <Se7enSeg_Init+0x168>
 15e:	b1 30       	cpi	r27, 0x01	; 1
 160:	09 f0       	breq	.+2      	; 0x164 <Se7enSeg_Init+0xe2>
 162:	84 c0       	rjmp	.+264    	; 0x26c <Se7enSeg_Init+0x1ea>
				  {
					case ACTIVE_HIGH:
					switch (Se7venSegmentsArr[LocU8Counter][LocU8Counter1].Se7enSegLED_StrU8OnOffState)
 164:	fa 01       	movw	r30, r20
 166:	ee 0f       	add	r30, r30
 168:	ff 1f       	adc	r31, r31
 16a:	ee 0f       	add	r30, r30
 16c:	ff 1f       	adc	r31, r31
 16e:	ee 0f       	add	r30, r30
 170:	ff 1f       	adc	r31, r31
 172:	e4 1b       	sub	r30, r20
 174:	f5 0b       	sbc	r31, r21
 176:	e2 0f       	add	r30, r18
 178:	f3 1f       	adc	r31, r19
 17a:	ee 0f       	add	r30, r30
 17c:	ff 1f       	adc	r31, r31
 17e:	ee 0f       	add	r30, r30
 180:	ff 1f       	adc	r31, r31
 182:	ea 55       	subi	r30, 0x5A	; 90
 184:	ff 4f       	sbci	r31, 0xFF	; 255
 186:	83 81       	ldd	r24, Z+3	; 0x03
 188:	88 23       	and	r24, r24
 18a:	c9 f0       	breq	.+50     	; 0x1be <Se7enSeg_Init+0x13c>
 18c:	81 30       	cpi	r24, 0x01	; 1
 18e:	09 f0       	breq	.+2      	; 0x192 <Se7enSeg_Init+0x110>
 190:	6d c0       	rjmp	.+218    	; 0x26c <Se7enSeg_Init+0x1ea>
					 {
						case Se7enSegLed_ON_STATE :
						Loc_StrCurrSe7enSegArr[LocU8Counter][LocU8Counter1].PORT_StrU8PinCfg = PORT_enuOutput_High;
 192:	f9 01       	movw	r30, r18
 194:	ee 0f       	add	r30, r30
 196:	ff 1f       	adc	r31, r31
 198:	e2 0f       	add	r30, r18
 19a:	f3 1f       	adc	r31, r19
 19c:	65 e1       	ldi	r22, 0x15	; 21
 19e:	64 9f       	mul	r22, r20
 1a0:	c0 01       	movw	r24, r0
 1a2:	65 9f       	mul	r22, r21
 1a4:	90 0d       	add	r25, r0
 1a6:	11 24       	eor	r1, r1
 1a8:	e8 0f       	add	r30, r24
 1aa:	f9 1f       	adc	r31, r25
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	8c 0f       	add	r24, r28
 1b2:	9d 1f       	adc	r25, r29
 1b4:	e8 0f       	add	r30, r24
 1b6:	f9 1f       	adc	r31, r25
 1b8:	83 e0       	ldi	r24, 0x03	; 3
 1ba:	82 83       	std	Z+2, r24	; 0x02
						break;
 1bc:	57 c0       	rjmp	.+174    	; 0x26c <Se7enSeg_Init+0x1ea>
						case Se7enSegLed_OFF_STATE :
						Loc_StrCurrSe7enSegArr[LocU8Counter][LocU8Counter1].PORT_StrU8PinCfg = PORT_enuOutput_Low;
 1be:	f9 01       	movw	r30, r18
 1c0:	ee 0f       	add	r30, r30
 1c2:	ff 1f       	adc	r31, r31
 1c4:	e2 0f       	add	r30, r18
 1c6:	f3 1f       	adc	r31, r19
 1c8:	65 e1       	ldi	r22, 0x15	; 21
 1ca:	64 9f       	mul	r22, r20
 1cc:	c0 01       	movw	r24, r0
 1ce:	65 9f       	mul	r22, r21
 1d0:	90 0d       	add	r25, r0
 1d2:	11 24       	eor	r1, r1
 1d4:	e8 0f       	add	r30, r24
 1d6:	f9 1f       	adc	r31, r25
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	70 e0       	ldi	r23, 0x00	; 0
 1dc:	6c 0f       	add	r22, r28
 1de:	7d 1f       	adc	r23, r29
 1e0:	e6 0f       	add	r30, r22
 1e2:	f7 1f       	adc	r31, r23
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	82 83       	std	Z+2, r24	; 0x02
						break;
 1e8:	41 c0       	rjmp	.+130    	; 0x26c <Se7enSeg_Init+0x1ea>
					}
					break;

					case ACTIVE_LOW:
					switch (Se7venSegmentsArr[LocU8Counter][LocU8Counter1].Se7enSegLED_StrU8OnOffState)
 1ea:	fa 01       	movw	r30, r20
 1ec:	ee 0f       	add	r30, r30
 1ee:	ff 1f       	adc	r31, r31
 1f0:	ee 0f       	add	r30, r30
 1f2:	ff 1f       	adc	r31, r31
 1f4:	ee 0f       	add	r30, r30
 1f6:	ff 1f       	adc	r31, r31
 1f8:	e4 1b       	sub	r30, r20
 1fa:	f5 0b       	sbc	r31, r21
 1fc:	e2 0f       	add	r30, r18
 1fe:	f3 1f       	adc	r31, r19
 200:	ee 0f       	add	r30, r30
 202:	ff 1f       	adc	r31, r31
 204:	ee 0f       	add	r30, r30
 206:	ff 1f       	adc	r31, r31
 208:	ea 55       	subi	r30, 0x5A	; 90
 20a:	ff 4f       	sbci	r31, 0xFF	; 255
 20c:	83 81       	ldd	r24, Z+3	; 0x03
 20e:	88 23       	and	r24, r24
 210:	c1 f0       	breq	.+48     	; 0x242 <Se7enSeg_Init+0x1c0>
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	59 f5       	brne	.+86     	; 0x26c <Se7enSeg_Init+0x1ea>
					{
						case Se7enSegLed_ON_STATE :
						Loc_StrCurrSe7enSegArr[LocU8Counter][LocU8Counter1].PORT_StrU8PinCfg = PORT_enuOutput_Low;
 216:	f9 01       	movw	r30, r18
 218:	ee 0f       	add	r30, r30
 21a:	ff 1f       	adc	r31, r31
 21c:	e2 0f       	add	r30, r18
 21e:	f3 1f       	adc	r31, r19
 220:	65 e1       	ldi	r22, 0x15	; 21
 222:	64 9f       	mul	r22, r20
 224:	c0 01       	movw	r24, r0
 226:	65 9f       	mul	r22, r21
 228:	90 0d       	add	r25, r0
 22a:	11 24       	eor	r1, r1
 22c:	e8 0f       	add	r30, r24
 22e:	f9 1f       	adc	r31, r25
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	8c 0f       	add	r24, r28
 236:	9d 1f       	adc	r25, r29
 238:	e8 0f       	add	r30, r24
 23a:	f9 1f       	adc	r31, r25
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	82 83       	std	Z+2, r24	; 0x02
						   break;
 240:	15 c0       	rjmp	.+42     	; 0x26c <Se7enSeg_Init+0x1ea>
						case Se7enSegLed_OFF_STATE :
						Loc_StrCurrSe7enSegArr[LocU8Counter][LocU8Counter1].PORT_StrU8PinCfg = PORT_enuOutput_High;
 242:	f9 01       	movw	r30, r18
 244:	ee 0f       	add	r30, r30
 246:	ff 1f       	adc	r31, r31
 248:	e2 0f       	add	r30, r18
 24a:	f3 1f       	adc	r31, r19
 24c:	65 e1       	ldi	r22, 0x15	; 21
 24e:	64 9f       	mul	r22, r20
 250:	c0 01       	movw	r24, r0
 252:	65 9f       	mul	r22, r21
 254:	90 0d       	add	r25, r0
 256:	11 24       	eor	r1, r1
 258:	e8 0f       	add	r30, r24
 25a:	f9 1f       	adc	r31, r25
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	70 e0       	ldi	r23, 0x00	; 0
 260:	6c 0f       	add	r22, r28
 262:	7d 1f       	adc	r23, r29
 264:	e6 0f       	add	r30, r22
 266:	f7 1f       	adc	r31, r23
 268:	83 e0       	ldi	r24, 0x03	; 3
 26a:	82 83       	std	Z+2, r24	; 0x02
					}
					break;
				}


				Loc_PORTErorState = PORT_enuSetPinConfiguration(&Loc_StrCurrSe7enSegArr[LocU8Counter][LocU8Counter1]);
 26c:	c9 01       	movw	r24, r18
 26e:	88 0f       	add	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	28 0f       	add	r18, r24
 274:	39 1f       	adc	r19, r25
 276:	65 e1       	ldi	r22, 0x15	; 21
 278:	64 9f       	mul	r22, r20
 27a:	c0 01       	movw	r24, r0
 27c:	65 9f       	mul	r22, r21
 27e:	90 0d       	add	r25, r0
 280:	11 24       	eor	r1, r1
 282:	82 0f       	add	r24, r18
 284:	93 1f       	adc	r25, r19
 286:	21 e0       	ldi	r18, 0x01	; 1
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	2c 0f       	add	r18, r28
 28c:	3d 1f       	adc	r19, r29
 28e:	82 0f       	add	r24, r18
 290:	93 1f       	adc	r25, r19
 292:	0e 94 bd 04 	call	0x97a	; 0x97a <PORT_enuSetPinConfiguration>
  u8 LocU8Counter;
  u8 LocU8Counter1;

	for (LocU8Counter = 0; LocU8Counter < NUM_OF_Se7enSeg ; LocU8Counter++) 
	{
		for (LocU8Counter1 = 0; LocU8Counter1 < 7; LocU8Counter1++)
 296:	1f 5f       	subi	r17, 0xFF	; 255
 298:	01 c0       	rjmp	.+2      	; 0x29c <Se7enSeg_Init+0x21a>
 29a:	10 e0       	ldi	r17, 0x00	; 0
 29c:	17 30       	cpi	r17, 0x07	; 7
 29e:	08 f4       	brcc	.+2      	; 0x2a2 <Se7enSeg_Init+0x220>
 2a0:	03 cf       	rjmp	.-506    	; 0xa8 <Se7enSeg_Init+0x26>
 2a2:	08 c0       	rjmp	.+16     	; 0x2b4 <Se7enSeg_Init+0x232>
		 { 

			if (Se7venSegmentsArr[LocU8Counter][LocU8Counter1].Se7enSegLED_StrU8PortCfg > NUM_OF_PORTS || Se7venSegmentsArr[LocU8Counter][LocU8Counter1].Se7enSegLED_StrU8PortCfg < Se7enSeg_PORTA) 
			{
				Loc_Se7enSegErrorState = Se7enSeg_enuInvalidPort;
 2a4:	f1 2c       	mov	r15, r1
 2a6:	06 c0       	rjmp	.+12     	; 0x2b4 <Se7enSeg_Init+0x232>
				break;
			} 
			else if (Se7venSegmentsArr[LocU8Counter][LocU8Counter1].Se7enSegLED_StrU8PinCfg > Se7enSeg_PIN7 ||Se7venSegmentsArr[LocU8Counter][LocU8Counter1].Se7enSegLED_StrU8PinCfg <Se7enSeg_PIN0) 
			{
				Loc_Se7enSegErrorState = Se7enSeg_enuInvalidPin;
 2a8:	ff 24       	eor	r15, r15
 2aa:	f3 94       	inc	r15
 2ac:	03 c0       	rjmp	.+6      	; 0x2b4 <Se7enSeg_Init+0x232>
				break;
			}
			 else if (Se7venSegmentsArr[LocU8Counter][LocU8Counter1].Se7enSegLED_StrU8ActiveState != ACTIVE_HIGH && Se7venSegmentsArr[LocU8Counter][LocU8Counter1].Se7enSegLED_StrU8ActiveState!= ACTIVE_LOW) 
			 {
				Loc_Se7enSegErrorState = Se7enSeg_enuInvalidActiveState;
 2ae:	68 94       	set
 2b0:	ff 24       	eor	r15, r15
 2b2:	f1 f8       	bld	r15, 1
 PORT_enuErrorStatus_t Loc_PORTErorState = PORT_enuSucceded;
 PORT_StrCFg_t Loc_StrCurrSe7enSegArr[NUM_OF_Se7enSeg][7];
  u8 LocU8Counter;
  u8 LocU8Counter1;

	for (LocU8Counter = 0; LocU8Counter < NUM_OF_Se7enSeg ; LocU8Counter++) 
 2b4:	0f 5f       	subi	r16, 0xFF	; 255
 2b6:	02 30       	cpi	r16, 0x02	; 2
 2b8:	80 f3       	brcs	.-32     	; 0x29a <Se7enSeg_Init+0x218>
				Loc_PORTErorState = PORT_enuSetPinConfiguration(&Loc_StrCurrSe7enSegArr[LocU8Counter][LocU8Counter1]);
			}
		}
	}

	if (Loc_PORTErorState != PORT_enuSucceded) {
 2ba:	84 30       	cpi	r24, 0x04	; 4
 2bc:	21 f0       	breq	.+8      	; 0x2c6 <Se7enSeg_Init+0x244>
		Loc_Se7enSegErrorState = Se7enSeg_enuPortNOK;
 2be:	0f 2e       	mov	r0, r31
 2c0:	f5 e0       	ldi	r31, 0x05	; 5
 2c2:	ff 2e       	mov	r15, r31
 2c4:	f0 2d       	mov	r31, r0
	}

	return Loc_Se7enSegErrorState;
}
 2c6:	8f 2d       	mov	r24, r15
 2c8:	aa 96       	adiw	r28, 0x2a	; 42
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	f8 94       	cli
 2ce:	de bf       	out	0x3e, r29	; 62
 2d0:	0f be       	out	0x3f, r0	; 63
 2d2:	cd bf       	out	0x3d, r28	; 61
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	1f 91       	pop	r17
 2da:	0f 91       	pop	r16
 2dc:	ff 90       	pop	r15
 2de:	08 95       	ret

000002e0 <Se7enSeg_SetValueSingle>:
Se7enSeg_enuErorState Se7enSeg_SetValueSingle(u8 Copy_u8Se7enSegName , u8 Copy_u8Value)
{
 2e0:	1f 93       	push	r17
 2e2:	cf 93       	push	r28
 2e4:	df 93       	push	r29
	Se7enSeg_enuErorState Loc_enuErorState = Se7enSeg_enusucceeded ;
	DIO_enuErrorStatus_t Loc_enuDioEror = DIO_enuSucceded;
	u8 Loc_u8Counter ;
	if (Copy_u8Se7enSegName > NUM_OF_Se7enSeg)
 2e6:	83 30       	cpi	r24, 0x03	; 3
 2e8:	08 f0       	brcs	.+2      	; 0x2ec <Se7enSeg_SetValueSingle+0xc>
 2ea:	8a c0       	rjmp	.+276    	; 0x400 <__EEPROM_REGION_LENGTH__>
	{
		
		Loc_enuErorState =  Se7enSeg_enuInvalidName ;
		
	}
	else if (Copy_u8Value > 9 || Copy_u8Value < 0)
 2ec:	6a 30       	cpi	r22, 0x0A	; 10
 2ee:	08 f0       	brcs	.+2      	; 0x2f2 <Se7enSeg_SetValueSingle+0x12>
 2f0:	8a c0       	rjmp	.+276    	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 2f2:	16 2f       	mov	r17, r22
 2f4:	d8 2f       	mov	r29, r24
 2f6:	c0 e0       	ldi	r28, 0x00	; 0
 2f8:	84 e0       	ldi	r24, 0x04	; 4
 2fa:	7d c0       	rjmp	.+250    	; 0x3f6 <Se7enSeg_SetValueSingle+0x116>
	else
	{
		
		for (Loc_u8Counter = 0 ; Loc_u8Counter < 7 ; Loc_u8Counter ++ )
		{
			switch(Se7venSegmentsArr[Copy_u8Se7enSegName][Loc_u8Counter].Se7enSegLED_StrU8ActiveState)
 2fc:	6d 2f       	mov	r22, r29
 2fe:	70 e0       	ldi	r23, 0x00	; 0
 300:	2c 2f       	mov	r18, r28
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	fb 01       	movw	r30, r22
 306:	ee 0f       	add	r30, r30
 308:	ff 1f       	adc	r31, r31
 30a:	ee 0f       	add	r30, r30
 30c:	ff 1f       	adc	r31, r31
 30e:	ee 0f       	add	r30, r30
 310:	ff 1f       	adc	r31, r31
 312:	e6 1b       	sub	r30, r22
 314:	f7 0b       	sbc	r31, r23
 316:	e2 0f       	add	r30, r18
 318:	f3 1f       	adc	r31, r19
 31a:	ee 0f       	add	r30, r30
 31c:	ff 1f       	adc	r31, r31
 31e:	ee 0f       	add	r30, r30
 320:	ff 1f       	adc	r31, r31
 322:	ea 55       	subi	r30, 0x5A	; 90
 324:	ff 4f       	sbci	r31, 0xFF	; 255
 326:	92 81       	ldd	r25, Z+2	; 0x02
 328:	99 23       	and	r25, r25
 32a:	51 f1       	breq	.+84     	; 0x380 <Se7enSeg_SetValueSingle+0xa0>
 32c:	91 30       	cpi	r25, 0x01	; 1
 32e:	09 f0       	breq	.+2      	; 0x332 <Se7enSeg_SetValueSingle+0x52>
 330:	61 c0       	rjmp	.+194    	; 0x3f4 <Se7enSeg_SetValueSingle+0x114>
			{
				case  ACTIVE_HIGH :
				Se7venSegmentsArr[Copy_u8Se7enSegName][Loc_u8Counter].Se7enSegLED_StrU8OnOffState =Se7enSeg_u8ValuesArr[Copy_u8Value][Loc_u8Counter];
 332:	81 2f       	mov	r24, r17
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	fc 01       	movw	r30, r24
 338:	ee 0f       	add	r30, r30
 33a:	ff 1f       	adc	r31, r31
 33c:	ee 0f       	add	r30, r30
 33e:	ff 1f       	adc	r31, r31
 340:	ee 0f       	add	r30, r30
 342:	ff 1f       	adc	r31, r31
 344:	e8 1b       	sub	r30, r24
 346:	f9 0b       	sbc	r31, r25
 348:	e0 5a       	subi	r30, 0xA0	; 160
 34a:	ff 4f       	sbci	r31, 0xFF	; 255
 34c:	e2 0f       	add	r30, r18
 34e:	f3 1f       	adc	r31, r19
 350:	40 81       	ld	r20, Z
 352:	fb 01       	movw	r30, r22
 354:	ee 0f       	add	r30, r30
 356:	ff 1f       	adc	r31, r31
 358:	ee 0f       	add	r30, r30
 35a:	ff 1f       	adc	r31, r31
 35c:	ee 0f       	add	r30, r30
 35e:	ff 1f       	adc	r31, r31
 360:	e6 1b       	sub	r30, r22
 362:	f7 0b       	sbc	r31, r23
 364:	e2 0f       	add	r30, r18
 366:	f3 1f       	adc	r31, r19
 368:	ee 0f       	add	r30, r30
 36a:	ff 1f       	adc	r31, r31
 36c:	ee 0f       	add	r30, r30
 36e:	ff 1f       	adc	r31, r31
 370:	ea 55       	subi	r30, 0x5A	; 90
 372:	ff 4f       	sbci	r31, 0xFF	; 255
 374:	43 83       	std	Z+3, r20	; 0x03
				Loc_enuDioEror =DIO_enuSetPinLogic(Se7venSegmentsArr[Copy_u8Se7enSegName][Loc_u8Counter].Se7enSegLED_StrU8PortCfg ,Se7venSegmentsArr[Copy_u8Se7enSegName][Loc_u8Counter].Se7enSegLED_StrU8PinCfg ,Se7venSegmentsArr[Copy_u8Se7enSegName][Loc_u8Counter].Se7enSegLED_StrU8OnOffState );
 376:	61 81       	ldd	r22, Z+1	; 0x01
 378:	80 81       	ld	r24, Z
 37a:	0e 94 68 02 	call	0x4d0	; 0x4d0 <DIO_enuSetPinLogic>
				      break;
 37e:	3a c0       	rjmp	.+116    	; 0x3f4 <Se7enSeg_SetValueSingle+0x114>
				case  ACTIVE_LOW :	
				Se7venSegmentsArr[Copy_u8Se7enSegName][Loc_u8Counter].Se7enSegLED_StrU8OnOffState =Se7enSeg_u8ValuesArr[Copy_u8Value][Loc_u8Counter];
 380:	81 2f       	mov	r24, r17
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	fc 01       	movw	r30, r24
 386:	ee 0f       	add	r30, r30
 388:	ff 1f       	adc	r31, r31
 38a:	ee 0f       	add	r30, r30
 38c:	ff 1f       	adc	r31, r31
 38e:	ee 0f       	add	r30, r30
 390:	ff 1f       	adc	r31, r31
 392:	e8 1b       	sub	r30, r24
 394:	f9 0b       	sbc	r31, r25
 396:	e0 5a       	subi	r30, 0xA0	; 160
 398:	ff 4f       	sbci	r31, 0xFF	; 255
 39a:	e2 0f       	add	r30, r18
 39c:	f3 1f       	adc	r31, r19
 39e:	80 81       	ld	r24, Z
 3a0:	fb 01       	movw	r30, r22
 3a2:	ee 0f       	add	r30, r30
 3a4:	ff 1f       	adc	r31, r31
 3a6:	ee 0f       	add	r30, r30
 3a8:	ff 1f       	adc	r31, r31
 3aa:	ee 0f       	add	r30, r30
 3ac:	ff 1f       	adc	r31, r31
 3ae:	e6 1b       	sub	r30, r22
 3b0:	f7 0b       	sbc	r31, r23
 3b2:	e2 0f       	add	r30, r18
 3b4:	f3 1f       	adc	r31, r19
 3b6:	ee 0f       	add	r30, r30
 3b8:	ff 1f       	adc	r31, r31
 3ba:	ee 0f       	add	r30, r30
 3bc:	ff 1f       	adc	r31, r31
 3be:	ea 55       	subi	r30, 0x5A	; 90
 3c0:	ff 4f       	sbci	r31, 0xFF	; 255
 3c2:	83 83       	std	Z+3, r24	; 0x03
				Loc_enuDioEror =DIO_enuSetPinLogic(Se7venSegmentsArr[Copy_u8Se7enSegName][Loc_u8Counter].Se7enSegLED_StrU8PortCfg ,Se7venSegmentsArr[Copy_u8Se7enSegName][Loc_u8Counter].Se7enSegLED_StrU8PinCfg ,!(Se7venSegmentsArr[Copy_u8Se7enSegName][Loc_u8Counter].Se7enSegLED_StrU8OnOffState) );
 3c4:	41 e0       	ldi	r20, 0x01	; 1
 3c6:	81 11       	cpse	r24, r1
 3c8:	40 e0       	ldi	r20, 0x00	; 0
 3ca:	fb 01       	movw	r30, r22
 3cc:	ee 0f       	add	r30, r30
 3ce:	ff 1f       	adc	r31, r31
 3d0:	ee 0f       	add	r30, r30
 3d2:	ff 1f       	adc	r31, r31
 3d4:	ee 0f       	add	r30, r30
 3d6:	ff 1f       	adc	r31, r31
 3d8:	e6 1b       	sub	r30, r22
 3da:	f7 0b       	sbc	r31, r23
 3dc:	e2 0f       	add	r30, r18
 3de:	f3 1f       	adc	r31, r19
 3e0:	ee 0f       	add	r30, r30
 3e2:	ff 1f       	adc	r31, r31
 3e4:	ee 0f       	add	r30, r30
 3e6:	ff 1f       	adc	r31, r31
 3e8:	ea 55       	subi	r30, 0x5A	; 90
 3ea:	ff 4f       	sbci	r31, 0xFF	; 255
 3ec:	61 81       	ldd	r22, Z+1	; 0x01
 3ee:	80 81       	ld	r24, Z
 3f0:	0e 94 68 02 	call	0x4d0	; 0x4d0 <DIO_enuSetPinLogic>
		
	}
	else
	{
		
		for (Loc_u8Counter = 0 ; Loc_u8Counter < 7 ; Loc_u8Counter ++ )
 3f4:	cf 5f       	subi	r28, 0xFF	; 255
 3f6:	c7 30       	cpi	r28, 0x07	; 7
 3f8:	08 f4       	brcc	.+2      	; 0x3fc <Se7enSeg_SetValueSingle+0x11c>
 3fa:	80 cf       	rjmp	.-256    	; 0x2fc <Se7enSeg_SetValueSingle+0x1c>

	return Loc_Se7enSegErrorState;
}
Se7enSeg_enuErorState Se7enSeg_SetValueSingle(u8 Copy_u8Se7enSegName , u8 Copy_u8Value)
{
	Se7enSeg_enuErorState Loc_enuErorState = Se7enSeg_enusucceeded ;
 3fc:	94 e0       	ldi	r25, 0x04	; 4
 3fe:	05 c0       	rjmp	.+10     	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
	DIO_enuErrorStatus_t Loc_enuDioEror = DIO_enuSucceded;
 400:	84 e0       	ldi	r24, 0x04	; 4
	u8 Loc_u8Counter ;
	if (Copy_u8Se7enSegName > NUM_OF_Se7enSeg)
	{
		
		Loc_enuErorState =  Se7enSeg_enuInvalidName ;
 402:	97 e0       	ldi	r25, 0x07	; 7
 404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
	return Loc_Se7enSegErrorState;
}
Se7enSeg_enuErorState Se7enSeg_SetValueSingle(u8 Copy_u8Se7enSegName , u8 Copy_u8Value)
{
	Se7enSeg_enuErorState Loc_enuErorState = Se7enSeg_enusucceeded ;
	DIO_enuErrorStatus_t Loc_enuDioEror = DIO_enuSucceded;
 406:	84 e0       	ldi	r24, 0x04	; 4
		
	}
	else if (Copy_u8Value > 9 || Copy_u8Value < 0)
	{
		
		Loc_enuErorState = Se7enSeg_enuInvalidValue ;
 408:	98 e0       	ldi	r25, 0x08	; 8
				break;  
				
			}
		}		
    }
	if (Loc_enuDioEror != DIO_enuSucceded)
 40a:	84 30       	cpi	r24, 0x04	; 4
 40c:	09 f0       	breq	.+2      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
	{
		
		Loc_enuErorState = Se7enSeg_enuDioNOK ;
 40e:	96 e0       	ldi	r25, 0x06	; 6
	}
	return Loc_enuErorState;
}
 410:	89 2f       	mov	r24, r25
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	1f 91       	pop	r17
 418:	08 95       	ret

0000041a <Se7enSeg_SetValueALL>:
Se7enSeg_enuErorState Se7enSeg_SetValueALL(u32 Copy_u8Value)
{
 41a:	1f 93       	push	r17
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
 420:	00 d0       	rcall	.+0      	; 0x422 <Se7enSeg_SetValueALL+0x8>
 422:	cd b7       	in	r28, 0x3d	; 61
 424:	de b7       	in	r29, 0x3e	; 62
 426:	ac 01       	movw	r20, r24
	Se7enSeg_enuErorState Loc_enuErorState = Se7enSeg_enusucceeded ;
	u8 Loc_u8Arr[NUM_OF_Se7enSeg]={0};
 428:	1a 82       	std	Y+2, r1	; 0x02
 42a:	19 82       	std	Y+1, r1	; 0x01
	u8 i = 0;	
	u8  r ;
		
	if (((NUM_OF_Se7enSeg ==1) && (Copy_u8Value > 9)) || ((NUM_OF_Se7enSeg ==2) && (Copy_u8Value > 99)) || ((NUM_OF_Se7enSeg ==3) && (Copy_u8Value > 999)) || ((NUM_OF_Se7enSeg ==4 ) && (Copy_u8Value > 9999)))
 42c:	84 36       	cpi	r24, 0x64	; 100
 42e:	91 05       	cpc	r25, r1
 430:	08 f0       	brcs	.+2      	; 0x434 <Se7enSeg_SetValueALL+0x1a>
 432:	47 c0       	rjmp	.+142    	; 0x4c2 <Se7enSeg_SetValueALL+0xa8>
 434:	10 e0       	ldi	r17, 0x00	; 0
 436:	2b c0       	rjmp	.+86     	; 0x48e <Se7enSeg_SetValueALL+0x74>
	else
	{
	
		while (Copy_u8Value != 0)
		 {
			r = Copy_u8Value % 10;	
 438:	9a 01       	movw	r18, r20
 43a:	ad ec       	ldi	r26, 0xCD	; 205
 43c:	bc ec       	ldi	r27, 0xCC	; 204
 43e:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__umulhisi3>
 442:	96 95       	lsr	r25
 444:	87 95       	ror	r24
 446:	96 95       	lsr	r25
 448:	87 95       	ror	r24
 44a:	96 95       	lsr	r25
 44c:	87 95       	ror	r24
 44e:	9c 01       	movw	r18, r24
 450:	22 0f       	add	r18, r18
 452:	33 1f       	adc	r19, r19
 454:	88 0f       	add	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	88 0f       	add	r24, r24
 45a:	99 1f       	adc	r25, r25
 45c:	88 0f       	add	r24, r24
 45e:	99 1f       	adc	r25, r25
 460:	82 0f       	add	r24, r18
 462:	93 1f       	adc	r25, r19
 464:	9a 01       	movw	r18, r20
 466:	28 1b       	sub	r18, r24
 468:	39 0b       	sbc	r19, r25
			Loc_u8Arr[i] = r;
 46a:	e1 e0       	ldi	r30, 0x01	; 1
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	ec 0f       	add	r30, r28
 470:	fd 1f       	adc	r31, r29
 472:	e1 0f       	add	r30, r17
 474:	f1 1d       	adc	r31, r1
 476:	20 83       	st	Z, r18
			i++;
 478:	1f 5f       	subi	r17, 0xFF	; 255
			Copy_u8Value= Copy_u8Value / 10;
 47a:	9a 01       	movw	r18, r20
 47c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__umulhisi3>
 480:	ac 01       	movw	r20, r24
 482:	56 95       	lsr	r21
 484:	47 95       	ror	r20
 486:	56 95       	lsr	r21
 488:	47 95       	ror	r20
 48a:	56 95       	lsr	r21
 48c:	47 95       	ror	r20
		Loc_enuErorState = Se7enSeg_enuInvalidValue ;
	}
	else
	{
	
		while (Copy_u8Value != 0)
 48e:	41 15       	cp	r20, r1
 490:	51 05       	cpc	r21, r1
 492:	91 f6       	brne	.-92     	; 0x438 <Se7enSeg_SetValueALL+0x1e>
		 {
			 case 1 :
			 Se7enSeg_SetValueSingle(Se7enSeg_NO_ZERO,Loc_u8Arr[0]);
			       break;
		     case 2 :
			 if (Copy_u8Value < 9)
 494:	49 30       	cpi	r20, 0x09	; 9
 496:	51 05       	cpc	r21, r1
 498:	50 f4       	brcc	.+20     	; 0x4ae <Se7enSeg_SetValueALL+0x94>
			 {
			   Se7enSeg_SetValueSingle(Se7enSeg_NO_ZERO,Loc_u8Arr[0]);	
 49a:	69 81       	ldd	r22, Y+1	; 0x01
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <Se7enSeg_SetValueSingle>
			   Se7enSeg_SetValueSingle(Se7enSeg_NO_ONE,Loc_u8Arr[1]); 
 4a2:	6a 81       	ldd	r22, Y+2	; 0x02
 4a4:	81 e0       	ldi	r24, 0x01	; 1
 4a6:	0e 94 70 01 	call	0x2e0	; 0x2e0 <Se7enSeg_SetValueSingle>
	}
	return Loc_enuErorState;
}
Se7enSeg_enuErorState Se7enSeg_SetValueALL(u32 Copy_u8Value)
{
	Se7enSeg_enuErorState Loc_enuErorState = Se7enSeg_enusucceeded ;
 4aa:	84 e0       	ldi	r24, 0x04	; 4
 4ac:	0b c0       	rjmp	.+22     	; 0x4c4 <Se7enSeg_SetValueALL+0xaa>
			   Se7enSeg_SetValueSingle(Se7enSeg_NO_ONE,Loc_u8Arr[1]); 
			 } 
			 
			 else
			 {
				  Se7enSeg_SetValueSingle(Se7enSeg_NO_ZERO,Loc_u8Arr[1]);
 4ae:	6a 81       	ldd	r22, Y+2	; 0x02
 4b0:	80 e0       	ldi	r24, 0x00	; 0
 4b2:	0e 94 70 01 	call	0x2e0	; 0x2e0 <Se7enSeg_SetValueSingle>
				  Se7enSeg_SetValueSingle(Se7enSeg_NO_ONE,Loc_u8Arr[0]);
 4b6:	69 81       	ldd	r22, Y+1	; 0x01
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	0e 94 70 01 	call	0x2e0	; 0x2e0 <Se7enSeg_SetValueSingle>
	}
	return Loc_enuErorState;
}
Se7enSeg_enuErorState Se7enSeg_SetValueALL(u32 Copy_u8Value)
{
	Se7enSeg_enuErorState Loc_enuErorState = Se7enSeg_enusucceeded ;
 4be:	84 e0       	ldi	r24, 0x04	; 4
 4c0:	01 c0       	rjmp	.+2      	; 0x4c4 <Se7enSeg_SetValueALL+0xaa>
	u8 i = 0;	
	u8  r ;
		
	if (((NUM_OF_Se7enSeg ==1) && (Copy_u8Value > 9)) || ((NUM_OF_Se7enSeg ==2) && (Copy_u8Value > 99)) || ((NUM_OF_Se7enSeg ==3) && (Copy_u8Value > 999)) || ((NUM_OF_Se7enSeg ==4 ) && (Copy_u8Value > 9999)))
	{
		Loc_enuErorState = Se7enSeg_enuInvalidValue ;
 4c2:	88 e0       	ldi	r24, 0x08	; 8
				       Se7enSeg_SetValueSingle(Se7enSeg_NO_THREE,Loc_u8Arr[0]);
			  }
			 }
		   }
		   return Loc_enuErorState ;
		 }
 4c4:	0f 90       	pop	r0
 4c6:	0f 90       	pop	r0
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	1f 91       	pop	r17
 4ce:	08 95       	ret

000004d0 <DIO_enuSetPinLogic>:
}
DIO_enuErrorStatus_t DIO_enuSetPinLogic(DIO_enuPortNumber_t Copy_PortNum , DIO_enuPinNumber_t Copy_PinNUm , DIO_enuSetPinLogic_t Copy_PinLogic)
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
	  
	if (Copy_PortNum > NUM_OF_PORTS || Copy_PortNum < DIO_enuPortA  )
 4d0:	85 30       	cpi	r24, 0x05	; 5
 4d2:	08 f0       	brcs	.+2      	; 0x4d6 <DIO_enuSetPinLogic+0x6>
 4d4:	87 c0       	rjmp	.+270    	; 0x5e4 <DIO_enuSetPinLogic+0x114>
	{
       Loc_enuErorState= DIO_enuInvalidPortNumber;
	}
	else if(Copy_PinNUm > DIO_enuPin7 || Copy_PinNUm < DIO_enuPin0)
 4d6:	68 30       	cpi	r22, 0x08	; 8
 4d8:	08 f0       	brcs	.+2      	; 0x4dc <DIO_enuSetPinLogic+0xc>
 4da:	86 c0       	rjmp	.+268    	; 0x5e8 <DIO_enuSetPinLogic+0x118>
	{
        Loc_enuErorState= DIO_enuInvalidPinNumber;
	}
	else if (Copy_PinLogic != DIO_enuLogicHigh && Copy_PinLogic != DIO_enuLogicLow)
 4dc:	42 30       	cpi	r20, 0x02	; 2
 4de:	08 f0       	brcs	.+2      	; 0x4e2 <DIO_enuSetPinLogic+0x12>
 4e0:	85 c0       	rjmp	.+266    	; 0x5ec <DIO_enuSetPinLogic+0x11c>
	{
		Loc_enuErorState= DIO_enuInvalidPinLogic;
	}
	else
	{
	   switch(Copy_PortNum)	
 4e2:	81 30       	cpi	r24, 0x01	; 1
 4e4:	31 f1       	breq	.+76     	; 0x532 <DIO_enuSetPinLogic+0x62>
 4e6:	38 f0       	brcs	.+14     	; 0x4f6 <DIO_enuSetPinLogic+0x26>
 4e8:	82 30       	cpi	r24, 0x02	; 2
 4ea:	09 f4       	brne	.+2      	; 0x4ee <DIO_enuSetPinLogic+0x1e>
 4ec:	40 c0       	rjmp	.+128    	; 0x56e <DIO_enuSetPinLogic+0x9e>
 4ee:	83 30       	cpi	r24, 0x03	; 3
 4f0:	09 f4       	brne	.+2      	; 0x4f4 <DIO_enuSetPinLogic+0x24>
 4f2:	5b c0       	rjmp	.+182    	; 0x5aa <DIO_enuSetPinLogic+0xda>
 4f4:	7d c0       	rjmp	.+250    	; 0x5f0 <DIO_enuSetPinLogic+0x120>
	   {
		   case DIO_enuPortA:
		          switch(Copy_PinLogic)
 4f6:	44 23       	and	r20, r20
 4f8:	79 f0       	breq	.+30     	; 0x518 <DIO_enuSetPinLogic+0x48>
 4fa:	41 30       	cpi	r20, 0x01	; 1
 4fc:	09 f0       	breq	.+2      	; 0x500 <DIO_enuSetPinLogic+0x30>
 4fe:	7a c0       	rjmp	.+244    	; 0x5f4 <DIO_enuSetPinLogic+0x124>
				  {
					  case DIO_enuLogicHigh :
					      SET_BIT(PORTA,Copy_PinNUm);
 500:	2b b3       	in	r18, 0x1b	; 27
 502:	81 e0       	ldi	r24, 0x01	; 1
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	02 c0       	rjmp	.+4      	; 0x50c <DIO_enuSetPinLogic+0x3c>
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	6a 95       	dec	r22
 50e:	e2 f7       	brpl	.-8      	; 0x508 <DIO_enuSetPinLogic+0x38>
 510:	82 2b       	or	r24, r18
 512:	8b bb       	out	0x1b, r24	; 27
	
	return Loc_enuErorState;
}
DIO_enuErrorStatus_t DIO_enuSetPinLogic(DIO_enuPortNumber_t Copy_PortNum , DIO_enuPinNumber_t Copy_PinNUm , DIO_enuSetPinLogic_t Copy_PinLogic)
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
 514:	84 e0       	ldi	r24, 0x04	; 4
		   case DIO_enuPortA:
		          switch(Copy_PinLogic)
				  {
					  case DIO_enuLogicHigh :
					      SET_BIT(PORTA,Copy_PinNUm);
					       break;
 516:	08 95       	ret
					  case DIO_enuLogicLow :
					      CLR_BIT(PORTA,Copy_PinNUm);
 518:	2b b3       	in	r18, 0x1b	; 27
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	02 c0       	rjmp	.+4      	; 0x524 <DIO_enuSetPinLogic+0x54>
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	6a 95       	dec	r22
 526:	e2 f7       	brpl	.-8      	; 0x520 <DIO_enuSetPinLogic+0x50>
 528:	80 95       	com	r24
 52a:	82 23       	and	r24, r18
 52c:	8b bb       	out	0x1b, r24	; 27
	
	return Loc_enuErorState;
}
DIO_enuErrorStatus_t DIO_enuSetPinLogic(DIO_enuPortNumber_t Copy_PortNum , DIO_enuPinNumber_t Copy_PinNUm , DIO_enuSetPinLogic_t Copy_PinLogic)
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
 52e:	84 e0       	ldi	r24, 0x04	; 4
					  case DIO_enuLogicHigh :
					      SET_BIT(PORTA,Copy_PinNUm);
					       break;
					  case DIO_enuLogicLow :
					      CLR_BIT(PORTA,Copy_PinNUm);
						   break;
 530:	08 95       	ret
					  default:
					       break; 
				  }
				  break;
			case DIO_enuPortB:
			         switch(Copy_PinLogic)
 532:	44 23       	and	r20, r20
 534:	79 f0       	breq	.+30     	; 0x554 <DIO_enuSetPinLogic+0x84>
 536:	41 30       	cpi	r20, 0x01	; 1
 538:	09 f0       	breq	.+2      	; 0x53c <DIO_enuSetPinLogic+0x6c>
 53a:	5e c0       	rjmp	.+188    	; 0x5f8 <DIO_enuSetPinLogic+0x128>
			         {
				         case DIO_enuLogicHigh :
				         SET_BIT(PORTB,Copy_PinNUm);
 53c:	28 b3       	in	r18, 0x18	; 24
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	02 c0       	rjmp	.+4      	; 0x548 <DIO_enuSetPinLogic+0x78>
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	6a 95       	dec	r22
 54a:	e2 f7       	brpl	.-8      	; 0x544 <DIO_enuSetPinLogic+0x74>
 54c:	82 2b       	or	r24, r18
 54e:	88 bb       	out	0x18, r24	; 24
	
	return Loc_enuErorState;
}
DIO_enuErrorStatus_t DIO_enuSetPinLogic(DIO_enuPortNumber_t Copy_PortNum , DIO_enuPinNumber_t Copy_PinNUm , DIO_enuSetPinLogic_t Copy_PinLogic)
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
 550:	84 e0       	ldi	r24, 0x04	; 4
			case DIO_enuPortB:
			         switch(Copy_PinLogic)
			         {
				         case DIO_enuLogicHigh :
				         SET_BIT(PORTB,Copy_PinNUm);
				         break;
 552:	08 95       	ret
				         case DIO_enuLogicLow :
				         CLR_BIT(PORTB,Copy_PinNUm);
 554:	28 b3       	in	r18, 0x18	; 24
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	02 c0       	rjmp	.+4      	; 0x560 <DIO_enuSetPinLogic+0x90>
 55c:	88 0f       	add	r24, r24
 55e:	99 1f       	adc	r25, r25
 560:	6a 95       	dec	r22
 562:	e2 f7       	brpl	.-8      	; 0x55c <DIO_enuSetPinLogic+0x8c>
 564:	80 95       	com	r24
 566:	82 23       	and	r24, r18
 568:	88 bb       	out	0x18, r24	; 24
	
	return Loc_enuErorState;
}
DIO_enuErrorStatus_t DIO_enuSetPinLogic(DIO_enuPortNumber_t Copy_PortNum , DIO_enuPinNumber_t Copy_PinNUm , DIO_enuSetPinLogic_t Copy_PinLogic)
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
 56a:	84 e0       	ldi	r24, 0x04	; 4
				         case DIO_enuLogicHigh :
				         SET_BIT(PORTB,Copy_PinNUm);
				         break;
				         case DIO_enuLogicLow :
				         CLR_BIT(PORTB,Copy_PinNUm);
				         break;
 56c:	08 95       	ret
				         default:
				         break;
			         }
			         break;
			case DIO_enuPortC:
			     switch(Copy_PinLogic)
 56e:	44 23       	and	r20, r20
 570:	79 f0       	breq	.+30     	; 0x590 <DIO_enuSetPinLogic+0xc0>
 572:	41 30       	cpi	r20, 0x01	; 1
 574:	09 f0       	breq	.+2      	; 0x578 <DIO_enuSetPinLogic+0xa8>
 576:	42 c0       	rjmp	.+132    	; 0x5fc <DIO_enuSetPinLogic+0x12c>
			      {
				    case DIO_enuLogicHigh :
				       SET_BIT(PORTC,Copy_PinNUm);
 578:	25 b3       	in	r18, 0x15	; 21
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	02 c0       	rjmp	.+4      	; 0x584 <DIO_enuSetPinLogic+0xb4>
 580:	88 0f       	add	r24, r24
 582:	99 1f       	adc	r25, r25
 584:	6a 95       	dec	r22
 586:	e2 f7       	brpl	.-8      	; 0x580 <DIO_enuSetPinLogic+0xb0>
 588:	82 2b       	or	r24, r18
 58a:	85 bb       	out	0x15, r24	; 21
	
	return Loc_enuErorState;
}
DIO_enuErrorStatus_t DIO_enuSetPinLogic(DIO_enuPortNumber_t Copy_PortNum , DIO_enuPinNumber_t Copy_PinNUm , DIO_enuSetPinLogic_t Copy_PinLogic)
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
 58c:	84 e0       	ldi	r24, 0x04	; 4
			case DIO_enuPortC:
			     switch(Copy_PinLogic)
			      {
				    case DIO_enuLogicHigh :
				       SET_BIT(PORTC,Copy_PinNUm);
				        break;
 58e:	08 95       	ret
				    case DIO_enuLogicLow :
				       CLR_BIT(PORTC,Copy_PinNUm);
 590:	25 b3       	in	r18, 0x15	; 21
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	02 c0       	rjmp	.+4      	; 0x59c <DIO_enuSetPinLogic+0xcc>
 598:	88 0f       	add	r24, r24
 59a:	99 1f       	adc	r25, r25
 59c:	6a 95       	dec	r22
 59e:	e2 f7       	brpl	.-8      	; 0x598 <DIO_enuSetPinLogic+0xc8>
 5a0:	80 95       	com	r24
 5a2:	82 23       	and	r24, r18
 5a4:	85 bb       	out	0x15, r24	; 21
	
	return Loc_enuErorState;
}
DIO_enuErrorStatus_t DIO_enuSetPinLogic(DIO_enuPortNumber_t Copy_PortNum , DIO_enuPinNumber_t Copy_PinNUm , DIO_enuSetPinLogic_t Copy_PinLogic)
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
 5a6:	84 e0       	ldi	r24, 0x04	; 4
				    case DIO_enuLogicHigh :
				       SET_BIT(PORTC,Copy_PinNUm);
				        break;
				    case DIO_enuLogicLow :
				       CLR_BIT(PORTC,Copy_PinNUm);
				       break;
 5a8:	08 95       	ret
				    default:
				      break;
			      }
			   break;
			case DIO_enuPortD:
			   switch(Copy_PinLogic)
 5aa:	44 23       	and	r20, r20
 5ac:	71 f0       	breq	.+28     	; 0x5ca <DIO_enuSetPinLogic+0xfa>
 5ae:	41 30       	cpi	r20, 0x01	; 1
 5b0:	39 f5       	brne	.+78     	; 0x600 <DIO_enuSetPinLogic+0x130>
			    {
				  case DIO_enuLogicHigh :
				      SET_BIT(PORTD,Copy_PinNUm);
 5b2:	22 b3       	in	r18, 0x12	; 18
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	02 c0       	rjmp	.+4      	; 0x5be <DIO_enuSetPinLogic+0xee>
 5ba:	88 0f       	add	r24, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	6a 95       	dec	r22
 5c0:	e2 f7       	brpl	.-8      	; 0x5ba <DIO_enuSetPinLogic+0xea>
 5c2:	82 2b       	or	r24, r18
 5c4:	82 bb       	out	0x12, r24	; 18
	
	return Loc_enuErorState;
}
DIO_enuErrorStatus_t DIO_enuSetPinLogic(DIO_enuPortNumber_t Copy_PortNum , DIO_enuPinNumber_t Copy_PinNUm , DIO_enuSetPinLogic_t Copy_PinLogic)
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
 5c6:	84 e0       	ldi	r24, 0x04	; 4
			case DIO_enuPortD:
			   switch(Copy_PinLogic)
			    {
				  case DIO_enuLogicHigh :
				      SET_BIT(PORTD,Copy_PinNUm);
				       break;
 5c8:	08 95       	ret
				  case DIO_enuLogicLow :
				      CLR_BIT(PORTD,Copy_PinNUm);
 5ca:	22 b3       	in	r18, 0x12	; 18
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_enuSetPinLogic+0x106>
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	6a 95       	dec	r22
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_enuSetPinLogic+0x102>
 5da:	80 95       	com	r24
 5dc:	82 23       	and	r24, r18
 5de:	82 bb       	out	0x12, r24	; 18
	
	return Loc_enuErorState;
}
DIO_enuErrorStatus_t DIO_enuSetPinLogic(DIO_enuPortNumber_t Copy_PortNum , DIO_enuPinNumber_t Copy_PinNUm , DIO_enuSetPinLogic_t Copy_PinLogic)
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
 5e0:	84 e0       	ldi	r24, 0x04	; 4
				  case DIO_enuLogicHigh :
				      SET_BIT(PORTD,Copy_PinNUm);
				       break;
				  case DIO_enuLogicLow :
				      CLR_BIT(PORTD,Copy_PinNUm);
				       break;
 5e2:	08 95       	ret
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
	  
	if (Copy_PortNum > NUM_OF_PORTS || Copy_PortNum < DIO_enuPortA  )
	{
       Loc_enuErorState= DIO_enuInvalidPortNumber;
 5e4:	80 e0       	ldi	r24, 0x00	; 0
 5e6:	08 95       	ret
	}
	else if(Copy_PinNUm > DIO_enuPin7 || Copy_PinNUm < DIO_enuPin0)
	{
        Loc_enuErorState= DIO_enuInvalidPinNumber;
 5e8:	81 e0       	ldi	r24, 0x01	; 1
 5ea:	08 95       	ret
	}
	else if (Copy_PinLogic != DIO_enuLogicHigh && Copy_PinLogic != DIO_enuLogicLow)
	{
		Loc_enuErorState= DIO_enuInvalidPinLogic;
 5ec:	82 e0       	ldi	r24, 0x02	; 2
 5ee:	08 95       	ret
	
	return Loc_enuErorState;
}
DIO_enuErrorStatus_t DIO_enuSetPinLogic(DIO_enuPortNumber_t Copy_PortNum , DIO_enuPinNumber_t Copy_PinNUm , DIO_enuSetPinLogic_t Copy_PinLogic)
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
 5f0:	84 e0       	ldi	r24, 0x04	; 4
 5f2:	08 95       	ret
 5f4:	84 e0       	ldi	r24, 0x04	; 4
 5f6:	08 95       	ret
 5f8:	84 e0       	ldi	r24, 0x04	; 4
 5fa:	08 95       	ret
 5fc:	84 e0       	ldi	r24, 0x04	; 4
 5fe:	08 95       	ret
 600:	84 e0       	ldi	r24, 0x04	; 4
		
}
	
	return Loc_enuErorState;
	
}
 602:	08 95       	ret

00000604 <DIO_enuGetPinLogic>:
DIO_enuErrorStatus_t DIO_enuGetPinLogic(DIO_enuPortNumber_t Copy_PortNum ,  DIO_enuPinNumber_t Copy_PinNUm , u8 *Add_Pu8PinValue)
{
	DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
	
  if(Copy_PortNum > NUM_OF_PORTS || Copy_PortNum < DIO_enuPortA)
 604:	85 30       	cpi	r24, 0x05	; 5
 606:	e8 f5       	brcc	.+122    	; 0x682 <DIO_enuGetPinLogic+0x7e>
  {
	Loc_enuErorState = DIO_enuInvalidPortNumber;
  }
  else if (Copy_PinNUm > DIO_enuPin7 || Copy_PinNUm < DIO_enuPin0)
 608:	68 30       	cpi	r22, 0x08	; 8
 60a:	e8 f5       	brcc	.+122    	; 0x686 <DIO_enuGetPinLogic+0x82>
  {
	  Loc_enuErorState = DIO_enuInvalidPinNumber;
	  
  }
  else if (!Add_Pu8PinValue)
 60c:	41 15       	cp	r20, r1
 60e:	51 05       	cpc	r21, r1
 610:	e1 f1       	breq	.+120    	; 0x68a <DIO_enuGetPinLogic+0x86>
  {
	Loc_enuErorState= DIO_enuNullPtr;  	  
  }
  else 
  {
	switch(Copy_PortNum)
 612:	81 30       	cpi	r24, 0x01	; 1
 614:	91 f0       	breq	.+36     	; 0x63a <DIO_enuGetPinLogic+0x36>
 616:	28 f0       	brcs	.+10     	; 0x622 <DIO_enuGetPinLogic+0x1e>
 618:	82 30       	cpi	r24, 0x02	; 2
 61a:	d9 f0       	breq	.+54     	; 0x652 <DIO_enuGetPinLogic+0x4e>
 61c:	83 30       	cpi	r24, 0x03	; 3
 61e:	29 f1       	breq	.+74     	; 0x66a <DIO_enuGetPinLogic+0x66>
 620:	36 c0       	rjmp	.+108    	; 0x68e <DIO_enuGetPinLogic+0x8a>
	{
	  case  DIO_enuPortA:
	        *Add_Pu8PinValue=GET_BIT(PINA,Copy_PinNUm);
 622:	89 b3       	in	r24, 0x19	; 25
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	02 c0       	rjmp	.+4      	; 0x62c <DIO_enuGetPinLogic+0x28>
 628:	95 95       	asr	r25
 62a:	87 95       	ror	r24
 62c:	6a 95       	dec	r22
 62e:	e2 f7       	brpl	.-8      	; 0x628 <DIO_enuGetPinLogic+0x24>
 630:	81 70       	andi	r24, 0x01	; 1
 632:	fa 01       	movw	r30, r20
 634:	80 83       	st	Z, r24
	return Loc_enuErorState;
	
}
DIO_enuErrorStatus_t DIO_enuGetPinLogic(DIO_enuPortNumber_t Copy_PortNum ,  DIO_enuPinNumber_t Copy_PinNUm , u8 *Add_Pu8PinValue)
{
	DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
 636:	84 e0       	ldi	r24, 0x04	; 4
  {
	switch(Copy_PortNum)
	{
	  case  DIO_enuPortA:
	        *Add_Pu8PinValue=GET_BIT(PINA,Copy_PinNUm);
			break;
 638:	08 95       	ret
	  case  DIO_enuPortB:
	       *Add_Pu8PinValue=GET_BIT(PINB,Copy_PinNUm);
 63a:	86 b3       	in	r24, 0x16	; 22
 63c:	90 e0       	ldi	r25, 0x00	; 0
 63e:	02 c0       	rjmp	.+4      	; 0x644 <DIO_enuGetPinLogic+0x40>
 640:	95 95       	asr	r25
 642:	87 95       	ror	r24
 644:	6a 95       	dec	r22
 646:	e2 f7       	brpl	.-8      	; 0x640 <DIO_enuGetPinLogic+0x3c>
 648:	81 70       	andi	r24, 0x01	; 1
 64a:	fa 01       	movw	r30, r20
 64c:	80 83       	st	Z, r24
	return Loc_enuErorState;
	
}
DIO_enuErrorStatus_t DIO_enuGetPinLogic(DIO_enuPortNumber_t Copy_PortNum ,  DIO_enuPinNumber_t Copy_PinNUm , u8 *Add_Pu8PinValue)
{
	DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
 64e:	84 e0       	ldi	r24, 0x04	; 4
	  case  DIO_enuPortA:
	        *Add_Pu8PinValue=GET_BIT(PINA,Copy_PinNUm);
			break;
	  case  DIO_enuPortB:
	       *Add_Pu8PinValue=GET_BIT(PINB,Copy_PinNUm);
	        break;
 650:	08 95       	ret
	  case  DIO_enuPortC:
	      *Add_Pu8PinValue=GET_BIT(PINC,Copy_PinNUm);
 652:	83 b3       	in	r24, 0x13	; 19
 654:	90 e0       	ldi	r25, 0x00	; 0
 656:	02 c0       	rjmp	.+4      	; 0x65c <DIO_enuGetPinLogic+0x58>
 658:	95 95       	asr	r25
 65a:	87 95       	ror	r24
 65c:	6a 95       	dec	r22
 65e:	e2 f7       	brpl	.-8      	; 0x658 <DIO_enuGetPinLogic+0x54>
 660:	81 70       	andi	r24, 0x01	; 1
 662:	fa 01       	movw	r30, r20
 664:	80 83       	st	Z, r24
	return Loc_enuErorState;
	
}
DIO_enuErrorStatus_t DIO_enuGetPinLogic(DIO_enuPortNumber_t Copy_PortNum ,  DIO_enuPinNumber_t Copy_PinNUm , u8 *Add_Pu8PinValue)
{
	DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
 666:	84 e0       	ldi	r24, 0x04	; 4
	  case  DIO_enuPortB:
	       *Add_Pu8PinValue=GET_BIT(PINB,Copy_PinNUm);
	        break;
	  case  DIO_enuPortC:
	      *Add_Pu8PinValue=GET_BIT(PINC,Copy_PinNUm);
	       break;
 668:	08 95       	ret
	  case  DIO_enuPortD:
	      *Add_Pu8PinValue=GET_BIT(PIND,Copy_PinNUm);
 66a:	80 b3       	in	r24, 0x10	; 16
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	02 c0       	rjmp	.+4      	; 0x674 <DIO_enuGetPinLogic+0x70>
 670:	95 95       	asr	r25
 672:	87 95       	ror	r24
 674:	6a 95       	dec	r22
 676:	e2 f7       	brpl	.-8      	; 0x670 <DIO_enuGetPinLogic+0x6c>
 678:	81 70       	andi	r24, 0x01	; 1
 67a:	fa 01       	movw	r30, r20
 67c:	80 83       	st	Z, r24
	return Loc_enuErorState;
	
}
DIO_enuErrorStatus_t DIO_enuGetPinLogic(DIO_enuPortNumber_t Copy_PortNum ,  DIO_enuPinNumber_t Copy_PinNUm , u8 *Add_Pu8PinValue)
{
	DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
 67e:	84 e0       	ldi	r24, 0x04	; 4
	  case  DIO_enuPortC:
	      *Add_Pu8PinValue=GET_BIT(PINC,Copy_PinNUm);
	       break;
	  case  DIO_enuPortD:
	      *Add_Pu8PinValue=GET_BIT(PIND,Copy_PinNUm);
	       break;
 680:	08 95       	ret
{
	DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
	
  if(Copy_PortNum > NUM_OF_PORTS || Copy_PortNum < DIO_enuPortA)
  {
	Loc_enuErorState = DIO_enuInvalidPortNumber;
 682:	80 e0       	ldi	r24, 0x00	; 0
 684:	08 95       	ret
  }
  else if (Copy_PinNUm > DIO_enuPin7 || Copy_PinNUm < DIO_enuPin0)
  {
	  Loc_enuErorState = DIO_enuInvalidPinNumber;
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	08 95       	ret
	  
  }
  else if (!Add_Pu8PinValue)
  {
	Loc_enuErorState= DIO_enuNullPtr;  	  
 68a:	85 e0       	ldi	r24, 0x05	; 5
 68c:	08 95       	ret
	return Loc_enuErorState;
	
}
DIO_enuErrorStatus_t DIO_enuGetPinLogic(DIO_enuPortNumber_t Copy_PortNum ,  DIO_enuPinNumber_t Copy_PinNUm , u8 *Add_Pu8PinValue)
{
	DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
 68e:	84 e0       	ldi	r24, 0x04	; 4
  }
	
	
	 return Loc_enuErorState;
	
}
 690:	08 95       	ret

00000692 <LED_Init>:
 * Last Update      :       11/12/2023                                                                                                    */
 #include "LED.h"

  extern LED_StrCfg_t LEDS_Arr[NUM_OF_LEDS];
  
 LED_enuErorState LED_Init(void){
 692:	1f 93       	push	r17
 694:	cf 93       	push	r28
 696:	df 93       	push	r29
 698:	00 d0       	rcall	.+0      	; 0x69a <LED_Init+0x8>
 69a:	1f 92       	push	r1
 69c:	cd b7       	in	r28, 0x3d	; 61
 69e:	de b7       	in	r29, 0x3e	; 62
	 return Loc_LEDErrorState ;
	 
	 }   */
	
	
	  for(LocU8Counter = 0; LocU8Counter < NUM_OF_LEDS; LocU8Counter++) {
 6a0:	10 e0       	ldi	r17, 0x00	; 0
  extern LED_StrCfg_t LEDS_Arr[NUM_OF_LEDS];
  
 LED_enuErorState LED_Init(void){
	 
	 LED_enuErorState Loc_LEDErrorState = LED_enusucceeded ;
	 PORT_enuErrorStatus_t Loc_PORTErorState = PORT_enuSucceded ;
 6a2:	44 e0       	ldi	r20, 0x04	; 4
	 return Loc_LEDErrorState ;
	 
	 }   */
	
	
	  for(LocU8Counter = 0; LocU8Counter < NUM_OF_LEDS; LocU8Counter++) {
 6a4:	89 c0       	rjmp	.+274    	; 0x7b8 <LED_Init+0x126>
    if (LEDS_Arr[LocU8Counter].LED_StrU8PortCfg > NUM_OF_PORTS || LEDS_Arr[LocU8Counter].LED_StrU8PortCfg < LED_PORTA) {
 6a6:	21 2f       	mov	r18, r17
 6a8:	30 e0       	ldi	r19, 0x00	; 0
 6aa:	f9 01       	movw	r30, r18
 6ac:	ee 0f       	add	r30, r30
 6ae:	ff 1f       	adc	r31, r31
 6b0:	ee 0f       	add	r30, r30
 6b2:	ff 1f       	adc	r31, r31
 6b4:	e2 52       	subi	r30, 0x22	; 34
 6b6:	ff 4f       	sbci	r31, 0xFF	; 255
 6b8:	80 81       	ld	r24, Z
 6ba:	85 30       	cpi	r24, 0x05	; 5
 6bc:	08 f0       	brcs	.+2      	; 0x6c0 <LED_Init+0x2e>
 6be:	81 c0       	rjmp	.+258    	; 0x7c2 <LED_Init+0x130>
        Loc_LEDErrorState = LED_enuInvalidPort;
        break;
    }
    else if (LEDS_Arr[LocU8Counter].LED_StrU8PinCFg > LED_PIN7 || LEDS_Arr[LocU8Counter].LED_StrU8PinCFg < LED_PIN0) {
 6c0:	f9 01       	movw	r30, r18
 6c2:	ee 0f       	add	r30, r30
 6c4:	ff 1f       	adc	r31, r31
 6c6:	ee 0f       	add	r30, r30
 6c8:	ff 1f       	adc	r31, r31
 6ca:	e2 52       	subi	r30, 0x22	; 34
 6cc:	ff 4f       	sbci	r31, 0xFF	; 255
 6ce:	61 81       	ldd	r22, Z+1	; 0x01
 6d0:	68 30       	cpi	r22, 0x08	; 8
 6d2:	08 f0       	brcs	.+2      	; 0x6d6 <LED_Init+0x44>
 6d4:	78 c0       	rjmp	.+240    	; 0x7c6 <LED_Init+0x134>
        Loc_LEDErrorState = LED_enuInvalidPin;
        break;
    }
    else if (LEDS_Arr[LocU8Counter].LED_StrU8ActiveState != ACTIVE_HIGH && LEDS_Arr[LocU8Counter].LED_StrU8ActiveState != ACTIVE_LOW) {
 6d6:	f9 01       	movw	r30, r18
 6d8:	ee 0f       	add	r30, r30
 6da:	ff 1f       	adc	r31, r31
 6dc:	ee 0f       	add	r30, r30
 6de:	ff 1f       	adc	r31, r31
 6e0:	e2 52       	subi	r30, 0x22	; 34
 6e2:	ff 4f       	sbci	r31, 0xFF	; 255
 6e4:	92 81       	ldd	r25, Z+2	; 0x02
 6e6:	92 30       	cpi	r25, 0x02	; 2
 6e8:	08 f0       	brcs	.+2      	; 0x6ec <LED_Init+0x5a>
 6ea:	6f c0       	rjmp	.+222    	; 0x7ca <LED_Init+0x138>
        Loc_LEDErrorState = LED_enuInvalidActiveState;
        break;
    }
    else if (LEDS_Arr[LocU8Counter].LED_StrU8OnOffState != LED_ON_STATE && LEDS_Arr[LocU8Counter].LED_StrU8OnOffState != LED_OFF_STATE) {
 6ec:	f9 01       	movw	r30, r18
 6ee:	ee 0f       	add	r30, r30
 6f0:	ff 1f       	adc	r31, r31
 6f2:	ee 0f       	add	r30, r30
 6f4:	ff 1f       	adc	r31, r31
 6f6:	e2 52       	subi	r30, 0x22	; 34
 6f8:	ff 4f       	sbci	r31, 0xFF	; 255
 6fa:	53 81       	ldd	r21, Z+3	; 0x03
 6fc:	52 30       	cpi	r21, 0x02	; 2
 6fe:	08 f0       	brcs	.+2      	; 0x702 <LED_Init+0x70>
 700:	66 c0       	rjmp	.+204    	; 0x7ce <LED_Init+0x13c>
        Loc_LEDErrorState = LED_enuInvalidLogicState;
        break;
    }
    else {
        Loc_Str_CurrLED_Arr[LocU8Counter].PORT_StrU8PortNum = LEDS_Arr[LocU8Counter].LED_StrU8PortCfg;
 702:	f9 01       	movw	r30, r18
 704:	ee 0f       	add	r30, r30
 706:	ff 1f       	adc	r31, r31
 708:	e2 0f       	add	r30, r18
 70a:	f3 1f       	adc	r31, r19
 70c:	a1 e0       	ldi	r26, 0x01	; 1
 70e:	b0 e0       	ldi	r27, 0x00	; 0
 710:	ac 0f       	add	r26, r28
 712:	bd 1f       	adc	r27, r29
 714:	ea 0f       	add	r30, r26
 716:	fb 1f       	adc	r31, r27
 718:	80 83       	st	Z, r24
        Loc_Str_CurrLED_Arr[LocU8Counter].PORT_StrU8PinNum = LEDS_Arr[LocU8Counter].LED_StrU8PinCFg;
 71a:	61 83       	std	Z+1, r22	; 0x01
      switch (LEDS_Arr[LocU8Counter].LED_StrU8ActiveState) {
 71c:	99 23       	and	r25, r25
 71e:	f1 f0       	breq	.+60     	; 0x75c <LED_Init+0xca>
 720:	91 30       	cpi	r25, 0x01	; 1
 722:	d9 f5       	brne	.+118    	; 0x79a <LED_Init+0x108>
    case ACTIVE_HIGH:
        switch (LEDS_Arr[LocU8Counter].LED_StrU8OnOffState) {
 724:	55 23       	and	r21, r21
 726:	61 f0       	breq	.+24     	; 0x740 <LED_Init+0xae>
 728:	51 30       	cpi	r21, 0x01	; 1
 72a:	b9 f5       	brne	.+110    	; 0x79a <LED_Init+0x108>
            case LED_ON_STATE:
                Loc_Str_CurrLED_Arr[LocU8Counter].PORT_StrU8PinCfg = PORT_enuOutput_High;
 72c:	f9 01       	movw	r30, r18
 72e:	ee 0f       	add	r30, r30
 730:	ff 1f       	adc	r31, r31
 732:	e2 0f       	add	r30, r18
 734:	f3 1f       	adc	r31, r19
 736:	ea 0f       	add	r30, r26
 738:	fb 1f       	adc	r31, r27
 73a:	83 e0       	ldi	r24, 0x03	; 3
 73c:	82 83       	std	Z+2, r24	; 0x02
                break;
 73e:	2d c0       	rjmp	.+90     	; 0x79a <LED_Init+0x108>
            case LED_OFF_STATE:
                Loc_Str_CurrLED_Arr[LocU8Counter].PORT_StrU8PinCfg = PORT_enuOutput_Low;
 740:	f9 01       	movw	r30, r18
 742:	ee 0f       	add	r30, r30
 744:	ff 1f       	adc	r31, r31
 746:	e2 0f       	add	r30, r18
 748:	f3 1f       	adc	r31, r19
 74a:	81 e0       	ldi	r24, 0x01	; 1
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	8c 0f       	add	r24, r28
 750:	9d 1f       	adc	r25, r29
 752:	e8 0f       	add	r30, r24
 754:	f9 1f       	adc	r31, r25
 756:	82 e0       	ldi	r24, 0x02	; 2
 758:	82 83       	std	Z+2, r24	; 0x02
                break;
 75a:	1f c0       	rjmp	.+62     	; 0x79a <LED_Init+0x108>
        }
        break;

    case ACTIVE_LOW:
        switch (LEDS_Arr[LocU8Counter].LED_StrU8OnOffState) {
 75c:	55 23       	and	r21, r21
 75e:	81 f0       	breq	.+32     	; 0x780 <LED_Init+0xee>
 760:	51 30       	cpi	r21, 0x01	; 1
 762:	d9 f4       	brne	.+54     	; 0x79a <LED_Init+0x108>
            case LED_ON_STATE:
                Loc_Str_CurrLED_Arr[LocU8Counter].PORT_StrU8PinCfg = PORT_enuOutput_Low;
 764:	f9 01       	movw	r30, r18
 766:	ee 0f       	add	r30, r30
 768:	ff 1f       	adc	r31, r31
 76a:	e2 0f       	add	r30, r18
 76c:	f3 1f       	adc	r31, r19
 76e:	a1 e0       	ldi	r26, 0x01	; 1
 770:	b0 e0       	ldi	r27, 0x00	; 0
 772:	ac 0f       	add	r26, r28
 774:	bd 1f       	adc	r27, r29
 776:	ea 0f       	add	r30, r26
 778:	fb 1f       	adc	r31, r27
 77a:	82 e0       	ldi	r24, 0x02	; 2
 77c:	82 83       	std	Z+2, r24	; 0x02
                break;
 77e:	0d c0       	rjmp	.+26     	; 0x79a <LED_Init+0x108>
            case LED_OFF_STATE:
                Loc_Str_CurrLED_Arr[LocU8Counter].PORT_StrU8PinCfg = PORT_enuOutput_High;
 780:	f9 01       	movw	r30, r18
 782:	ee 0f       	add	r30, r30
 784:	ff 1f       	adc	r31, r31
 786:	e2 0f       	add	r30, r18
 788:	f3 1f       	adc	r31, r19
 78a:	81 e0       	ldi	r24, 0x01	; 1
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	8c 0f       	add	r24, r28
 790:	9d 1f       	adc	r25, r29
 792:	e8 0f       	add	r30, r24
 794:	f9 1f       	adc	r31, r25
 796:	83 e0       	ldi	r24, 0x03	; 3
 798:	82 83       	std	Z+2, r24	; 0x02
        }
        break;
}


        Loc_PORTErorState = PORT_enuSetPinConfiguration(&Loc_Str_CurrLED_Arr[LocU8Counter]);
 79a:	c9 01       	movw	r24, r18
 79c:	88 0f       	add	r24, r24
 79e:	99 1f       	adc	r25, r25
 7a0:	82 0f       	add	r24, r18
 7a2:	93 1f       	adc	r25, r19
 7a4:	a1 e0       	ldi	r26, 0x01	; 1
 7a6:	b0 e0       	ldi	r27, 0x00	; 0
 7a8:	ac 0f       	add	r26, r28
 7aa:	bd 1f       	adc	r27, r29
 7ac:	8a 0f       	add	r24, r26
 7ae:	9b 1f       	adc	r25, r27
 7b0:	0e 94 bd 04 	call	0x97a	; 0x97a <PORT_enuSetPinConfiguration>
 7b4:	48 2f       	mov	r20, r24
	 return Loc_LEDErrorState ;
	 
	 }   */
	
	
	  for(LocU8Counter = 0; LocU8Counter < NUM_OF_LEDS; LocU8Counter++) {
 7b6:	1f 5f       	subi	r17, 0xFF	; 255
 7b8:	11 23       	and	r17, r17
 7ba:	09 f4       	brne	.+2      	; 0x7be <LED_Init+0x12c>
 7bc:	74 cf       	rjmp	.-280    	; 0x6a6 <LED_Init+0x14>

  extern LED_StrCfg_t LEDS_Arr[NUM_OF_LEDS];
  
 LED_enuErorState LED_Init(void){
	 
	 LED_enuErorState Loc_LEDErrorState = LED_enusucceeded ;
 7be:	84 e0       	ldi	r24, 0x04	; 4
 7c0:	07 c0       	rjmp	.+14     	; 0x7d0 <LED_Init+0x13e>
	 }   */
	
	
	  for(LocU8Counter = 0; LocU8Counter < NUM_OF_LEDS; LocU8Counter++) {
    if (LEDS_Arr[LocU8Counter].LED_StrU8PortCfg > NUM_OF_PORTS || LEDS_Arr[LocU8Counter].LED_StrU8PortCfg < LED_PORTA) {
        Loc_LEDErrorState = LED_enuInvalidPort;
 7c2:	80 e0       	ldi	r24, 0x00	; 0
 7c4:	05 c0       	rjmp	.+10     	; 0x7d0 <LED_Init+0x13e>
        break;
    }
    else if (LEDS_Arr[LocU8Counter].LED_StrU8PinCFg > LED_PIN7 || LEDS_Arr[LocU8Counter].LED_StrU8PinCFg < LED_PIN0) {
        Loc_LEDErrorState = LED_enuInvalidPin;
 7c6:	81 e0       	ldi	r24, 0x01	; 1
 7c8:	03 c0       	rjmp	.+6      	; 0x7d0 <LED_Init+0x13e>
        break;
    }
    else if (LEDS_Arr[LocU8Counter].LED_StrU8ActiveState != ACTIVE_HIGH && LEDS_Arr[LocU8Counter].LED_StrU8ActiveState != ACTIVE_LOW) {
        Loc_LEDErrorState = LED_enuInvalidActiveState;
 7ca:	82 e0       	ldi	r24, 0x02	; 2
 7cc:	01 c0       	rjmp	.+2      	; 0x7d0 <LED_Init+0x13e>
        break;
    }
    else if (LEDS_Arr[LocU8Counter].LED_StrU8OnOffState != LED_ON_STATE && LEDS_Arr[LocU8Counter].LED_StrU8OnOffState != LED_OFF_STATE) {
        Loc_LEDErrorState = LED_enuInvalidLogicState;
 7ce:	83 e0       	ldi	r24, 0x03	; 3

        Loc_PORTErorState = PORT_enuSetPinConfiguration(&Loc_Str_CurrLED_Arr[LocU8Counter]);
    }
}

if (Loc_PORTErorState != PORT_enuSucceded) {
 7d0:	44 30       	cpi	r20, 0x04	; 4
 7d2:	09 f0       	breq	.+2      	; 0x7d6 <LED_Init+0x144>
    Loc_LEDErrorState = LED_enuPortNOK;
 7d4:	85 e0       	ldi	r24, 0x05	; 5
}

return Loc_LEDErrorState;

 }
 7d6:	0f 90       	pop	r0
 7d8:	0f 90       	pop	r0
 7da:	0f 90       	pop	r0
 7dc:	df 91       	pop	r29
 7de:	cf 91       	pop	r28
 7e0:	1f 91       	pop	r17
 7e2:	08 95       	ret

000007e4 <LED_enuSetLedState>:

LED_enuErorState LED_enuSetLedState (u8 Copy_u8LedName , u8 Copy_u8LedState)
{
	LED_enuErorState Loc_enuErorState = LED_enusucceeded ;
	DIO_enuErrorStatus_t Loc_enuDioEror = DIO_enuSucceded;
   if (Copy_u8LedName > NUM_OF_LEDS)
 7e4:	82 30       	cpi	r24, 0x02	; 2
 7e6:	08 f0       	brcs	.+2      	; 0x7ea <LED_enuSetLedState+0x6>
 7e8:	5a c0       	rjmp	.+180    	; 0x89e <__stack+0x3f>
   {
	   
	Loc_enuErorState = LED_enuInvalidName ;
	
   }
   else if (Copy_u8LedState != LED_ON_STATE  && Copy_u8LedState != LED_OFF_STATE )
 7ea:	62 30       	cpi	r22, 0x02	; 2
 7ec:	08 f0       	brcs	.+2      	; 0x7f0 <LED_enuSetLedState+0xc>
 7ee:	59 c0       	rjmp	.+178    	; 0x8a2 <__stack+0x43>
	   
   }
   else
    {
	   
    if (Copy_u8LedState == LED_ON_STATE)
 7f0:	61 30       	cpi	r22, 0x01	; 1
 7f2:	41 f5       	brne	.+80     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
	 {
		 switch (LEDS_Arr[Copy_u8LedName].LED_StrU8ActiveState)
 7f4:	90 e0       	ldi	r25, 0x00	; 0
 7f6:	fc 01       	movw	r30, r24
 7f8:	ee 0f       	add	r30, r30
 7fa:	ff 1f       	adc	r31, r31
 7fc:	ee 0f       	add	r30, r30
 7fe:	ff 1f       	adc	r31, r31
 800:	e2 52       	subi	r30, 0x22	; 34
 802:	ff 4f       	sbci	r31, 0xFF	; 255
 804:	22 81       	ldd	r18, Z+2	; 0x02
 806:	22 23       	and	r18, r18
 808:	81 f0       	breq	.+32     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
 80a:	21 30       	cpi	r18, 0x01	; 1
 80c:	09 f0       	breq	.+2      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 80e:	41 c0       	rjmp	.+130    	; 0x892 <__stack+0x33>
		 {
			case (ACTIVE_HIGH):
		          Loc_enuDioEror=DIO_enuSetPinLogic(LEDS_Arr[Copy_u8LedName].LED_StrU8PortCfg ,LEDS_Arr[Copy_u8LedName].LED_StrU8PinCFg ,DIO_enuLogicHigh);
 810:	88 0f       	add	r24, r24
 812:	99 1f       	adc	r25, r25
 814:	88 0f       	add	r24, r24
 816:	99 1f       	adc	r25, r25
 818:	fc 01       	movw	r30, r24
 81a:	e2 52       	subi	r30, 0x22	; 34
 81c:	ff 4f       	sbci	r31, 0xFF	; 255
 81e:	61 81       	ldd	r22, Z+1	; 0x01
 820:	41 e0       	ldi	r20, 0x01	; 1
 822:	80 81       	ld	r24, Z
 824:	0e 94 68 02 	call	0x4d0	; 0x4d0 <DIO_enuSetPinLogic>
				   break ;
 828:	37 c0       	rjmp	.+110    	; 0x898 <__stack+0x39>
	        case(ACTIVE_LOW):
			      Loc_enuDioEror=DIO_enuSetPinLogic(LEDS_Arr[Copy_u8LedName].LED_StrU8PortCfg ,LEDS_Arr[Copy_u8LedName].LED_StrU8PinCFg ,DIO_enuLogicLow);
 82a:	88 0f       	add	r24, r24
 82c:	99 1f       	adc	r25, r25
 82e:	88 0f       	add	r24, r24
 830:	99 1f       	adc	r25, r25
 832:	fc 01       	movw	r30, r24
 834:	e2 52       	subi	r30, 0x22	; 34
 836:	ff 4f       	sbci	r31, 0xFF	; 255
 838:	61 81       	ldd	r22, Z+1	; 0x01
 83a:	40 e0       	ldi	r20, 0x00	; 0
 83c:	80 81       	ld	r24, Z
 83e:	0e 94 68 02 	call	0x4d0	; 0x4d0 <DIO_enuSetPinLogic>
				   break ;
 842:	2a c0       	rjmp	.+84     	; 0x898 <__stack+0x39>
         }
     }
	else
	{
		switch (LEDS_Arr[Copy_u8LedName].LED_StrU8ActiveState)
 844:	90 e0       	ldi	r25, 0x00	; 0
 846:	fc 01       	movw	r30, r24
 848:	ee 0f       	add	r30, r30
 84a:	ff 1f       	adc	r31, r31
 84c:	ee 0f       	add	r30, r30
 84e:	ff 1f       	adc	r31, r31
 850:	e2 52       	subi	r30, 0x22	; 34
 852:	ff 4f       	sbci	r31, 0xFF	; 255
 854:	22 81       	ldd	r18, Z+2	; 0x02
 856:	22 23       	and	r18, r18
 858:	79 f0       	breq	.+30     	; 0x878 <__stack+0x19>
 85a:	21 30       	cpi	r18, 0x01	; 1
 85c:	e1 f4       	brne	.+56     	; 0x896 <__stack+0x37>
		{
			case (ACTIVE_HIGH):
			Loc_enuDioEror=DIO_enuSetPinLogic(LEDS_Arr[Copy_u8LedName].LED_StrU8PortCfg ,LEDS_Arr[Copy_u8LedName].LED_StrU8PinCFg ,DIO_enuLogicLow);
 85e:	88 0f       	add	r24, r24
 860:	99 1f       	adc	r25, r25
 862:	88 0f       	add	r24, r24
 864:	99 1f       	adc	r25, r25
 866:	fc 01       	movw	r30, r24
 868:	e2 52       	subi	r30, 0x22	; 34
 86a:	ff 4f       	sbci	r31, 0xFF	; 255
 86c:	61 81       	ldd	r22, Z+1	; 0x01
 86e:	40 e0       	ldi	r20, 0x00	; 0
 870:	80 81       	ld	r24, Z
 872:	0e 94 68 02 	call	0x4d0	; 0x4d0 <DIO_enuSetPinLogic>
			 break ;
 876:	10 c0       	rjmp	.+32     	; 0x898 <__stack+0x39>
			case(ACTIVE_LOW):
			Loc_enuDioEror=DIO_enuSetPinLogic(LEDS_Arr[Copy_u8LedName].LED_StrU8PortCfg ,LEDS_Arr[Copy_u8LedName].LED_StrU8PinCFg ,DIO_enuLogicHigh);
 878:	88 0f       	add	r24, r24
 87a:	99 1f       	adc	r25, r25
 87c:	88 0f       	add	r24, r24
 87e:	99 1f       	adc	r25, r25
 880:	fc 01       	movw	r30, r24
 882:	e2 52       	subi	r30, 0x22	; 34
 884:	ff 4f       	sbci	r31, 0xFF	; 255
 886:	61 81       	ldd	r22, Z+1	; 0x01
 888:	41 e0       	ldi	r20, 0x01	; 1
 88a:	80 81       	ld	r24, Z
 88c:	0e 94 68 02 	call	0x4d0	; 0x4d0 <DIO_enuSetPinLogic>
		     break ;
 890:	03 c0       	rjmp	.+6      	; 0x898 <__stack+0x39>
 }

LED_enuErorState LED_enuSetLedState (u8 Copy_u8LedName , u8 Copy_u8LedState)
{
	LED_enuErorState Loc_enuErorState = LED_enusucceeded ;
	DIO_enuErrorStatus_t Loc_enuDioEror = DIO_enuSucceded;
 892:	84 e0       	ldi	r24, 0x04	; 4
 894:	01 c0       	rjmp	.+2      	; 0x898 <__stack+0x39>
 896:	84 e0       	ldi	r24, 0x04	; 4
		
		
	} 
	
   
   if (Loc_enuDioEror != DIO_enuSucceded)
 898:	84 30       	cpi	r24, 0x04	; 4
 89a:	29 f4       	brne	.+10     	; 0x8a6 <__stack+0x47>
 89c:	08 95       	ret
	LED_enuErorState Loc_enuErorState = LED_enusucceeded ;
	DIO_enuErrorStatus_t Loc_enuDioEror = DIO_enuSucceded;
   if (Copy_u8LedName > NUM_OF_LEDS)
   {
	   
	Loc_enuErorState = LED_enuInvalidName ;
 89e:	87 e0       	ldi	r24, 0x07	; 7
 8a0:	08 95       	ret
	
   }
   else if (Copy_u8LedState != LED_ON_STATE  && Copy_u8LedState != LED_OFF_STATE )
   {
	  
	  Loc_enuErorState = LED_enuInvalidLogicState ;
 8a2:	83 e0       	ldi	r24, 0x03	; 3
 8a4:	08 95       	ret
	
   
   if (Loc_enuDioEror != DIO_enuSucceded)
   {
	   
	   Loc_enuErorState = LED_enuDioNOK ;
 8a6:	86 e0       	ldi	r24, 0x06	; 6
   }
   
	
 }
return Loc_enuErorState ;
}
 8a8:	08 95       	ret

000008aa <main>:
#include "7Segments.h"
#include "SWITCH.h"


int main(void)
{
 8aa:	cf 93       	push	r28
 8ac:	df 93       	push	r29
 8ae:	00 d0       	rcall	.+0      	; 0x8b0 <main+0x6>
 8b0:	1f 92       	push	r1
 8b2:	cd b7       	in	r28, 0x3d	; 61
 8b4:	de b7       	in	r29, 0x3e	; 62
	LED_Init();
 8b6:	0e 94 49 03 	call	0x692	; 0x692 <LED_Init>
	SWITCH_Init();
 8ba:	0e 94 89 06 	call	0xd12	; 0xd12 <SWITCH_Init>
	Se7enSeg_Init();
 8be:	0e 94 41 00 	call	0x82	; 0x82 <Se7enSeg_Init>

	u8 Loc_u8Switch0State = 0;
 8c2:	19 82       	std	Y+1, r1	; 0x01
	u8 Loc_u8Switch1State = 0;
 8c4:	1a 82       	std	Y+2, r1	; 0x02
	u8 Loc_u8Switch2State = 0;
 8c6:	1b 82       	std	Y+3, r1	; 0x03

	u8 Loc_u8Counter = 0;
 8c8:	10 e0       	ldi	r17, 0x00	; 0
	while (1)
	{
		SWITCH_enuGetSwitchState(SWITCH_NO_ZERO , &Loc_u8Switch0State);
 8ca:	be 01       	movw	r22, r28
 8cc:	6f 5f       	subi	r22, 0xFF	; 255
 8ce:	7f 4f       	sbci	r23, 0xFF	; 255
 8d0:	80 e0       	ldi	r24, 0x00	; 0
 8d2:	0e 94 0c 07 	call	0xe18	; 0xe18 <SWITCH_enuGetSwitchState>
		SWITCH_enuGetSwitchState(SWITCH_NO_ONE , &Loc_u8Switch1State);
 8d6:	be 01       	movw	r22, r28
 8d8:	6e 5f       	subi	r22, 0xFE	; 254
 8da:	7f 4f       	sbci	r23, 0xFF	; 255
 8dc:	81 e0       	ldi	r24, 0x01	; 1
 8de:	0e 94 0c 07 	call	0xe18	; 0xe18 <SWITCH_enuGetSwitchState>
		SWITCH_enuGetSwitchState(SWITCH_NO_TWO , &Loc_u8Switch2State);
 8e2:	be 01       	movw	r22, r28
 8e4:	6d 5f       	subi	r22, 0xFD	; 253
 8e6:	7f 4f       	sbci	r23, 0xFF	; 255
 8e8:	82 e0       	ldi	r24, 0x02	; 2
 8ea:	0e 94 0c 07 	call	0xe18	; 0xe18 <SWITCH_enuGetSwitchState>

		if (Loc_u8Switch0State == SWITCH_PRESSED)
 8ee:	89 81       	ldd	r24, Y+1	; 0x01
 8f0:	81 30       	cpi	r24, 0x01	; 1
 8f2:	a1 f4       	brne	.+40     	; 0x91c <main+0x72>
		{
			LED_enuSetLedState(LED_NO_ZERO, LED_OFF_STATE);
 8f4:	60 e0       	ldi	r22, 0x00	; 0
 8f6:	80 e0       	ldi	r24, 0x00	; 0
 8f8:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LED_enuSetLedState>
			if (Loc_u8Counter < 99)
 8fc:	13 36       	cpi	r17, 0x63	; 99
 8fe:	08 f4       	brcc	.+2      	; 0x902 <main+0x58>
			{
				Loc_u8Counter++;
 900:	1f 5f       	subi	r17, 0xFF	; 255
			}
			Se7enSeg_SetValueALL(Loc_u8Counter);
 902:	81 2f       	mov	r24, r17
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	0e 94 0d 02 	call	0x41a	; 0x41a <Se7enSeg_SetValueALL>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 90a:	2f e9       	ldi	r18, 0x9F	; 159
 90c:	86 e8       	ldi	r24, 0x86	; 134
 90e:	91 e0       	ldi	r25, 0x01	; 1
 910:	21 50       	subi	r18, 0x01	; 1
 912:	80 40       	sbci	r24, 0x00	; 0
 914:	90 40       	sbci	r25, 0x00	; 0
 916:	e1 f7       	brne	.-8      	; 0x910 <main+0x66>
 918:	00 c0       	rjmp	.+0      	; 0x91a <main+0x70>
 91a:	00 00       	nop
			_delay_ms(500);  // Delay for 500 milliseconds
		}

		if (Loc_u8Switch1State == SWITCH_PRESSED)
 91c:	8a 81       	ldd	r24, Y+2	; 0x02
 91e:	81 30       	cpi	r24, 0x01	; 1
 920:	79 f4       	brne	.+30     	; 0x940 <main+0x96>
		{
			if (Loc_u8Counter > 0)
 922:	11 11       	cpse	r17, r1
			{
				Loc_u8Counter--;
 924:	11 50       	subi	r17, 0x01	; 1
			}
			
			Se7enSeg_SetValueALL(Loc_u8Counter);
 926:	81 2f       	mov	r24, r17
 928:	90 e0       	ldi	r25, 0x00	; 0
 92a:	0e 94 0d 02 	call	0x41a	; 0x41a <Se7enSeg_SetValueALL>
 92e:	2f e9       	ldi	r18, 0x9F	; 159
 930:	86 e8       	ldi	r24, 0x86	; 134
 932:	91 e0       	ldi	r25, 0x01	; 1
 934:	21 50       	subi	r18, 0x01	; 1
 936:	80 40       	sbci	r24, 0x00	; 0
 938:	90 40       	sbci	r25, 0x00	; 0
 93a:	e1 f7       	brne	.-8      	; 0x934 <main+0x8a>
 93c:	00 c0       	rjmp	.+0      	; 0x93e <main+0x94>
 93e:	00 00       	nop
			_delay_ms(500);  // Delay for 500 milliseconds
		}

		if (Loc_u8Switch2State == SWITCH_PRESSED)
 940:	8b 81       	ldd	r24, Y+3	; 0x03
 942:	81 30       	cpi	r24, 0x01	; 1
 944:	11 f6       	brne	.-124    	; 0x8ca <main+0x20>
 946:	11 c0       	rjmp	.+34     	; 0x96a <main+0xc0>
		{
			for(u8 i = Loc_u8Counter; i != 0; i--)
			{
				if (Loc_u8Counter > 0)
 948:	11 11       	cpse	r17, r1
				{
					--Loc_u8Counter;
 94a:	11 50       	subi	r17, 0x01	; 1
				}
				Se7enSeg_SetValueALL(Loc_u8Counter);
 94c:	81 2f       	mov	r24, r17
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	0e 94 0d 02 	call	0x41a	; 0x41a <Se7enSeg_SetValueALL>
 954:	2f e9       	ldi	r18, 0x9F	; 159
 956:	86 e8       	ldi	r24, 0x86	; 134
 958:	91 e0       	ldi	r25, 0x01	; 1
 95a:	21 50       	subi	r18, 0x01	; 1
 95c:	80 40       	sbci	r24, 0x00	; 0
 95e:	90 40       	sbci	r25, 0x00	; 0
 960:	e1 f7       	brne	.-8      	; 0x95a <main+0xb0>
 962:	00 c0       	rjmp	.+0      	; 0x964 <main+0xba>
 964:	00 00       	nop
			_delay_ms(500);  // Delay for 500 milliseconds
		}

		if (Loc_u8Switch2State == SWITCH_PRESSED)
		{
			for(u8 i = Loc_u8Counter; i != 0; i--)
 966:	01 50       	subi	r16, 0x01	; 1
 968:	01 c0       	rjmp	.+2      	; 0x96c <main+0xc2>
 96a:	01 2f       	mov	r16, r17
 96c:	01 11       	cpse	r16, r1
 96e:	ec cf       	rjmp	.-40     	; 0x948 <main+0x9e>
				}
				Se7enSeg_SetValueALL(Loc_u8Counter);
				_delay_ms(500);  // Delay for 500 milliseconds
			}
			// Turn on the LED after the countdown ends
			LED_enuSetLedState(LED_NO_ZERO, LED_ON_STATE);
 970:	61 e0       	ldi	r22, 0x01	; 1
 972:	80 e0       	ldi	r24, 0x00	; 0
 974:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <LED_enuSetLedState>
 978:	a8 cf       	rjmp	.-176    	; 0x8ca <main+0x20>

0000097a <PORT_enuSetPinConfiguration>:
				
			}
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
 97a:	fc 01       	movw	r30, r24
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
	 
	 if (Add_StrPortCfg->PORT_StrU8PortNum > NUM_OF_PORTS || Add_StrPortCfg->PORT_StrU8PortNum < PORT_enuPortA  )
 97c:	80 81       	ld	r24, Z
 97e:	85 30       	cpi	r24, 0x05	; 5
 980:	08 f0       	brcs	.+2      	; 0x984 <PORT_enuSetPinConfiguration+0xa>
 982:	b7 c1       	rjmp	.+878    	; 0xcf2 <PORT_enuSetPinConfiguration+0x378>
	 {
		 Loc_enuErorState= PORT_enuInvalidPortNumber;
	 }
	 else if (Add_StrPortCfg->PORT_StrU8PinNum > PORT_enuPin7 || Add_StrPortCfg->PORT_StrU8PinNum < PORT_enuPin0)
 984:	91 81       	ldd	r25, Z+1	; 0x01
 986:	98 30       	cpi	r25, 0x08	; 8
 988:	08 f0       	brcs	.+2      	; 0x98c <PORT_enuSetPinConfiguration+0x12>
 98a:	b5 c1       	rjmp	.+874    	; 0xcf6 <PORT_enuSetPinConfiguration+0x37c>
	 {
		 Loc_enuErorState=  PORT_enuInvalidPinNumber;
	 }
	 else if  (Add_StrPortCfg->PORT_StrU8PinCfg > PORT_enuOutput_High || Add_StrPortCfg->PORT_StrU8PinCfg < PORT_enuInputInternalPullUP)
 98c:	22 81       	ldd	r18, Z+2	; 0x02
 98e:	24 30       	cpi	r18, 0x04	; 4
 990:	08 f0       	brcs	.+2      	; 0x994 <PORT_enuSetPinConfiguration+0x1a>
 992:	b3 c1       	rjmp	.+870    	; 0xcfa <PORT_enuSetPinConfiguration+0x380>
	 }
	 
	 else
	 {
		 
		 switch(Add_StrPortCfg->PORT_StrU8PortNum)
 994:	81 30       	cpi	r24, 0x01	; 1
 996:	09 f4       	brne	.+2      	; 0x99a <PORT_enuSetPinConfiguration+0x20>
 998:	71 c0       	rjmp	.+226    	; 0xa7c <PORT_enuSetPinConfiguration+0x102>
 99a:	38 f0       	brcs	.+14     	; 0x9aa <PORT_enuSetPinConfiguration+0x30>
 99c:	82 30       	cpi	r24, 0x02	; 2
 99e:	09 f4       	brne	.+2      	; 0x9a2 <PORT_enuSetPinConfiguration+0x28>
 9a0:	d6 c0       	rjmp	.+428    	; 0xb4e <PORT_enuSetPinConfiguration+0x1d4>
 9a2:	83 30       	cpi	r24, 0x03	; 3
 9a4:	09 f4       	brne	.+2      	; 0x9a8 <PORT_enuSetPinConfiguration+0x2e>
 9a6:	3c c1       	rjmp	.+632    	; 0xc20 <PORT_enuSetPinConfiguration+0x2a6>
 9a8:	aa c1       	rjmp	.+852    	; 0xcfe <PORT_enuSetPinConfiguration+0x384>
		 {
			 case PORT_enuPortA :
			 
			 switch(Add_StrPortCfg->PORT_StrU8PinCfg)
 9aa:	21 30       	cpi	r18, 0x01	; 1
 9ac:	09 f4       	brne	.+2      	; 0x9b0 <PORT_enuSetPinConfiguration+0x36>
 9ae:	4d c0       	rjmp	.+154    	; 0xa4a <PORT_enuSetPinConfiguration+0xd0>
 9b0:	a0 f1       	brcs	.+104    	; 0xa1a <PORT_enuSetPinConfiguration+0xa0>
 9b2:	22 30       	cpi	r18, 0x02	; 2
 9b4:	19 f0       	breq	.+6      	; 0x9bc <PORT_enuSetPinConfiguration+0x42>
 9b6:	23 30       	cpi	r18, 0x03	; 3
 9b8:	c9 f0       	breq	.+50     	; 0x9ec <PORT_enuSetPinConfiguration+0x72>
 9ba:	a3 c1       	rjmp	.+838    	; 0xd02 <PORT_enuSetPinConfiguration+0x388>
			 {
				 
				 case PORT_enuOutput_Low:
				 SET_BIT(DDRA,Add_StrPortCfg->PORT_StrU8PinNum);
 9bc:	4a b3       	in	r20, 0x1a	; 26
 9be:	21 e0       	ldi	r18, 0x01	; 1
 9c0:	30 e0       	ldi	r19, 0x00	; 0
 9c2:	b9 01       	movw	r22, r18
 9c4:	02 c0       	rjmp	.+4      	; 0x9ca <PORT_enuSetPinConfiguration+0x50>
 9c6:	66 0f       	add	r22, r22
 9c8:	77 1f       	adc	r23, r23
 9ca:	9a 95       	dec	r25
 9cc:	e2 f7       	brpl	.-8      	; 0x9c6 <PORT_enuSetPinConfiguration+0x4c>
 9ce:	cb 01       	movw	r24, r22
 9d0:	84 2b       	or	r24, r20
 9d2:	8a bb       	out	0x1a, r24	; 26
				 CLR_BIT(PORTA,Add_StrPortCfg->PORT_StrU8PinNum);
 9d4:	8b b3       	in	r24, 0x1b	; 27
 9d6:	01 80       	ldd	r0, Z+1	; 0x01
 9d8:	02 c0       	rjmp	.+4      	; 0x9de <PORT_enuSetPinConfiguration+0x64>
 9da:	22 0f       	add	r18, r18
 9dc:	33 1f       	adc	r19, r19
 9de:	0a 94       	dec	r0
 9e0:	e2 f7       	brpl	.-8      	; 0x9da <PORT_enuSetPinConfiguration+0x60>
 9e2:	20 95       	com	r18
 9e4:	28 23       	and	r18, r24
 9e6:	2b bb       	out	0x1b, r18	; 27
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 9e8:	84 e0       	ldi	r24, 0x04	; 4
				 
				 case PORT_enuOutput_Low:
				 SET_BIT(DDRA,Add_StrPortCfg->PORT_StrU8PinNum);
				 CLR_BIT(PORTA,Add_StrPortCfg->PORT_StrU8PinNum);
				 
				 break;
 9ea:	08 95       	ret
				 case PORT_enuOutput_High:
				 SET_BIT(DDRA,Add_StrPortCfg->PORT_StrU8PinNum);
 9ec:	4a b3       	in	r20, 0x1a	; 26
 9ee:	21 e0       	ldi	r18, 0x01	; 1
 9f0:	30 e0       	ldi	r19, 0x00	; 0
 9f2:	b9 01       	movw	r22, r18
 9f4:	02 c0       	rjmp	.+4      	; 0x9fa <PORT_enuSetPinConfiguration+0x80>
 9f6:	66 0f       	add	r22, r22
 9f8:	77 1f       	adc	r23, r23
 9fa:	9a 95       	dec	r25
 9fc:	e2 f7       	brpl	.-8      	; 0x9f6 <PORT_enuSetPinConfiguration+0x7c>
 9fe:	cb 01       	movw	r24, r22
 a00:	84 2b       	or	r24, r20
 a02:	8a bb       	out	0x1a, r24	; 26
				 SET_BIT(PORTA,Add_StrPortCfg->PORT_StrU8PinNum);
 a04:	8b b3       	in	r24, 0x1b	; 27
 a06:	01 80       	ldd	r0, Z+1	; 0x01
 a08:	02 c0       	rjmp	.+4      	; 0xa0e <PORT_enuSetPinConfiguration+0x94>
 a0a:	22 0f       	add	r18, r18
 a0c:	33 1f       	adc	r19, r19
 a0e:	0a 94       	dec	r0
 a10:	e2 f7       	brpl	.-8      	; 0xa0a <PORT_enuSetPinConfiguration+0x90>
 a12:	28 2b       	or	r18, r24
 a14:	2b bb       	out	0x1b, r18	; 27
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 a16:	84 e0       	ldi	r24, 0x04	; 4
				 break;
				 case PORT_enuOutput_High:
				 SET_BIT(DDRA,Add_StrPortCfg->PORT_StrU8PinNum);
				 SET_BIT(PORTA,Add_StrPortCfg->PORT_StrU8PinNum);
				 
				 break;
 a18:	08 95       	ret
				 case PORT_enuInputInternalPullUP:
				 CLR_BIT(DDRA,Add_StrPortCfg->PORT_StrU8PinNum);
 a1a:	4a b3       	in	r20, 0x1a	; 26
 a1c:	21 e0       	ldi	r18, 0x01	; 1
 a1e:	30 e0       	ldi	r19, 0x00	; 0
 a20:	b9 01       	movw	r22, r18
 a22:	02 c0       	rjmp	.+4      	; 0xa28 <PORT_enuSetPinConfiguration+0xae>
 a24:	66 0f       	add	r22, r22
 a26:	77 1f       	adc	r23, r23
 a28:	9a 95       	dec	r25
 a2a:	e2 f7       	brpl	.-8      	; 0xa24 <PORT_enuSetPinConfiguration+0xaa>
 a2c:	cb 01       	movw	r24, r22
 a2e:	80 95       	com	r24
 a30:	84 23       	and	r24, r20
 a32:	8a bb       	out	0x1a, r24	; 26
				 SET_BIT(PORTA,Add_StrPortCfg->PORT_StrU8PinNum);
 a34:	8b b3       	in	r24, 0x1b	; 27
 a36:	01 80       	ldd	r0, Z+1	; 0x01
 a38:	02 c0       	rjmp	.+4      	; 0xa3e <PORT_enuSetPinConfiguration+0xc4>
 a3a:	22 0f       	add	r18, r18
 a3c:	33 1f       	adc	r19, r19
 a3e:	0a 94       	dec	r0
 a40:	e2 f7       	brpl	.-8      	; 0xa3a <PORT_enuSetPinConfiguration+0xc0>
 a42:	28 2b       	or	r18, r24
 a44:	2b bb       	out	0x1b, r18	; 27
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 a46:	84 e0       	ldi	r24, 0x04	; 4
				 
				 break;
				 case PORT_enuInputInternalPullUP:
				 CLR_BIT(DDRA,Add_StrPortCfg->PORT_StrU8PinNum);
				 SET_BIT(PORTA,Add_StrPortCfg->PORT_StrU8PinNum);
				 break;
 a48:	08 95       	ret
				 case PORT_enuInputExternalPullDown:
				 CLR_BIT(DDRA,Add_StrPortCfg->PORT_StrU8PinNum);
 a4a:	4a b3       	in	r20, 0x1a	; 26
 a4c:	21 e0       	ldi	r18, 0x01	; 1
 a4e:	30 e0       	ldi	r19, 0x00	; 0
 a50:	b9 01       	movw	r22, r18
 a52:	02 c0       	rjmp	.+4      	; 0xa58 <PORT_enuSetPinConfiguration+0xde>
 a54:	66 0f       	add	r22, r22
 a56:	77 1f       	adc	r23, r23
 a58:	9a 95       	dec	r25
 a5a:	e2 f7       	brpl	.-8      	; 0xa54 <PORT_enuSetPinConfiguration+0xda>
 a5c:	cb 01       	movw	r24, r22
 a5e:	80 95       	com	r24
 a60:	84 23       	and	r24, r20
 a62:	8a bb       	out	0x1a, r24	; 26
				 CLR_BIT(PORTA,Add_StrPortCfg->PORT_StrU8PinNum);
 a64:	8b b3       	in	r24, 0x1b	; 27
 a66:	01 80       	ldd	r0, Z+1	; 0x01
 a68:	02 c0       	rjmp	.+4      	; 0xa6e <PORT_enuSetPinConfiguration+0xf4>
 a6a:	22 0f       	add	r18, r18
 a6c:	33 1f       	adc	r19, r19
 a6e:	0a 94       	dec	r0
 a70:	e2 f7       	brpl	.-8      	; 0xa6a <PORT_enuSetPinConfiguration+0xf0>
 a72:	20 95       	com	r18
 a74:	28 23       	and	r18, r24
 a76:	2b bb       	out	0x1b, r18	; 27
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 a78:	84 e0       	ldi	r24, 0x04	; 4
				 SET_BIT(PORTA,Add_StrPortCfg->PORT_StrU8PinNum);
				 break;
				 case PORT_enuInputExternalPullDown:
				 CLR_BIT(DDRA,Add_StrPortCfg->PORT_StrU8PinNum);
				 CLR_BIT(PORTA,Add_StrPortCfg->PORT_StrU8PinNum);
				 break;
 a7a:	08 95       	ret
			 }
			 break;
			 
			 case PORT_enuPortB :
			 
			 switch(Add_StrPortCfg->PORT_StrU8PinCfg)
 a7c:	21 30       	cpi	r18, 0x01	; 1
 a7e:	09 f4       	brne	.+2      	; 0xa82 <PORT_enuSetPinConfiguration+0x108>
 a80:	4d c0       	rjmp	.+154    	; 0xb1c <PORT_enuSetPinConfiguration+0x1a2>
 a82:	a0 f1       	brcs	.+104    	; 0xaec <PORT_enuSetPinConfiguration+0x172>
 a84:	22 30       	cpi	r18, 0x02	; 2
 a86:	19 f0       	breq	.+6      	; 0xa8e <PORT_enuSetPinConfiguration+0x114>
 a88:	23 30       	cpi	r18, 0x03	; 3
 a8a:	c9 f0       	breq	.+50     	; 0xabe <PORT_enuSetPinConfiguration+0x144>
 a8c:	3c c1       	rjmp	.+632    	; 0xd06 <PORT_enuSetPinConfiguration+0x38c>
			 {
				 
				 case PORT_enuOutput_Low:
				 SET_BIT(DDRB,Add_StrPortCfg->PORT_StrU8PinNum);
 a8e:	47 b3       	in	r20, 0x17	; 23
 a90:	21 e0       	ldi	r18, 0x01	; 1
 a92:	30 e0       	ldi	r19, 0x00	; 0
 a94:	b9 01       	movw	r22, r18
 a96:	02 c0       	rjmp	.+4      	; 0xa9c <PORT_enuSetPinConfiguration+0x122>
 a98:	66 0f       	add	r22, r22
 a9a:	77 1f       	adc	r23, r23
 a9c:	9a 95       	dec	r25
 a9e:	e2 f7       	brpl	.-8      	; 0xa98 <PORT_enuSetPinConfiguration+0x11e>
 aa0:	cb 01       	movw	r24, r22
 aa2:	84 2b       	or	r24, r20
 aa4:	87 bb       	out	0x17, r24	; 23
				 CLR_BIT(PORTB,Add_StrPortCfg->PORT_StrU8PinNum);
 aa6:	88 b3       	in	r24, 0x18	; 24
 aa8:	01 80       	ldd	r0, Z+1	; 0x01
 aaa:	02 c0       	rjmp	.+4      	; 0xab0 <PORT_enuSetPinConfiguration+0x136>
 aac:	22 0f       	add	r18, r18
 aae:	33 1f       	adc	r19, r19
 ab0:	0a 94       	dec	r0
 ab2:	e2 f7       	brpl	.-8      	; 0xaac <PORT_enuSetPinConfiguration+0x132>
 ab4:	20 95       	com	r18
 ab6:	28 23       	and	r18, r24
 ab8:	28 bb       	out	0x18, r18	; 24
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 aba:	84 e0       	ldi	r24, 0x04	; 4
				 
				 case PORT_enuOutput_Low:
				 SET_BIT(DDRB,Add_StrPortCfg->PORT_StrU8PinNum);
				 CLR_BIT(PORTB,Add_StrPortCfg->PORT_StrU8PinNum);
				 
				 break;
 abc:	08 95       	ret
				 case PORT_enuOutput_High:
				 SET_BIT(DDRB,Add_StrPortCfg->PORT_StrU8PinNum);
 abe:	47 b3       	in	r20, 0x17	; 23
 ac0:	21 e0       	ldi	r18, 0x01	; 1
 ac2:	30 e0       	ldi	r19, 0x00	; 0
 ac4:	b9 01       	movw	r22, r18
 ac6:	02 c0       	rjmp	.+4      	; 0xacc <PORT_enuSetPinConfiguration+0x152>
 ac8:	66 0f       	add	r22, r22
 aca:	77 1f       	adc	r23, r23
 acc:	9a 95       	dec	r25
 ace:	e2 f7       	brpl	.-8      	; 0xac8 <PORT_enuSetPinConfiguration+0x14e>
 ad0:	cb 01       	movw	r24, r22
 ad2:	84 2b       	or	r24, r20
 ad4:	87 bb       	out	0x17, r24	; 23
				 SET_BIT(PORTB,Add_StrPortCfg->PORT_StrU8PinNum);
 ad6:	88 b3       	in	r24, 0x18	; 24
 ad8:	01 80       	ldd	r0, Z+1	; 0x01
 ada:	02 c0       	rjmp	.+4      	; 0xae0 <PORT_enuSetPinConfiguration+0x166>
 adc:	22 0f       	add	r18, r18
 ade:	33 1f       	adc	r19, r19
 ae0:	0a 94       	dec	r0
 ae2:	e2 f7       	brpl	.-8      	; 0xadc <PORT_enuSetPinConfiguration+0x162>
 ae4:	28 2b       	or	r18, r24
 ae6:	28 bb       	out	0x18, r18	; 24
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 ae8:	84 e0       	ldi	r24, 0x04	; 4
				 break;
				 case PORT_enuOutput_High:
				 SET_BIT(DDRB,Add_StrPortCfg->PORT_StrU8PinNum);
				 SET_BIT(PORTB,Add_StrPortCfg->PORT_StrU8PinNum);
				 
				 break;
 aea:	08 95       	ret
				 case PORT_enuInputInternalPullUP:
				 CLR_BIT(DDRB,Add_StrPortCfg->PORT_StrU8PinNum);
 aec:	47 b3       	in	r20, 0x17	; 23
 aee:	21 e0       	ldi	r18, 0x01	; 1
 af0:	30 e0       	ldi	r19, 0x00	; 0
 af2:	b9 01       	movw	r22, r18
 af4:	02 c0       	rjmp	.+4      	; 0xafa <PORT_enuSetPinConfiguration+0x180>
 af6:	66 0f       	add	r22, r22
 af8:	77 1f       	adc	r23, r23
 afa:	9a 95       	dec	r25
 afc:	e2 f7       	brpl	.-8      	; 0xaf6 <PORT_enuSetPinConfiguration+0x17c>
 afe:	cb 01       	movw	r24, r22
 b00:	80 95       	com	r24
 b02:	84 23       	and	r24, r20
 b04:	87 bb       	out	0x17, r24	; 23
				 SET_BIT(PORTB,Add_StrPortCfg->PORT_StrU8PinNum);
 b06:	88 b3       	in	r24, 0x18	; 24
 b08:	01 80       	ldd	r0, Z+1	; 0x01
 b0a:	02 c0       	rjmp	.+4      	; 0xb10 <PORT_enuSetPinConfiguration+0x196>
 b0c:	22 0f       	add	r18, r18
 b0e:	33 1f       	adc	r19, r19
 b10:	0a 94       	dec	r0
 b12:	e2 f7       	brpl	.-8      	; 0xb0c <PORT_enuSetPinConfiguration+0x192>
 b14:	28 2b       	or	r18, r24
 b16:	28 bb       	out	0x18, r18	; 24
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 b18:	84 e0       	ldi	r24, 0x04	; 4
				 
				 break;
				 case PORT_enuInputInternalPullUP:
				 CLR_BIT(DDRB,Add_StrPortCfg->PORT_StrU8PinNum);
				 SET_BIT(PORTB,Add_StrPortCfg->PORT_StrU8PinNum);
				 break;
 b1a:	08 95       	ret
				 case PORT_enuInputExternalPullDown:
				 CLR_BIT(DDRB,Add_StrPortCfg->PORT_StrU8PinNum);
 b1c:	47 b3       	in	r20, 0x17	; 23
 b1e:	21 e0       	ldi	r18, 0x01	; 1
 b20:	30 e0       	ldi	r19, 0x00	; 0
 b22:	b9 01       	movw	r22, r18
 b24:	02 c0       	rjmp	.+4      	; 0xb2a <PORT_enuSetPinConfiguration+0x1b0>
 b26:	66 0f       	add	r22, r22
 b28:	77 1f       	adc	r23, r23
 b2a:	9a 95       	dec	r25
 b2c:	e2 f7       	brpl	.-8      	; 0xb26 <PORT_enuSetPinConfiguration+0x1ac>
 b2e:	cb 01       	movw	r24, r22
 b30:	80 95       	com	r24
 b32:	84 23       	and	r24, r20
 b34:	87 bb       	out	0x17, r24	; 23
				 CLR_BIT(PORTB,Add_StrPortCfg->PORT_StrU8PinNum);
 b36:	88 b3       	in	r24, 0x18	; 24
 b38:	01 80       	ldd	r0, Z+1	; 0x01
 b3a:	02 c0       	rjmp	.+4      	; 0xb40 <PORT_enuSetPinConfiguration+0x1c6>
 b3c:	22 0f       	add	r18, r18
 b3e:	33 1f       	adc	r19, r19
 b40:	0a 94       	dec	r0
 b42:	e2 f7       	brpl	.-8      	; 0xb3c <PORT_enuSetPinConfiguration+0x1c2>
 b44:	20 95       	com	r18
 b46:	28 23       	and	r18, r24
 b48:	28 bb       	out	0x18, r18	; 24
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 b4a:	84 e0       	ldi	r24, 0x04	; 4
				 SET_BIT(PORTB,Add_StrPortCfg->PORT_StrU8PinNum);
				 break;
				 case PORT_enuInputExternalPullDown:
				 CLR_BIT(DDRB,Add_StrPortCfg->PORT_StrU8PinNum);
				 CLR_BIT(PORTB,Add_StrPortCfg->PORT_StrU8PinNum);
				 break;
 b4c:	08 95       	ret
				 
			 }
			 break;
			 
			 case PORT_enuPortC :
			 switch(Add_StrPortCfg->PORT_StrU8PinCfg)
 b4e:	21 30       	cpi	r18, 0x01	; 1
 b50:	09 f4       	brne	.+2      	; 0xb54 <PORT_enuSetPinConfiguration+0x1da>
 b52:	4d c0       	rjmp	.+154    	; 0xbee <PORT_enuSetPinConfiguration+0x274>
 b54:	a0 f1       	brcs	.+104    	; 0xbbe <PORT_enuSetPinConfiguration+0x244>
 b56:	22 30       	cpi	r18, 0x02	; 2
 b58:	19 f0       	breq	.+6      	; 0xb60 <PORT_enuSetPinConfiguration+0x1e6>
 b5a:	23 30       	cpi	r18, 0x03	; 3
 b5c:	c9 f0       	breq	.+50     	; 0xb90 <PORT_enuSetPinConfiguration+0x216>
 b5e:	d5 c0       	rjmp	.+426    	; 0xd0a <PORT_enuSetPinConfiguration+0x390>
			 {
				 
				 case PORT_enuOutput_Low:
				 SET_BIT(DDRC,Add_StrPortCfg->PORT_StrU8PinNum);
 b60:	44 b3       	in	r20, 0x14	; 20
 b62:	21 e0       	ldi	r18, 0x01	; 1
 b64:	30 e0       	ldi	r19, 0x00	; 0
 b66:	b9 01       	movw	r22, r18
 b68:	02 c0       	rjmp	.+4      	; 0xb6e <PORT_enuSetPinConfiguration+0x1f4>
 b6a:	66 0f       	add	r22, r22
 b6c:	77 1f       	adc	r23, r23
 b6e:	9a 95       	dec	r25
 b70:	e2 f7       	brpl	.-8      	; 0xb6a <PORT_enuSetPinConfiguration+0x1f0>
 b72:	cb 01       	movw	r24, r22
 b74:	84 2b       	or	r24, r20
 b76:	84 bb       	out	0x14, r24	; 20
				 CLR_BIT(PORTC,Add_StrPortCfg->PORT_StrU8PinNum);
 b78:	85 b3       	in	r24, 0x15	; 21
 b7a:	01 80       	ldd	r0, Z+1	; 0x01
 b7c:	02 c0       	rjmp	.+4      	; 0xb82 <PORT_enuSetPinConfiguration+0x208>
 b7e:	22 0f       	add	r18, r18
 b80:	33 1f       	adc	r19, r19
 b82:	0a 94       	dec	r0
 b84:	e2 f7       	brpl	.-8      	; 0xb7e <PORT_enuSetPinConfiguration+0x204>
 b86:	20 95       	com	r18
 b88:	28 23       	and	r18, r24
 b8a:	25 bb       	out	0x15, r18	; 21
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 b8c:	84 e0       	ldi	r24, 0x04	; 4
				 
				 case PORT_enuOutput_Low:
				 SET_BIT(DDRC,Add_StrPortCfg->PORT_StrU8PinNum);
				 CLR_BIT(PORTC,Add_StrPortCfg->PORT_StrU8PinNum);
				 
				 break;
 b8e:	08 95       	ret
				 case PORT_enuOutput_High:
				 SET_BIT(DDRC,Add_StrPortCfg->PORT_StrU8PinNum);
 b90:	44 b3       	in	r20, 0x14	; 20
 b92:	21 e0       	ldi	r18, 0x01	; 1
 b94:	30 e0       	ldi	r19, 0x00	; 0
 b96:	b9 01       	movw	r22, r18
 b98:	02 c0       	rjmp	.+4      	; 0xb9e <PORT_enuSetPinConfiguration+0x224>
 b9a:	66 0f       	add	r22, r22
 b9c:	77 1f       	adc	r23, r23
 b9e:	9a 95       	dec	r25
 ba0:	e2 f7       	brpl	.-8      	; 0xb9a <PORT_enuSetPinConfiguration+0x220>
 ba2:	cb 01       	movw	r24, r22
 ba4:	84 2b       	or	r24, r20
 ba6:	84 bb       	out	0x14, r24	; 20
				 SET_BIT(PORTC,Add_StrPortCfg->PORT_StrU8PinNum);
 ba8:	85 b3       	in	r24, 0x15	; 21
 baa:	01 80       	ldd	r0, Z+1	; 0x01
 bac:	02 c0       	rjmp	.+4      	; 0xbb2 <PORT_enuSetPinConfiguration+0x238>
 bae:	22 0f       	add	r18, r18
 bb0:	33 1f       	adc	r19, r19
 bb2:	0a 94       	dec	r0
 bb4:	e2 f7       	brpl	.-8      	; 0xbae <PORT_enuSetPinConfiguration+0x234>
 bb6:	28 2b       	or	r18, r24
 bb8:	25 bb       	out	0x15, r18	; 21
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 bba:	84 e0       	ldi	r24, 0x04	; 4
				 break;
				 case PORT_enuOutput_High:
				 SET_BIT(DDRC,Add_StrPortCfg->PORT_StrU8PinNum);
				 SET_BIT(PORTC,Add_StrPortCfg->PORT_StrU8PinNum);
				 
				 break;
 bbc:	08 95       	ret
				 case PORT_enuInputInternalPullUP:
				 CLR_BIT(DDRC,Add_StrPortCfg->PORT_StrU8PinNum);
 bbe:	44 b3       	in	r20, 0x14	; 20
 bc0:	21 e0       	ldi	r18, 0x01	; 1
 bc2:	30 e0       	ldi	r19, 0x00	; 0
 bc4:	b9 01       	movw	r22, r18
 bc6:	02 c0       	rjmp	.+4      	; 0xbcc <PORT_enuSetPinConfiguration+0x252>
 bc8:	66 0f       	add	r22, r22
 bca:	77 1f       	adc	r23, r23
 bcc:	9a 95       	dec	r25
 bce:	e2 f7       	brpl	.-8      	; 0xbc8 <PORT_enuSetPinConfiguration+0x24e>
 bd0:	cb 01       	movw	r24, r22
 bd2:	80 95       	com	r24
 bd4:	84 23       	and	r24, r20
 bd6:	84 bb       	out	0x14, r24	; 20
				 SET_BIT(PORTC,Add_StrPortCfg->PORT_StrU8PinNum);
 bd8:	85 b3       	in	r24, 0x15	; 21
 bda:	01 80       	ldd	r0, Z+1	; 0x01
 bdc:	02 c0       	rjmp	.+4      	; 0xbe2 <PORT_enuSetPinConfiguration+0x268>
 bde:	22 0f       	add	r18, r18
 be0:	33 1f       	adc	r19, r19
 be2:	0a 94       	dec	r0
 be4:	e2 f7       	brpl	.-8      	; 0xbde <PORT_enuSetPinConfiguration+0x264>
 be6:	28 2b       	or	r18, r24
 be8:	25 bb       	out	0x15, r18	; 21
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 bea:	84 e0       	ldi	r24, 0x04	; 4
				 
				 break;
				 case PORT_enuInputInternalPullUP:
				 CLR_BIT(DDRC,Add_StrPortCfg->PORT_StrU8PinNum);
				 SET_BIT(PORTC,Add_StrPortCfg->PORT_StrU8PinNum);
				 break;
 bec:	08 95       	ret
				 case PORT_enuInputExternalPullDown:
				 CLR_BIT(DDRC,Add_StrPortCfg->PORT_StrU8PinNum);
 bee:	44 b3       	in	r20, 0x14	; 20
 bf0:	21 e0       	ldi	r18, 0x01	; 1
 bf2:	30 e0       	ldi	r19, 0x00	; 0
 bf4:	b9 01       	movw	r22, r18
 bf6:	02 c0       	rjmp	.+4      	; 0xbfc <PORT_enuSetPinConfiguration+0x282>
 bf8:	66 0f       	add	r22, r22
 bfa:	77 1f       	adc	r23, r23
 bfc:	9a 95       	dec	r25
 bfe:	e2 f7       	brpl	.-8      	; 0xbf8 <PORT_enuSetPinConfiguration+0x27e>
 c00:	cb 01       	movw	r24, r22
 c02:	80 95       	com	r24
 c04:	84 23       	and	r24, r20
 c06:	84 bb       	out	0x14, r24	; 20
				 CLR_BIT(PORTC,Add_StrPortCfg->PORT_StrU8PinNum);
 c08:	85 b3       	in	r24, 0x15	; 21
 c0a:	01 80       	ldd	r0, Z+1	; 0x01
 c0c:	02 c0       	rjmp	.+4      	; 0xc12 <PORT_enuSetPinConfiguration+0x298>
 c0e:	22 0f       	add	r18, r18
 c10:	33 1f       	adc	r19, r19
 c12:	0a 94       	dec	r0
 c14:	e2 f7       	brpl	.-8      	; 0xc0e <PORT_enuSetPinConfiguration+0x294>
 c16:	20 95       	com	r18
 c18:	28 23       	and	r18, r24
 c1a:	25 bb       	out	0x15, r18	; 21
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 c1c:	84 e0       	ldi	r24, 0x04	; 4
				 SET_BIT(PORTC,Add_StrPortCfg->PORT_StrU8PinNum);
				 break;
				 case PORT_enuInputExternalPullDown:
				 CLR_BIT(DDRC,Add_StrPortCfg->PORT_StrU8PinNum);
				 CLR_BIT(PORTC,Add_StrPortCfg->PORT_StrU8PinNum);
				 break;
 c1e:	08 95       	ret
				 
			 }
			 break;
			 
			 case PORT_enuPortD :
			 switch(Add_StrPortCfg->PORT_StrU8PinCfg)
 c20:	21 30       	cpi	r18, 0x01	; 1
 c22:	09 f4       	brne	.+2      	; 0xc26 <PORT_enuSetPinConfiguration+0x2ac>
 c24:	4d c0       	rjmp	.+154    	; 0xcc0 <PORT_enuSetPinConfiguration+0x346>
 c26:	a0 f1       	brcs	.+104    	; 0xc90 <PORT_enuSetPinConfiguration+0x316>
 c28:	22 30       	cpi	r18, 0x02	; 2
 c2a:	19 f0       	breq	.+6      	; 0xc32 <PORT_enuSetPinConfiguration+0x2b8>
 c2c:	23 30       	cpi	r18, 0x03	; 3
 c2e:	c9 f0       	breq	.+50     	; 0xc62 <PORT_enuSetPinConfiguration+0x2e8>
 c30:	6e c0       	rjmp	.+220    	; 0xd0e <PORT_enuSetPinConfiguration+0x394>
			 {
				 case PORT_enuOutput_Low:
				 SET_BIT(DDRD,Add_StrPortCfg->PORT_StrU8PinNum);
 c32:	41 b3       	in	r20, 0x11	; 17
 c34:	21 e0       	ldi	r18, 0x01	; 1
 c36:	30 e0       	ldi	r19, 0x00	; 0
 c38:	b9 01       	movw	r22, r18
 c3a:	02 c0       	rjmp	.+4      	; 0xc40 <PORT_enuSetPinConfiguration+0x2c6>
 c3c:	66 0f       	add	r22, r22
 c3e:	77 1f       	adc	r23, r23
 c40:	9a 95       	dec	r25
 c42:	e2 f7       	brpl	.-8      	; 0xc3c <PORT_enuSetPinConfiguration+0x2c2>
 c44:	cb 01       	movw	r24, r22
 c46:	84 2b       	or	r24, r20
 c48:	81 bb       	out	0x11, r24	; 17
				 CLR_BIT(PORTD,Add_StrPortCfg->PORT_StrU8PinNum);
 c4a:	82 b3       	in	r24, 0x12	; 18
 c4c:	01 80       	ldd	r0, Z+1	; 0x01
 c4e:	02 c0       	rjmp	.+4      	; 0xc54 <PORT_enuSetPinConfiguration+0x2da>
 c50:	22 0f       	add	r18, r18
 c52:	33 1f       	adc	r19, r19
 c54:	0a 94       	dec	r0
 c56:	e2 f7       	brpl	.-8      	; 0xc50 <PORT_enuSetPinConfiguration+0x2d6>
 c58:	20 95       	com	r18
 c5a:	28 23       	and	r18, r24
 c5c:	22 bb       	out	0x12, r18	; 18
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 c5e:	84 e0       	ldi	r24, 0x04	; 4
			 {
				 case PORT_enuOutput_Low:
				 SET_BIT(DDRD,Add_StrPortCfg->PORT_StrU8PinNum);
				 CLR_BIT(PORTD,Add_StrPortCfg->PORT_StrU8PinNum);
				 
				 break;
 c60:	08 95       	ret
				 case PORT_enuOutput_High:
				 SET_BIT(DDRD,Add_StrPortCfg->PORT_StrU8PinNum);
 c62:	41 b3       	in	r20, 0x11	; 17
 c64:	21 e0       	ldi	r18, 0x01	; 1
 c66:	30 e0       	ldi	r19, 0x00	; 0
 c68:	b9 01       	movw	r22, r18
 c6a:	02 c0       	rjmp	.+4      	; 0xc70 <PORT_enuSetPinConfiguration+0x2f6>
 c6c:	66 0f       	add	r22, r22
 c6e:	77 1f       	adc	r23, r23
 c70:	9a 95       	dec	r25
 c72:	e2 f7       	brpl	.-8      	; 0xc6c <PORT_enuSetPinConfiguration+0x2f2>
 c74:	cb 01       	movw	r24, r22
 c76:	84 2b       	or	r24, r20
 c78:	81 bb       	out	0x11, r24	; 17
				 SET_BIT(PORTD,Add_StrPortCfg->PORT_StrU8PinNum);
 c7a:	82 b3       	in	r24, 0x12	; 18
 c7c:	01 80       	ldd	r0, Z+1	; 0x01
 c7e:	02 c0       	rjmp	.+4      	; 0xc84 <PORT_enuSetPinConfiguration+0x30a>
 c80:	22 0f       	add	r18, r18
 c82:	33 1f       	adc	r19, r19
 c84:	0a 94       	dec	r0
 c86:	e2 f7       	brpl	.-8      	; 0xc80 <PORT_enuSetPinConfiguration+0x306>
 c88:	28 2b       	or	r18, r24
 c8a:	22 bb       	out	0x12, r18	; 18
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 c8c:	84 e0       	ldi	r24, 0x04	; 4
				 break;
				 case PORT_enuOutput_High:
				 SET_BIT(DDRD,Add_StrPortCfg->PORT_StrU8PinNum);
				 SET_BIT(PORTD,Add_StrPortCfg->PORT_StrU8PinNum);
				 
				 break;
 c8e:	08 95       	ret
				 case PORT_enuInputInternalPullUP:
				 CLR_BIT(DDRD,Add_StrPortCfg->PORT_StrU8PinNum);
 c90:	41 b3       	in	r20, 0x11	; 17
 c92:	21 e0       	ldi	r18, 0x01	; 1
 c94:	30 e0       	ldi	r19, 0x00	; 0
 c96:	b9 01       	movw	r22, r18
 c98:	02 c0       	rjmp	.+4      	; 0xc9e <PORT_enuSetPinConfiguration+0x324>
 c9a:	66 0f       	add	r22, r22
 c9c:	77 1f       	adc	r23, r23
 c9e:	9a 95       	dec	r25
 ca0:	e2 f7       	brpl	.-8      	; 0xc9a <PORT_enuSetPinConfiguration+0x320>
 ca2:	cb 01       	movw	r24, r22
 ca4:	80 95       	com	r24
 ca6:	84 23       	and	r24, r20
 ca8:	81 bb       	out	0x11, r24	; 17
				 SET_BIT(PORTD,Add_StrPortCfg->PORT_StrU8PinNum);
 caa:	82 b3       	in	r24, 0x12	; 18
 cac:	01 80       	ldd	r0, Z+1	; 0x01
 cae:	02 c0       	rjmp	.+4      	; 0xcb4 <PORT_enuSetPinConfiguration+0x33a>
 cb0:	22 0f       	add	r18, r18
 cb2:	33 1f       	adc	r19, r19
 cb4:	0a 94       	dec	r0
 cb6:	e2 f7       	brpl	.-8      	; 0xcb0 <PORT_enuSetPinConfiguration+0x336>
 cb8:	28 2b       	or	r18, r24
 cba:	22 bb       	out	0x12, r18	; 18
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 cbc:	84 e0       	ldi	r24, 0x04	; 4
				 
				 break;
				 case PORT_enuInputInternalPullUP:
				 CLR_BIT(DDRD,Add_StrPortCfg->PORT_StrU8PinNum);
				 SET_BIT(PORTD,Add_StrPortCfg->PORT_StrU8PinNum);
				 break;
 cbe:	08 95       	ret
				 case PORT_enuInputExternalPullDown:
				 CLR_BIT(DDRD,Add_StrPortCfg->PORT_StrU8PinNum);
 cc0:	41 b3       	in	r20, 0x11	; 17
 cc2:	21 e0       	ldi	r18, 0x01	; 1
 cc4:	30 e0       	ldi	r19, 0x00	; 0
 cc6:	b9 01       	movw	r22, r18
 cc8:	02 c0       	rjmp	.+4      	; 0xcce <PORT_enuSetPinConfiguration+0x354>
 cca:	66 0f       	add	r22, r22
 ccc:	77 1f       	adc	r23, r23
 cce:	9a 95       	dec	r25
 cd0:	e2 f7       	brpl	.-8      	; 0xcca <PORT_enuSetPinConfiguration+0x350>
 cd2:	cb 01       	movw	r24, r22
 cd4:	80 95       	com	r24
 cd6:	84 23       	and	r24, r20
 cd8:	81 bb       	out	0x11, r24	; 17
				 CLR_BIT(PORTD,Add_StrPortCfg->PORT_StrU8PinNum);
 cda:	82 b3       	in	r24, 0x12	; 18
 cdc:	01 80       	ldd	r0, Z+1	; 0x01
 cde:	02 c0       	rjmp	.+4      	; 0xce4 <PORT_enuSetPinConfiguration+0x36a>
 ce0:	22 0f       	add	r18, r18
 ce2:	33 1f       	adc	r19, r19
 ce4:	0a 94       	dec	r0
 ce6:	e2 f7       	brpl	.-8      	; 0xce0 <PORT_enuSetPinConfiguration+0x366>
 ce8:	20 95       	com	r18
 cea:	28 23       	and	r18, r24
 cec:	22 bb       	out	0x12, r18	; 18
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 cee:	84 e0       	ldi	r24, 0x04	; 4
				 SET_BIT(PORTD,Add_StrPortCfg->PORT_StrU8PinNum);
				 break;
				 case PORT_enuInputExternalPullDown:
				 CLR_BIT(DDRD,Add_StrPortCfg->PORT_StrU8PinNum);
				 CLR_BIT(PORTD,Add_StrPortCfg->PORT_StrU8PinNum);
				 break;
 cf0:	08 95       	ret
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
	 
	 if (Add_StrPortCfg->PORT_StrU8PortNum > NUM_OF_PORTS || Add_StrPortCfg->PORT_StrU8PortNum < PORT_enuPortA  )
	 {
		 Loc_enuErorState= PORT_enuInvalidPortNumber;
 cf2:	80 e0       	ldi	r24, 0x00	; 0
 cf4:	08 95       	ret
	 }
	 else if (Add_StrPortCfg->PORT_StrU8PinNum > PORT_enuPin7 || Add_StrPortCfg->PORT_StrU8PinNum < PORT_enuPin0)
	 {
		 Loc_enuErorState=  PORT_enuInvalidPinNumber;
 cf6:	81 e0       	ldi	r24, 0x01	; 1
 cf8:	08 95       	ret
	 }
	 else if  (Add_StrPortCfg->PORT_StrU8PinCfg > PORT_enuOutput_High || Add_StrPortCfg->PORT_StrU8PinCfg < PORT_enuInputInternalPullUP)
	 {
		 
		 Loc_enuErorState = PORT_enuIvalidpinConfiguration;
 cfa:	83 e0       	ldi	r24, 0x03	; 3
 cfc:	08 95       	ret
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 cfe:	84 e0       	ldi	r24, 0x04	; 4
 d00:	08 95       	ret
 d02:	84 e0       	ldi	r24, 0x04	; 4
 d04:	08 95       	ret
 d06:	84 e0       	ldi	r24, 0x04	; 4
 d08:	08 95       	ret
 d0a:	84 e0       	ldi	r24, 0x04	; 4
 d0c:	08 95       	ret
 d0e:	84 e0       	ldi	r24, 0x04	; 4
		 }
		 
	 }
	 
	 return Loc_enuErorState;
 }
 d10:	08 95       	ret

00000d12 <SWITCH_Init>:
 #include "SWITCH.h" 
 
 extern SWITCH_StrCfg_t SWITCHS_Arr[NUM_OF_SWITCHS];
 
 SWITCH_enuErorState SWITCH_Init(void)
 {
 d12:	1f 93       	push	r17
 d14:	cf 93       	push	r28
 d16:	df 93       	push	r29
 d18:	cd b7       	in	r28, 0x3d	; 61
 d1a:	de b7       	in	r29, 0x3e	; 62
 d1c:	29 97       	sbiw	r28, 0x09	; 9
 d1e:	0f b6       	in	r0, 0x3f	; 63
 d20:	f8 94       	cli
 d22:	de bf       	out	0x3e, r29	; 62
 d24:	0f be       	out	0x3f, r0	; 63
 d26:	cd bf       	out	0x3d, r28	; 61
      SWITCH_enuErorState Loc_SWITCHErrorState = SWITCH_enusucceeded ;
	  PORT_enuErrorStatus_t Loc_PORTErorState = PORT_enuSucceded ;
	  PORT_StrCFg_t Loc_Str_CurrSWITCH_Arr[NUM_OF_SWITCHS];
	  u8 LocU8Counter;
	  for(LocU8Counter = 0 ; LocU8Counter < NUM_OF_SWITCHS ; LocU8Counter ++)
 d28:	10 e0       	ldi	r17, 0x00	; 0
 extern SWITCH_StrCfg_t SWITCHS_Arr[NUM_OF_SWITCHS];
 
 SWITCH_enuErorState SWITCH_Init(void)
 {
      SWITCH_enuErorState Loc_SWITCHErrorState = SWITCH_enusucceeded ;
	  PORT_enuErrorStatus_t Loc_PORTErorState = PORT_enuSucceded ;
 d2a:	84 e0       	ldi	r24, 0x04	; 4
	  PORT_StrCFg_t Loc_Str_CurrSWITCH_Arr[NUM_OF_SWITCHS];
	  u8 LocU8Counter;
	  for(LocU8Counter = 0 ; LocU8Counter < NUM_OF_SWITCHS ; LocU8Counter ++)
 d2c:	5d c0       	rjmp	.+186    	; 0xde8 <SWITCH_Init+0xd6>
	  {
		  
		  if (SWITCHS_Arr[LocU8Counter].SWITCH_StrU8PortCfg > NUM_OF_PORTS || SWITCHS_Arr[LocU8Counter].SWITCH_StrU8PortCfg < SWITCH_PORTA )
 d2e:	21 2f       	mov	r18, r17
 d30:	30 e0       	ldi	r19, 0x00	; 0
 d32:	f9 01       	movw	r30, r18
 d34:	ee 0f       	add	r30, r30
 d36:	ff 1f       	adc	r31, r31
 d38:	e2 0f       	add	r30, r18
 d3a:	f3 1f       	adc	r31, r19
 d3c:	ee 51       	subi	r30, 0x1E	; 30
 d3e:	ff 4f       	sbci	r31, 0xFF	; 255
 d40:	40 81       	ld	r20, Z
 d42:	45 30       	cpi	r20, 0x05	; 5
 d44:	08 f0       	brcs	.+2      	; 0xd48 <SWITCH_Init+0x36>
 d46:	55 c0       	rjmp	.+170    	; 0xdf2 <SWITCH_Init+0xe0>
			  
			  Loc_SWITCHErrorState = SWITCH_enuInvalidPort ;
			  break;
			  
		  }
		  else if (SWITCHS_Arr[LocU8Counter].SWITCH_StrU8PinCFg > SWITCH_PIN7 || SWITCHS_Arr[LocU8Counter].SWITCH_StrU8PinCFg < SWITCH_PIN0 )
 d48:	f9 01       	movw	r30, r18
 d4a:	ee 0f       	add	r30, r30
 d4c:	ff 1f       	adc	r31, r31
 d4e:	e2 0f       	add	r30, r18
 d50:	f3 1f       	adc	r31, r19
 d52:	ee 51       	subi	r30, 0x1E	; 30
 d54:	ff 4f       	sbci	r31, 0xFF	; 255
 d56:	51 81       	ldd	r21, Z+1	; 0x01
 d58:	58 30       	cpi	r21, 0x08	; 8
 d5a:	08 f0       	brcs	.+2      	; 0xd5e <SWITCH_Init+0x4c>
 d5c:	4c c0       	rjmp	.+152    	; 0xdf6 <SWITCH_Init+0xe4>
			  
			  Loc_SWITCHErrorState = SWITCH_enuInvalidPin ;
			  break;
			  
		  }
		  else if (SWITCHS_Arr[LocU8Counter].SWITCH_StrU8SWITCHState != SWITCH_PULLUP && SWITCHS_Arr[LocU8Counter].SWITCH_StrU8SWITCHState != SWITCH_PULLDOWN)
 d5e:	f9 01       	movw	r30, r18
 d60:	ee 0f       	add	r30, r30
 d62:	ff 1f       	adc	r31, r31
 d64:	e2 0f       	add	r30, r18
 d66:	f3 1f       	adc	r31, r19
 d68:	ee 51       	subi	r30, 0x1E	; 30
 d6a:	ff 4f       	sbci	r31, 0xFF	; 255
 d6c:	92 81       	ldd	r25, Z+2	; 0x02
 d6e:	92 30       	cpi	r25, 0x02	; 2
 d70:	08 f0       	brcs	.+2      	; 0xd74 <SWITCH_Init+0x62>
 d72:	43 c0       	rjmp	.+134    	; 0xdfa <SWITCH_Init+0xe8>
			  
		  }
		  else
		  {
			    
				 Loc_Str_CurrSWITCH_Arr[LocU8Counter].PORT_StrU8PortNum = SWITCHS_Arr[LocU8Counter].SWITCH_StrU8PortCfg ;
 d74:	f9 01       	movw	r30, r18
 d76:	ee 0f       	add	r30, r30
 d78:	ff 1f       	adc	r31, r31
 d7a:	e2 0f       	add	r30, r18
 d7c:	f3 1f       	adc	r31, r19
 d7e:	61 e0       	ldi	r22, 0x01	; 1
 d80:	70 e0       	ldi	r23, 0x00	; 0
 d82:	6c 0f       	add	r22, r28
 d84:	7d 1f       	adc	r23, r29
 d86:	e6 0f       	add	r30, r22
 d88:	f7 1f       	adc	r31, r23
 d8a:	40 83       	st	Z, r20
				 Loc_Str_CurrSWITCH_Arr[LocU8Counter].PORT_StrU8PinNum = SWITCHS_Arr[LocU8Counter].SWITCH_StrU8PinCFg;
 d8c:	51 83       	std	Z+1, r21	; 0x01
	            
				  switch(SWITCHS_Arr[LocU8Counter].SWITCH_StrU8SWITCHState)	
 d8e:	99 23       	and	r25, r25
 d90:	19 f0       	breq	.+6      	; 0xd98 <SWITCH_Init+0x86>
 d92:	91 30       	cpi	r25, 0x01	; 1
 d94:	71 f0       	breq	.+28     	; 0xdb2 <SWITCH_Init+0xa0>
 d96:	1a c0       	rjmp	.+52     	; 0xdcc <SWITCH_Init+0xba>
				  {
					  
					  case (SWITCH_PULLUP) :
					     Loc_Str_CurrSWITCH_Arr[LocU8Counter].PORT_StrU8PinCfg = PORT_enuInputInternalPullUP ;
 d98:	f9 01       	movw	r30, r18
 d9a:	ee 0f       	add	r30, r30
 d9c:	ff 1f       	adc	r31, r31
 d9e:	e2 0f       	add	r30, r18
 da0:	f3 1f       	adc	r31, r19
 da2:	81 e0       	ldi	r24, 0x01	; 1
 da4:	90 e0       	ldi	r25, 0x00	; 0
 da6:	8c 0f       	add	r24, r28
 da8:	9d 1f       	adc	r25, r29
 daa:	e8 0f       	add	r30, r24
 dac:	f9 1f       	adc	r31, r25
 dae:	12 82       	std	Z+2, r1	; 0x02
					       break;
 db0:	0d c0       	rjmp	.+26     	; 0xdcc <SWITCH_Init+0xba>
					  case (SWITCH_PULLDOWN):
					      Loc_Str_CurrSWITCH_Arr[LocU8Counter].PORT_StrU8PinCfg = PORT_enuInputExternalPullDown ;
 db2:	f9 01       	movw	r30, r18
 db4:	ee 0f       	add	r30, r30
 db6:	ff 1f       	adc	r31, r31
 db8:	e2 0f       	add	r30, r18
 dba:	f3 1f       	adc	r31, r19
 dbc:	61 e0       	ldi	r22, 0x01	; 1
 dbe:	70 e0       	ldi	r23, 0x00	; 0
 dc0:	6c 0f       	add	r22, r28
 dc2:	7d 1f       	adc	r23, r29
 dc4:	e6 0f       	add	r30, r22
 dc6:	f7 1f       	adc	r31, r23
 dc8:	81 e0       	ldi	r24, 0x01	; 1
 dca:	82 83       	std	Z+2, r24	; 0x02
					       break;
				  }					  
					  
				  
				  Loc_PORTErorState = PORT_enuSetPinConfiguration(&Loc_Str_CurrSWITCH_Arr[LocU8Counter]);
 dcc:	c9 01       	movw	r24, r18
 dce:	88 0f       	add	r24, r24
 dd0:	99 1f       	adc	r25, r25
 dd2:	82 0f       	add	r24, r18
 dd4:	93 1f       	adc	r25, r19
 dd6:	21 e0       	ldi	r18, 0x01	; 1
 dd8:	30 e0       	ldi	r19, 0x00	; 0
 dda:	2c 0f       	add	r18, r28
 ddc:	3d 1f       	adc	r19, r29
 dde:	82 0f       	add	r24, r18
 de0:	93 1f       	adc	r25, r19
 de2:	0e 94 bd 04 	call	0x97a	; 0x97a <PORT_enuSetPinConfiguration>
 {
      SWITCH_enuErorState Loc_SWITCHErrorState = SWITCH_enusucceeded ;
	  PORT_enuErrorStatus_t Loc_PORTErorState = PORT_enuSucceded ;
	  PORT_StrCFg_t Loc_Str_CurrSWITCH_Arr[NUM_OF_SWITCHS];
	  u8 LocU8Counter;
	  for(LocU8Counter = 0 ; LocU8Counter < NUM_OF_SWITCHS ; LocU8Counter ++)
 de6:	1f 5f       	subi	r17, 0xFF	; 255
 de8:	13 30       	cpi	r17, 0x03	; 3
 dea:	08 f4       	brcc	.+2      	; 0xdee <SWITCH_Init+0xdc>
 dec:	a0 cf       	rjmp	.-192    	; 0xd2e <SWITCH_Init+0x1c>
 
 extern SWITCH_StrCfg_t SWITCHS_Arr[NUM_OF_SWITCHS];
 
 SWITCH_enuErorState SWITCH_Init(void)
 {
      SWITCH_enuErorState Loc_SWITCHErrorState = SWITCH_enusucceeded ;
 dee:	93 e0       	ldi	r25, 0x03	; 3
 df0:	05 c0       	rjmp	.+10     	; 0xdfc <SWITCH_Init+0xea>
	  {
		  
		  if (SWITCHS_Arr[LocU8Counter].SWITCH_StrU8PortCfg > NUM_OF_PORTS || SWITCHS_Arr[LocU8Counter].SWITCH_StrU8PortCfg < SWITCH_PORTA )
		  {
			  
			  Loc_SWITCHErrorState = SWITCH_enuInvalidPort ;
 df2:	90 e0       	ldi	r25, 0x00	; 0
 df4:	03 c0       	rjmp	.+6      	; 0xdfc <SWITCH_Init+0xea>
			  
		  }
		  else if (SWITCHS_Arr[LocU8Counter].SWITCH_StrU8PinCFg > SWITCH_PIN7 || SWITCHS_Arr[LocU8Counter].SWITCH_StrU8PinCFg < SWITCH_PIN0 )
		  {
			  
			  Loc_SWITCHErrorState = SWITCH_enuInvalidPin ;
 df6:	91 e0       	ldi	r25, 0x01	; 1
 df8:	01 c0       	rjmp	.+2      	; 0xdfc <SWITCH_Init+0xea>
			  
		  }
		  else if (SWITCHS_Arr[LocU8Counter].SWITCH_StrU8SWITCHState != SWITCH_PULLUP && SWITCHS_Arr[LocU8Counter].SWITCH_StrU8SWITCHState != SWITCH_PULLDOWN)
		  {
			  
			  Loc_SWITCHErrorState = SWITCH_enuInvalidSWITCHState ;
 dfa:	92 e0       	ldi	r25, 0x02	; 2
		 }	  
	 }
	 
	 
	 
	     if (Loc_PORTErorState != PORT_enuSucceded)
 dfc:	84 30       	cpi	r24, 0x04	; 4
 dfe:	09 f0       	breq	.+2      	; 0xe02 <SWITCH_Init+0xf0>
		  { 
		 
		      Loc_SWITCHErrorState = SWITCH_enuPortNOK ;
 e00:	94 e0       	ldi	r25, 0x04	; 4
	      }
	           return Loc_SWITCHErrorState;
 }
 e02:	89 2f       	mov	r24, r25
 e04:	29 96       	adiw	r28, 0x09	; 9
 e06:	0f b6       	in	r0, 0x3f	; 63
 e08:	f8 94       	cli
 e0a:	de bf       	out	0x3e, r29	; 62
 e0c:	0f be       	out	0x3f, r0	; 63
 e0e:	cd bf       	out	0x3d, r28	; 61
 e10:	df 91       	pop	r29
 e12:	cf 91       	pop	r28
 e14:	1f 91       	pop	r17
 e16:	08 95       	ret

00000e18 <SWITCH_enuGetSwitchState>:
 SWITCH_enuErorState SWITCH_enuGetSwitchState(u8 Copy_u8SwitchName , u8 *Add_u8State)
	{
 e18:	ef 92       	push	r14
 e1a:	ff 92       	push	r15
 e1c:	0f 93       	push	r16
 e1e:	1f 93       	push	r17
 e20:	cf 93       	push	r28
 e22:	df 93       	push	r29
 e24:	1f 92       	push	r1
 e26:	cd b7       	in	r28, 0x3d	; 61
 e28:	de b7       	in	r29, 0x3e	; 62
		 SWITCH_enuErorState Loc_SwitchErorState = SWITCH_enusucceeded ;
		 DIO_enuErrorStatus_t Loc_DioErorsState = DIO_enuSucceded;
		 u8  Loc_u8State ;
		if (Copy_u8SwitchName > NUM_OF_SWITCHS )
 e2a:	84 30       	cpi	r24, 0x04	; 4
 e2c:	98 f5       	brcc	.+102    	; 0xe94 <SWITCH_enuGetSwitchState+0x7c>
		{
			Loc_SwitchErorState = SWITCH_enuInvalidSwitchname; 
		}
		else if (Add_u8State == NULL )
 e2e:	61 15       	cp	r22, r1
 e30:	71 05       	cpc	r23, r1
 e32:	99 f1       	breq	.+102    	; 0xe9a <SWITCH_enuGetSwitchState+0x82>
 e34:	7b 01       	movw	r14, r22
		{
			Loc_SwitchErorState = SWITCH_enuNullPtr;
		}
		else
		{
			 Loc_DioErorsState = DIO_enuGetPinLogic(SWITCHS_Arr[Copy_u8SwitchName].SWITCH_StrU8PortCfg , SWITCHS_Arr[Copy_u8SwitchName].SWITCH_StrU8PinCFg ,&Loc_u8State);
 e36:	90 e0       	ldi	r25, 0x00	; 0
 e38:	8c 01       	movw	r16, r24
 e3a:	00 0f       	add	r16, r16
 e3c:	11 1f       	adc	r17, r17
 e3e:	08 0f       	add	r16, r24
 e40:	19 1f       	adc	r17, r25
 e42:	0e 51       	subi	r16, 0x1E	; 30
 e44:	1f 4f       	sbci	r17, 0xFF	; 255
 e46:	f8 01       	movw	r30, r16
 e48:	61 81       	ldd	r22, Z+1	; 0x01
 e4a:	ae 01       	movw	r20, r28
 e4c:	4f 5f       	subi	r20, 0xFF	; 255
 e4e:	5f 4f       	sbci	r21, 0xFF	; 255
 e50:	80 81       	ld	r24, Z
 e52:	0e 94 02 03 	call	0x604	; 0x604 <DIO_enuGetPinLogic>
 e56:	98 2f       	mov	r25, r24
		     switch(SWITCHS_Arr[Copy_u8SwitchName].SWITCH_StrU8SWITCHState)
 e58:	f8 01       	movw	r30, r16
 e5a:	82 81       	ldd	r24, Z+2	; 0x02
 e5c:	88 23       	and	r24, r24
 e5e:	19 f0       	breq	.+6      	; 0xe66 <SWITCH_enuGetSwitchState+0x4e>
 e60:	81 30       	cpi	r24, 0x01	; 1
 e62:	69 f0       	breq	.+26     	; 0xe7e <SWITCH_enuGetSwitchState+0x66>
 e64:	1d c0       	rjmp	.+58     	; 0xea0 <SWITCH_enuGetSwitchState+0x88>
		       {
			        case (SWITCH_PULLUP):
			   
			       if(Loc_u8State == PORTR_HIGH)
 e66:	89 81       	ldd	r24, Y+1	; 0x01
 e68:	81 30       	cpi	r24, 0x01	; 1
 e6a:	21 f4       	brne	.+8      	; 0xe74 <SWITCH_enuGetSwitchState+0x5c>
			       {
                      *Add_u8State = SWITCH_NPRESSED ;		   
 e6c:	f7 01       	movw	r30, r14
 e6e:	10 82       	st	Z, r1
	      }
	           return Loc_SWITCHErrorState;
 }
 SWITCH_enuErorState SWITCH_enuGetSwitchState(u8 Copy_u8SwitchName , u8 *Add_u8State)
	{
		 SWITCH_enuErorState Loc_SwitchErorState = SWITCH_enusucceeded ;
 e70:	83 e0       	ldi	r24, 0x03	; 3
 e72:	17 c0       	rjmp	.+46     	; 0xea2 <SWITCH_enuGetSwitchState+0x8a>
			       {
                      *Add_u8State = SWITCH_NPRESSED ;		   
			       }
			      else
			       {
				     *Add_u8State = SWITCH_PRESSED ;	
 e74:	81 e0       	ldi	r24, 0x01	; 1
 e76:	f7 01       	movw	r30, r14
 e78:	80 83       	st	Z, r24
	      }
	           return Loc_SWITCHErrorState;
 }
 SWITCH_enuErorState SWITCH_enuGetSwitchState(u8 Copy_u8SwitchName , u8 *Add_u8State)
	{
		 SWITCH_enuErorState Loc_SwitchErorState = SWITCH_enusucceeded ;
 e7a:	83 e0       	ldi	r24, 0x03	; 3
 e7c:	12 c0       	rjmp	.+36     	; 0xea2 <SWITCH_enuGetSwitchState+0x8a>
				   
			       }
			         break;
			       case (SWITCH_PULLDOWN):  
			 
			        if(Loc_u8State == PORTR_HIGH)
 e7e:	89 81       	ldd	r24, Y+1	; 0x01
 e80:	81 30       	cpi	r24, 0x01	; 1
 e82:	21 f4       	brne	.+8      	; 0xe8c <SWITCH_enuGetSwitchState+0x74>
			       {
				      *Add_u8State = SWITCH_PRESSED ;
 e84:	f7 01       	movw	r30, r14
 e86:	80 83       	st	Z, r24
	      }
	           return Loc_SWITCHErrorState;
 }
 SWITCH_enuErorState SWITCH_enuGetSwitchState(u8 Copy_u8SwitchName , u8 *Add_u8State)
	{
		 SWITCH_enuErorState Loc_SwitchErorState = SWITCH_enusucceeded ;
 e88:	83 e0       	ldi	r24, 0x03	; 3
 e8a:	0b c0       	rjmp	.+22     	; 0xea2 <SWITCH_enuGetSwitchState+0x8a>
			       {
				      *Add_u8State = SWITCH_PRESSED ;
			       }
			       else
			       {
				     *Add_u8State = SWITCH_NPRESSED ;
 e8c:	f7 01       	movw	r30, r14
 e8e:	10 82       	st	Z, r1
	      }
	           return Loc_SWITCHErrorState;
 }
 SWITCH_enuErorState SWITCH_enuGetSwitchState(u8 Copy_u8SwitchName , u8 *Add_u8State)
	{
		 SWITCH_enuErorState Loc_SwitchErorState = SWITCH_enusucceeded ;
 e90:	83 e0       	ldi	r24, 0x03	; 3
 e92:	07 c0       	rjmp	.+14     	; 0xea2 <SWITCH_enuGetSwitchState+0x8a>
		 DIO_enuErrorStatus_t Loc_DioErorsState = DIO_enuSucceded;
 e94:	94 e0       	ldi	r25, 0x04	; 4
		 u8  Loc_u8State ;
		if (Copy_u8SwitchName > NUM_OF_SWITCHS )
		{
			Loc_SwitchErorState = SWITCH_enuInvalidSwitchname; 
 e96:	85 e0       	ldi	r24, 0x05	; 5
 e98:	04 c0       	rjmp	.+8      	; 0xea2 <SWITCH_enuGetSwitchState+0x8a>
	           return Loc_SWITCHErrorState;
 }
 SWITCH_enuErorState SWITCH_enuGetSwitchState(u8 Copy_u8SwitchName , u8 *Add_u8State)
	{
		 SWITCH_enuErorState Loc_SwitchErorState = SWITCH_enusucceeded ;
		 DIO_enuErrorStatus_t Loc_DioErorsState = DIO_enuSucceded;
 e9a:	94 e0       	ldi	r25, 0x04	; 4
		{
			Loc_SwitchErorState = SWITCH_enuInvalidSwitchname; 
		}
		else if (Add_u8State == NULL )
		{
			Loc_SwitchErorState = SWITCH_enuNullPtr;
 e9c:	87 e0       	ldi	r24, 0x07	; 7
 e9e:	01 c0       	rjmp	.+2      	; 0xea2 <SWITCH_enuGetSwitchState+0x8a>
	      }
	           return Loc_SWITCHErrorState;
 }
 SWITCH_enuErorState SWITCH_enuGetSwitchState(u8 Copy_u8SwitchName , u8 *Add_u8State)
	{
		 SWITCH_enuErorState Loc_SwitchErorState = SWITCH_enusucceeded ;
 ea0:	83 e0       	ldi	r24, 0x03	; 3
				   
			       }
			        break;	
			   }
		}
		if(Loc_DioErorsState != DIO_enuSucceded)
 ea2:	94 30       	cpi	r25, 0x04	; 4
 ea4:	09 f0       	breq	.+2      	; 0xea8 <SWITCH_enuGetSwitchState+0x90>
		{
		    Loc_SwitchErorState = SWITCH_enuDioNOK ;	   
 ea6:	86 e0       	ldi	r24, 0x06	; 6
			   
		}
		  return Loc_SwitchErorState;
 ea8:	0f 90       	pop	r0
 eaa:	df 91       	pop	r29
 eac:	cf 91       	pop	r28
 eae:	1f 91       	pop	r17
 eb0:	0f 91       	pop	r16
 eb2:	ff 90       	pop	r15
 eb4:	ef 90       	pop	r14
 eb6:	08 95       	ret

00000eb8 <__umulhisi3>:
 eb8:	a2 9f       	mul	r26, r18
 eba:	b0 01       	movw	r22, r0
 ebc:	b3 9f       	mul	r27, r19
 ebe:	c0 01       	movw	r24, r0
 ec0:	a3 9f       	mul	r26, r19
 ec2:	70 0d       	add	r23, r0
 ec4:	81 1d       	adc	r24, r1
 ec6:	11 24       	eor	r1, r1
 ec8:	91 1d       	adc	r25, r1
 eca:	b2 9f       	mul	r27, r18
 ecc:	70 0d       	add	r23, r0
 ece:	81 1d       	adc	r24, r1
 ed0:	11 24       	eor	r1, r1
 ed2:	91 1d       	adc	r25, r1
 ed4:	08 95       	ret

00000ed6 <_exit>:
 ed6:	f8 94       	cli

00000ed8 <__stop_program>:
 ed8:	ff cf       	rjmp	.-2      	; 0xed8 <__stop_program>
