
EXT APP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000009a4  00000a18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000a2e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a60  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  00000a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000012eb  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ab4  00000000  00000000  00001eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d3f  00000000  00000000  0000296b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000284  00000000  00000000  000036ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000bc5  00000000  00000000  00003930  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f30  00000000  00000000  000044f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  00005425  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 0f 02 	jmp	0x41e	; 0x41e <__vector_1>
   8:	0c 94 35 02 	jmp	0x46a	; 0x46a <__vector_2>
   c:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__vector_3>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ea       	ldi	r30, 0xA4	; 164
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 37       	cpi	r26, 0x76	; 118
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 08 02 	call	0x410	; 0x410 <main>
  7a:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_enuSetPinLogic>:
}
DIO_enuErrorStatus_t DIO_enuSetPinLogic(DIO_enuPortNumber_t Copy_PortNum , DIO_enuPinNumber_t Copy_PinNUm , DIO_enuSetPinLogic_t Copy_PinLogic)
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
	  
	if (Copy_PortNum > NUM_OF_PORTS || Copy_PortNum < DIO_enuPortA  )
  82:	85 30       	cpi	r24, 0x05	; 5
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_enuSetPinLogic+0x6>
  86:	87 c0       	rjmp	.+270    	; 0x196 <DIO_enuSetPinLogic+0x114>
	{
       Loc_enuErorState= DIO_enuInvalidPortNumber;
	}
	else if(Copy_PinNUm > DIO_enuPin7 || Copy_PinNUm < DIO_enuPin0)
  88:	68 30       	cpi	r22, 0x08	; 8
  8a:	08 f0       	brcs	.+2      	; 0x8e <DIO_enuSetPinLogic+0xc>
  8c:	86 c0       	rjmp	.+268    	; 0x19a <DIO_enuSetPinLogic+0x118>
	{
        Loc_enuErorState= DIO_enuInvalidPinNumber;
	}
	else if (Copy_PinLogic != DIO_enuLogicHigh && Copy_PinLogic != DIO_enuLogicLow)
  8e:	42 30       	cpi	r20, 0x02	; 2
  90:	08 f0       	brcs	.+2      	; 0x94 <DIO_enuSetPinLogic+0x12>
  92:	85 c0       	rjmp	.+266    	; 0x19e <DIO_enuSetPinLogic+0x11c>
	{
		Loc_enuErorState= DIO_enuInvalidPinLogic;
	}
	else
	{
	   switch(Copy_PortNum)	
  94:	81 30       	cpi	r24, 0x01	; 1
  96:	31 f1       	breq	.+76     	; 0xe4 <DIO_enuSetPinLogic+0x62>
  98:	38 f0       	brcs	.+14     	; 0xa8 <DIO_enuSetPinLogic+0x26>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	09 f4       	brne	.+2      	; 0xa0 <DIO_enuSetPinLogic+0x1e>
  9e:	40 c0       	rjmp	.+128    	; 0x120 <DIO_enuSetPinLogic+0x9e>
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	09 f4       	brne	.+2      	; 0xa6 <DIO_enuSetPinLogic+0x24>
  a4:	5b c0       	rjmp	.+182    	; 0x15c <DIO_enuSetPinLogic+0xda>
  a6:	7d c0       	rjmp	.+250    	; 0x1a2 <DIO_enuSetPinLogic+0x120>
	   {
		   case DIO_enuPortA:
		          switch(Copy_PinLogic)
  a8:	44 23       	and	r20, r20
  aa:	79 f0       	breq	.+30     	; 0xca <DIO_enuSetPinLogic+0x48>
  ac:	41 30       	cpi	r20, 0x01	; 1
  ae:	09 f0       	breq	.+2      	; 0xb2 <DIO_enuSetPinLogic+0x30>
  b0:	7a c0       	rjmp	.+244    	; 0x1a6 <DIO_enuSetPinLogic+0x124>
				  {
					  case DIO_enuLogicHigh :
					      SET_BIT(PORTA,Copy_PinNUm);
  b2:	2b b3       	in	r18, 0x1b	; 27
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_enuSetPinLogic+0x3c>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_enuSetPinLogic+0x38>
  c2:	82 2b       	or	r24, r18
  c4:	8b bb       	out	0x1b, r24	; 27
	
	return Loc_enuErorState;
}
DIO_enuErrorStatus_t DIO_enuSetPinLogic(DIO_enuPortNumber_t Copy_PortNum , DIO_enuPinNumber_t Copy_PinNUm , DIO_enuSetPinLogic_t Copy_PinLogic)
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
  c6:	84 e0       	ldi	r24, 0x04	; 4
		   case DIO_enuPortA:
		          switch(Copy_PinLogic)
				  {
					  case DIO_enuLogicHigh :
					      SET_BIT(PORTA,Copy_PinNUm);
					       break;
  c8:	08 95       	ret
					  case DIO_enuLogicLow :
					      CLR_BIT(PORTA,Copy_PinNUm);
  ca:	2b b3       	in	r18, 0x1b	; 27
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <DIO_enuSetPinLogic+0x54>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <DIO_enuSetPinLogic+0x50>
  da:	80 95       	com	r24
  dc:	82 23       	and	r24, r18
  de:	8b bb       	out	0x1b, r24	; 27
	
	return Loc_enuErorState;
}
DIO_enuErrorStatus_t DIO_enuSetPinLogic(DIO_enuPortNumber_t Copy_PortNum , DIO_enuPinNumber_t Copy_PinNUm , DIO_enuSetPinLogic_t Copy_PinLogic)
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
  e0:	84 e0       	ldi	r24, 0x04	; 4
					  case DIO_enuLogicHigh :
					      SET_BIT(PORTA,Copy_PinNUm);
					       break;
					  case DIO_enuLogicLow :
					      CLR_BIT(PORTA,Copy_PinNUm);
						   break;
  e2:	08 95       	ret
					  default:
					       break; 
				  }
				  break;
			case DIO_enuPortB:
			         switch(Copy_PinLogic)
  e4:	44 23       	and	r20, r20
  e6:	79 f0       	breq	.+30     	; 0x106 <DIO_enuSetPinLogic+0x84>
  e8:	41 30       	cpi	r20, 0x01	; 1
  ea:	09 f0       	breq	.+2      	; 0xee <DIO_enuSetPinLogic+0x6c>
  ec:	5e c0       	rjmp	.+188    	; 0x1aa <DIO_enuSetPinLogic+0x128>
			         {
				         case DIO_enuLogicHigh :
				         SET_BIT(PORTB,Copy_PinNUm);
  ee:	28 b3       	in	r18, 0x18	; 24
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_enuSetPinLogic+0x78>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_enuSetPinLogic+0x74>
  fe:	82 2b       	or	r24, r18
 100:	88 bb       	out	0x18, r24	; 24
	
	return Loc_enuErorState;
}
DIO_enuErrorStatus_t DIO_enuSetPinLogic(DIO_enuPortNumber_t Copy_PortNum , DIO_enuPinNumber_t Copy_PinNUm , DIO_enuSetPinLogic_t Copy_PinLogic)
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
 102:	84 e0       	ldi	r24, 0x04	; 4
			case DIO_enuPortB:
			         switch(Copy_PinLogic)
			         {
				         case DIO_enuLogicHigh :
				         SET_BIT(PORTB,Copy_PinNUm);
				         break;
 104:	08 95       	ret
				         case DIO_enuLogicLow :
				         CLR_BIT(PORTB,Copy_PinNUm);
 106:	28 b3       	in	r18, 0x18	; 24
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_enuSetPinLogic+0x90>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_enuSetPinLogic+0x8c>
 116:	80 95       	com	r24
 118:	82 23       	and	r24, r18
 11a:	88 bb       	out	0x18, r24	; 24
	
	return Loc_enuErorState;
}
DIO_enuErrorStatus_t DIO_enuSetPinLogic(DIO_enuPortNumber_t Copy_PortNum , DIO_enuPinNumber_t Copy_PinNUm , DIO_enuSetPinLogic_t Copy_PinLogic)
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
 11c:	84 e0       	ldi	r24, 0x04	; 4
				         case DIO_enuLogicHigh :
				         SET_BIT(PORTB,Copy_PinNUm);
				         break;
				         case DIO_enuLogicLow :
				         CLR_BIT(PORTB,Copy_PinNUm);
				         break;
 11e:	08 95       	ret
				         default:
				         break;
			         }
			         break;
			case DIO_enuPortC:
			     switch(Copy_PinLogic)
 120:	44 23       	and	r20, r20
 122:	79 f0       	breq	.+30     	; 0x142 <DIO_enuSetPinLogic+0xc0>
 124:	41 30       	cpi	r20, 0x01	; 1
 126:	09 f0       	breq	.+2      	; 0x12a <DIO_enuSetPinLogic+0xa8>
 128:	42 c0       	rjmp	.+132    	; 0x1ae <DIO_enuSetPinLogic+0x12c>
			      {
				    case DIO_enuLogicHigh :
				       SET_BIT(PORTC,Copy_PinNUm);
 12a:	25 b3       	in	r18, 0x15	; 21
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_enuSetPinLogic+0xb4>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_enuSetPinLogic+0xb0>
 13a:	82 2b       	or	r24, r18
 13c:	85 bb       	out	0x15, r24	; 21
	
	return Loc_enuErorState;
}
DIO_enuErrorStatus_t DIO_enuSetPinLogic(DIO_enuPortNumber_t Copy_PortNum , DIO_enuPinNumber_t Copy_PinNUm , DIO_enuSetPinLogic_t Copy_PinLogic)
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
 13e:	84 e0       	ldi	r24, 0x04	; 4
			case DIO_enuPortC:
			     switch(Copy_PinLogic)
			      {
				    case DIO_enuLogicHigh :
				       SET_BIT(PORTC,Copy_PinNUm);
				        break;
 140:	08 95       	ret
				    case DIO_enuLogicLow :
				       CLR_BIT(PORTC,Copy_PinNUm);
 142:	25 b3       	in	r18, 0x15	; 21
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_enuSetPinLogic+0xcc>
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	6a 95       	dec	r22
 150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_enuSetPinLogic+0xc8>
 152:	80 95       	com	r24
 154:	82 23       	and	r24, r18
 156:	85 bb       	out	0x15, r24	; 21
	
	return Loc_enuErorState;
}
DIO_enuErrorStatus_t DIO_enuSetPinLogic(DIO_enuPortNumber_t Copy_PortNum , DIO_enuPinNumber_t Copy_PinNUm , DIO_enuSetPinLogic_t Copy_PinLogic)
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
 158:	84 e0       	ldi	r24, 0x04	; 4
				    case DIO_enuLogicHigh :
				       SET_BIT(PORTC,Copy_PinNUm);
				        break;
				    case DIO_enuLogicLow :
				       CLR_BIT(PORTC,Copy_PinNUm);
				       break;
 15a:	08 95       	ret
				    default:
				      break;
			      }
			   break;
			case DIO_enuPortD:
			   switch(Copy_PinLogic)
 15c:	44 23       	and	r20, r20
 15e:	71 f0       	breq	.+28     	; 0x17c <DIO_enuSetPinLogic+0xfa>
 160:	41 30       	cpi	r20, 0x01	; 1
 162:	39 f5       	brne	.+78     	; 0x1b2 <DIO_enuSetPinLogic+0x130>
			    {
				  case DIO_enuLogicHigh :
				      SET_BIT(PORTD,Copy_PinNUm);
 164:	22 b3       	in	r18, 0x12	; 18
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_enuSetPinLogic+0xee>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_enuSetPinLogic+0xea>
 174:	82 2b       	or	r24, r18
 176:	82 bb       	out	0x12, r24	; 18
	
	return Loc_enuErorState;
}
DIO_enuErrorStatus_t DIO_enuSetPinLogic(DIO_enuPortNumber_t Copy_PortNum , DIO_enuPinNumber_t Copy_PinNUm , DIO_enuSetPinLogic_t Copy_PinLogic)
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
 178:	84 e0       	ldi	r24, 0x04	; 4
			case DIO_enuPortD:
			   switch(Copy_PinLogic)
			    {
				  case DIO_enuLogicHigh :
				      SET_BIT(PORTD,Copy_PinNUm);
				       break;
 17a:	08 95       	ret
				  case DIO_enuLogicLow :
				      CLR_BIT(PORTD,Copy_PinNUm);
 17c:	22 b3       	in	r18, 0x12	; 18
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_enuSetPinLogic+0x106>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	6a 95       	dec	r22
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_enuSetPinLogic+0x102>
 18c:	80 95       	com	r24
 18e:	82 23       	and	r24, r18
 190:	82 bb       	out	0x12, r24	; 18
	
	return Loc_enuErorState;
}
DIO_enuErrorStatus_t DIO_enuSetPinLogic(DIO_enuPortNumber_t Copy_PortNum , DIO_enuPinNumber_t Copy_PinNUm , DIO_enuSetPinLogic_t Copy_PinLogic)
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
 192:	84 e0       	ldi	r24, 0x04	; 4
				  case DIO_enuLogicHigh :
				      SET_BIT(PORTD,Copy_PinNUm);
				       break;
				  case DIO_enuLogicLow :
				      CLR_BIT(PORTD,Copy_PinNUm);
				       break;
 194:	08 95       	ret
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
	  
	if (Copy_PortNum > NUM_OF_PORTS || Copy_PortNum < DIO_enuPortA  )
	{
       Loc_enuErorState= DIO_enuInvalidPortNumber;
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	08 95       	ret
	}
	else if(Copy_PinNUm > DIO_enuPin7 || Copy_PinNUm < DIO_enuPin0)
	{
        Loc_enuErorState= DIO_enuInvalidPinNumber;
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	08 95       	ret
	}
	else if (Copy_PinLogic != DIO_enuLogicHigh && Copy_PinLogic != DIO_enuLogicLow)
	{
		Loc_enuErorState= DIO_enuInvalidPinLogic;
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	08 95       	ret
	
	return Loc_enuErorState;
}
DIO_enuErrorStatus_t DIO_enuSetPinLogic(DIO_enuPortNumber_t Copy_PortNum , DIO_enuPinNumber_t Copy_PinNUm , DIO_enuSetPinLogic_t Copy_PinLogic)
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
 1a2:	84 e0       	ldi	r24, 0x04	; 4
 1a4:	08 95       	ret
 1a6:	84 e0       	ldi	r24, 0x04	; 4
 1a8:	08 95       	ret
 1aa:	84 e0       	ldi	r24, 0x04	; 4
 1ac:	08 95       	ret
 1ae:	84 e0       	ldi	r24, 0x04	; 4
 1b0:	08 95       	ret
 1b2:	84 e0       	ldi	r24, 0x04	; 4
		
}
	
	return Loc_enuErorState;
	
}
 1b4:	08 95       	ret

000001b6 <EXTI_Init>:

#include "Interrupt.h"
void EXTI_Init(void)
{
	/* Read the current value of MCUCR register for INT0 */
	u8 Loc_u8RegVal_INT0 = MCUCR;
 1b6:	85 b7       	in	r24, 0x35	; 53

	/* Clear the bits related to INT0 in MCUCR using the defined mask */
	Loc_u8RegVal_INT0 &= MCUCR_INT0_MASK;
 1b8:	8c 7f       	andi	r24, 0xFC	; 252

	/* Set the desired sense control for INT0 */
	Loc_u8RegVal_INT0 |= INT0_SENSE_CTRL;
 1ba:	82 60       	ori	r24, 0x02	; 2

	/* Update MCUCR register with the modified value for INT0 */
	MCUCR = Loc_u8RegVal_INT0;
 1bc:	85 bf       	out	0x35, r24	; 53

	/* Read the current value of MCUCR register for INT1 */
	u8 Loc_u8RegVal_INT1 = MCUCR;
 1be:	85 b7       	in	r24, 0x35	; 53

	/* Clear the bits related to INT1 in MCUCR using the defined mask */
	Loc_u8RegVal_INT1 &= MCUCR_INT1_MASK;

	/* Set the desired sense control for INT1 */
	Loc_u8RegVal_INT1 |= INT1_SENSE_CTRL;
 1c0:	8c 60       	ori	r24, 0x0C	; 12

	/* Update MCUCR register with the modified value for INT1 */
	MCUCR = Loc_u8RegVal_INT1;
 1c2:	85 bf       	out	0x35, r24	; 53

	/* Read the current value of MCUCSR register for INT2 */
	u8 Loc_u8RegVal_INT2 = MCUCSR;
 1c4:	84 b7       	in	r24, 0x34	; 52

	/* Clear the bits related to INT2 in MCUCSR using the defined mask */
	Loc_u8RegVal_INT2 &= MCUCSR_INT2_MASK;

	/* Set the desired sense control for INT2 */
	Loc_u8RegVal_INT2 |= INT2_SENSE_CTRL;
 1c6:	80 64       	ori	r24, 0x40	; 64

	/* Update MCUCSR register with the modified value for INT2 */
	MCUCSR = Loc_u8RegVal_INT2;
 1c8:	84 bf       	out	0x34, r24	; 52

	/* Enable or Disable INT0 based on user configuration */
	#if INT0_MODE == EXTI_ENABLE
	SET_BIT(GICR, 6);
 1ca:	8b b7       	in	r24, 0x3b	; 59
 1cc:	80 64       	ori	r24, 0x40	; 64
 1ce:	8b bf       	out	0x3b, r24	; 59
	CLR_BIT(GICR, 6);
	#endif

	/* Enable or Disable INT1 based on user configuration */
	#if INT1_MODE == EXTI_ENABLE
	SET_BIT(GICR, 7);
 1d0:	8b b7       	in	r24, 0x3b	; 59
 1d2:	80 68       	ori	r24, 0x80	; 128
 1d4:	8b bf       	out	0x3b, r24	; 59
	CLR_BIT(GICR, 7);
	#endif

	/* Enable or Disable INT2 based on user configuration */
	#if INT2_MODE == EXTI_ENABLE
	SET_BIT(GICR, 5);
 1d6:	8b b7       	in	r24, 0x3b	; 59
 1d8:	80 62       	ori	r24, 0x20	; 32
 1da:	8b bf       	out	0x3b, r24	; 59
	#elif INT2_MODE == EXTI_DISABLE
	CLR_BIT(GICR, 5);
	#endif

	/* Enable Global Interrupt if not already enabled */
	if (!(SREG & (1 << 7))) {
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	07 fc       	sbrc	r0, 7
 1e0:	03 c0       	rjmp	.+6      	; 0x1e8 <EXTI_Init+0x32>
		SET_BIT(SREG, 7);
 1e2:	8f b7       	in	r24, 0x3f	; 63
 1e4:	80 68       	ori	r24, 0x80	; 128
 1e6:	8f bf       	out	0x3f, r24	; 63
 1e8:	08 95       	ret

000001ea <LED_Init>:
 * Last Update      :       11/12/2023                                                                                                    */
 #include "LED.h"

  extern LED_StrCfg_t LEDS_Arr[NUM_OF_LEDS];
  
 LED_enuErorState LED_Init(void){
 1ea:	1f 93       	push	r17
 1ec:	cf 93       	push	r28
 1ee:	df 93       	push	r29
 1f0:	cd b7       	in	r28, 0x3d	; 61
 1f2:	de b7       	in	r29, 0x3e	; 62
 1f4:	29 97       	sbiw	r28, 0x09	; 9
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	f8 94       	cli
 1fa:	de bf       	out	0x3e, r29	; 62
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	cd bf       	out	0x3d, r28	; 61
	 return Loc_LEDErrorState ;
	 
	 }   */
	
	
	  for(LocU8Counter = 0; LocU8Counter < NUM_OF_LEDS; LocU8Counter++) {
 200:	10 e0       	ldi	r17, 0x00	; 0
  extern LED_StrCfg_t LEDS_Arr[NUM_OF_LEDS];
  
 LED_enuErorState LED_Init(void){
	 
	 LED_enuErorState Loc_LEDErrorState = LED_enusucceeded ;
	 PORT_enuErrorStatus_t Loc_PORTErorState = PORT_enuSucceded ;
 202:	84 e0       	ldi	r24, 0x04	; 4
	 return Loc_LEDErrorState ;
	 
	 }   */
	
	
	  for(LocU8Counter = 0; LocU8Counter < NUM_OF_LEDS; LocU8Counter++) {
 204:	88 c0       	rjmp	.+272    	; 0x316 <LED_Init+0x12c>
    if (LEDS_Arr[LocU8Counter].LED_StrU8PortCfg > NUM_OF_PORTS || LEDS_Arr[LocU8Counter].LED_StrU8PortCfg < LED_PORTA) {
 206:	21 2f       	mov	r18, r17
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	f9 01       	movw	r30, r18
 20c:	ee 0f       	add	r30, r30
 20e:	ff 1f       	adc	r31, r31
 210:	ee 0f       	add	r30, r30
 212:	ff 1f       	adc	r31, r31
 214:	e0 5a       	subi	r30, 0xA0	; 160
 216:	ff 4f       	sbci	r31, 0xFF	; 255
 218:	40 81       	ld	r20, Z
 21a:	45 30       	cpi	r20, 0x05	; 5
 21c:	08 f0       	brcs	.+2      	; 0x220 <LED_Init+0x36>
 21e:	80 c0       	rjmp	.+256    	; 0x320 <LED_Init+0x136>
        Loc_LEDErrorState = LED_enuInvalidPort;
        break;
    }
    else if (LEDS_Arr[LocU8Counter].LED_StrU8PinCFg > LED_PIN7 || LEDS_Arr[LocU8Counter].LED_StrU8PinCFg < LED_PIN0) {
 220:	f9 01       	movw	r30, r18
 222:	ee 0f       	add	r30, r30
 224:	ff 1f       	adc	r31, r31
 226:	ee 0f       	add	r30, r30
 228:	ff 1f       	adc	r31, r31
 22a:	e0 5a       	subi	r30, 0xA0	; 160
 22c:	ff 4f       	sbci	r31, 0xFF	; 255
 22e:	61 81       	ldd	r22, Z+1	; 0x01
 230:	68 30       	cpi	r22, 0x08	; 8
 232:	08 f0       	brcs	.+2      	; 0x236 <LED_Init+0x4c>
 234:	77 c0       	rjmp	.+238    	; 0x324 <LED_Init+0x13a>
        Loc_LEDErrorState = LED_enuInvalidPin;
        break;
    }
    else if (LEDS_Arr[LocU8Counter].LED_StrU8ActiveState != ACTIVE_HIGH && LEDS_Arr[LocU8Counter].LED_StrU8ActiveState != ACTIVE_LOW) {
 236:	f9 01       	movw	r30, r18
 238:	ee 0f       	add	r30, r30
 23a:	ff 1f       	adc	r31, r31
 23c:	ee 0f       	add	r30, r30
 23e:	ff 1f       	adc	r31, r31
 240:	e0 5a       	subi	r30, 0xA0	; 160
 242:	ff 4f       	sbci	r31, 0xFF	; 255
 244:	92 81       	ldd	r25, Z+2	; 0x02
 246:	92 30       	cpi	r25, 0x02	; 2
 248:	08 f0       	brcs	.+2      	; 0x24c <LED_Init+0x62>
 24a:	6e c0       	rjmp	.+220    	; 0x328 <LED_Init+0x13e>
        Loc_LEDErrorState = LED_enuInvalidActiveState;
        break;
    }
    else if (LEDS_Arr[LocU8Counter].LED_StrU8OnOffState != LED_ON_STATE && LEDS_Arr[LocU8Counter].LED_StrU8OnOffState != LED_OFF_STATE) {
 24c:	f9 01       	movw	r30, r18
 24e:	ee 0f       	add	r30, r30
 250:	ff 1f       	adc	r31, r31
 252:	ee 0f       	add	r30, r30
 254:	ff 1f       	adc	r31, r31
 256:	e0 5a       	subi	r30, 0xA0	; 160
 258:	ff 4f       	sbci	r31, 0xFF	; 255
 25a:	53 81       	ldd	r21, Z+3	; 0x03
 25c:	52 30       	cpi	r21, 0x02	; 2
 25e:	08 f0       	brcs	.+2      	; 0x262 <LED_Init+0x78>
 260:	65 c0       	rjmp	.+202    	; 0x32c <LED_Init+0x142>
        Loc_LEDErrorState = LED_enuInvalidLogicState;
        break;
    }
    else {
        Loc_Str_CurrLED_Arr[LocU8Counter].PORT_StrU8PortNum = LEDS_Arr[LocU8Counter].LED_StrU8PortCfg;
 262:	f9 01       	movw	r30, r18
 264:	ee 0f       	add	r30, r30
 266:	ff 1f       	adc	r31, r31
 268:	e2 0f       	add	r30, r18
 26a:	f3 1f       	adc	r31, r19
 26c:	a1 e0       	ldi	r26, 0x01	; 1
 26e:	b0 e0       	ldi	r27, 0x00	; 0
 270:	ac 0f       	add	r26, r28
 272:	bd 1f       	adc	r27, r29
 274:	ea 0f       	add	r30, r26
 276:	fb 1f       	adc	r31, r27
 278:	40 83       	st	Z, r20
        Loc_Str_CurrLED_Arr[LocU8Counter].PORT_StrU8PinNum = LEDS_Arr[LocU8Counter].LED_StrU8PinCFg;
 27a:	61 83       	std	Z+1, r22	; 0x01
      switch (LEDS_Arr[LocU8Counter].LED_StrU8ActiveState) {
 27c:	99 23       	and	r25, r25
 27e:	f1 f0       	breq	.+60     	; 0x2bc <LED_Init+0xd2>
 280:	91 30       	cpi	r25, 0x01	; 1
 282:	d9 f5       	brne	.+118    	; 0x2fa <LED_Init+0x110>
    case ACTIVE_HIGH:
        switch (LEDS_Arr[LocU8Counter].LED_StrU8OnOffState) {
 284:	55 23       	and	r21, r21
 286:	61 f0       	breq	.+24     	; 0x2a0 <LED_Init+0xb6>
 288:	51 30       	cpi	r21, 0x01	; 1
 28a:	b9 f5       	brne	.+110    	; 0x2fa <LED_Init+0x110>
            case LED_ON_STATE:
                Loc_Str_CurrLED_Arr[LocU8Counter].PORT_StrU8PinCfg = PORT_enuOutput_High;
 28c:	f9 01       	movw	r30, r18
 28e:	ee 0f       	add	r30, r30
 290:	ff 1f       	adc	r31, r31
 292:	e2 0f       	add	r30, r18
 294:	f3 1f       	adc	r31, r19
 296:	ea 0f       	add	r30, r26
 298:	fb 1f       	adc	r31, r27
 29a:	83 e0       	ldi	r24, 0x03	; 3
 29c:	82 83       	std	Z+2, r24	; 0x02
                break;
 29e:	2d c0       	rjmp	.+90     	; 0x2fa <LED_Init+0x110>
            case LED_OFF_STATE:
                Loc_Str_CurrLED_Arr[LocU8Counter].PORT_StrU8PinCfg = PORT_enuOutput_Low;
 2a0:	f9 01       	movw	r30, r18
 2a2:	ee 0f       	add	r30, r30
 2a4:	ff 1f       	adc	r31, r31
 2a6:	e2 0f       	add	r30, r18
 2a8:	f3 1f       	adc	r31, r19
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	8c 0f       	add	r24, r28
 2b0:	9d 1f       	adc	r25, r29
 2b2:	e8 0f       	add	r30, r24
 2b4:	f9 1f       	adc	r31, r25
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	82 83       	std	Z+2, r24	; 0x02
                break;
 2ba:	1f c0       	rjmp	.+62     	; 0x2fa <LED_Init+0x110>
        }
        break;

    case ACTIVE_LOW:
        switch (LEDS_Arr[LocU8Counter].LED_StrU8OnOffState) {
 2bc:	55 23       	and	r21, r21
 2be:	81 f0       	breq	.+32     	; 0x2e0 <LED_Init+0xf6>
 2c0:	51 30       	cpi	r21, 0x01	; 1
 2c2:	d9 f4       	brne	.+54     	; 0x2fa <LED_Init+0x110>
            case LED_ON_STATE:
                Loc_Str_CurrLED_Arr[LocU8Counter].PORT_StrU8PinCfg = PORT_enuOutput_Low;
 2c4:	f9 01       	movw	r30, r18
 2c6:	ee 0f       	add	r30, r30
 2c8:	ff 1f       	adc	r31, r31
 2ca:	e2 0f       	add	r30, r18
 2cc:	f3 1f       	adc	r31, r19
 2ce:	a1 e0       	ldi	r26, 0x01	; 1
 2d0:	b0 e0       	ldi	r27, 0x00	; 0
 2d2:	ac 0f       	add	r26, r28
 2d4:	bd 1f       	adc	r27, r29
 2d6:	ea 0f       	add	r30, r26
 2d8:	fb 1f       	adc	r31, r27
 2da:	82 e0       	ldi	r24, 0x02	; 2
 2dc:	82 83       	std	Z+2, r24	; 0x02
                break;
 2de:	0d c0       	rjmp	.+26     	; 0x2fa <LED_Init+0x110>
            case LED_OFF_STATE:
                Loc_Str_CurrLED_Arr[LocU8Counter].PORT_StrU8PinCfg = PORT_enuOutput_High;
 2e0:	f9 01       	movw	r30, r18
 2e2:	ee 0f       	add	r30, r30
 2e4:	ff 1f       	adc	r31, r31
 2e6:	e2 0f       	add	r30, r18
 2e8:	f3 1f       	adc	r31, r19
 2ea:	81 e0       	ldi	r24, 0x01	; 1
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	8c 0f       	add	r24, r28
 2f0:	9d 1f       	adc	r25, r29
 2f2:	e8 0f       	add	r30, r24
 2f4:	f9 1f       	adc	r31, r25
 2f6:	83 e0       	ldi	r24, 0x03	; 3
 2f8:	82 83       	std	Z+2, r24	; 0x02
        }
        break;
}


        Loc_PORTErorState = PORT_enuSetPinConfiguration(&Loc_Str_CurrLED_Arr[LocU8Counter]);
 2fa:	c9 01       	movw	r24, r18
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	82 0f       	add	r24, r18
 302:	93 1f       	adc	r25, r19
 304:	a1 e0       	ldi	r26, 0x01	; 1
 306:	b0 e0       	ldi	r27, 0x00	; 0
 308:	ac 0f       	add	r26, r28
 30a:	bd 1f       	adc	r27, r29
 30c:	8a 0f       	add	r24, r26
 30e:	9b 1f       	adc	r25, r27
 310:	0e 94 81 02 	call	0x502	; 0x502 <PORT_enuSetPinConfiguration>
	 return Loc_LEDErrorState ;
	 
	 }   */
	
	
	  for(LocU8Counter = 0; LocU8Counter < NUM_OF_LEDS; LocU8Counter++) {
 314:	1f 5f       	subi	r17, 0xFF	; 255
 316:	13 30       	cpi	r17, 0x03	; 3
 318:	08 f4       	brcc	.+2      	; 0x31c <LED_Init+0x132>
 31a:	75 cf       	rjmp	.-278    	; 0x206 <LED_Init+0x1c>

  extern LED_StrCfg_t LEDS_Arr[NUM_OF_LEDS];
  
 LED_enuErorState LED_Init(void){
	 
	 LED_enuErorState Loc_LEDErrorState = LED_enusucceeded ;
 31c:	94 e0       	ldi	r25, 0x04	; 4
 31e:	07 c0       	rjmp	.+14     	; 0x32e <LED_Init+0x144>
	 }   */
	
	
	  for(LocU8Counter = 0; LocU8Counter < NUM_OF_LEDS; LocU8Counter++) {
    if (LEDS_Arr[LocU8Counter].LED_StrU8PortCfg > NUM_OF_PORTS || LEDS_Arr[LocU8Counter].LED_StrU8PortCfg < LED_PORTA) {
        Loc_LEDErrorState = LED_enuInvalidPort;
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	05 c0       	rjmp	.+10     	; 0x32e <LED_Init+0x144>
        break;
    }
    else if (LEDS_Arr[LocU8Counter].LED_StrU8PinCFg > LED_PIN7 || LEDS_Arr[LocU8Counter].LED_StrU8PinCFg < LED_PIN0) {
        Loc_LEDErrorState = LED_enuInvalidPin;
 324:	91 e0       	ldi	r25, 0x01	; 1
 326:	03 c0       	rjmp	.+6      	; 0x32e <LED_Init+0x144>
        break;
    }
    else if (LEDS_Arr[LocU8Counter].LED_StrU8ActiveState != ACTIVE_HIGH && LEDS_Arr[LocU8Counter].LED_StrU8ActiveState != ACTIVE_LOW) {
        Loc_LEDErrorState = LED_enuInvalidActiveState;
 328:	92 e0       	ldi	r25, 0x02	; 2
 32a:	01 c0       	rjmp	.+2      	; 0x32e <LED_Init+0x144>
        break;
    }
    else if (LEDS_Arr[LocU8Counter].LED_StrU8OnOffState != LED_ON_STATE && LEDS_Arr[LocU8Counter].LED_StrU8OnOffState != LED_OFF_STATE) {
        Loc_LEDErrorState = LED_enuInvalidLogicState;
 32c:	93 e0       	ldi	r25, 0x03	; 3

        Loc_PORTErorState = PORT_enuSetPinConfiguration(&Loc_Str_CurrLED_Arr[LocU8Counter]);
    }
}

if (Loc_PORTErorState != PORT_enuSucceded) {
 32e:	84 30       	cpi	r24, 0x04	; 4
 330:	09 f0       	breq	.+2      	; 0x334 <LED_Init+0x14a>
    Loc_LEDErrorState = LED_enuPortNOK;
 332:	95 e0       	ldi	r25, 0x05	; 5
}

return Loc_LEDErrorState;

 }
 334:	89 2f       	mov	r24, r25
 336:	29 96       	adiw	r28, 0x09	; 9
 338:	0f b6       	in	r0, 0x3f	; 63
 33a:	f8 94       	cli
 33c:	de bf       	out	0x3e, r29	; 62
 33e:	0f be       	out	0x3f, r0	; 63
 340:	cd bf       	out	0x3d, r28	; 61
 342:	df 91       	pop	r29
 344:	cf 91       	pop	r28
 346:	1f 91       	pop	r17
 348:	08 95       	ret

0000034a <LED_enuSetLedState>:

LED_enuErorState LED_enuSetLedState (u8 Copy_u8LedName , u8 Copy_u8LedState)
{
	LED_enuErorState Loc_enuErorState = LED_enusucceeded ;
	DIO_enuErrorStatus_t Loc_enuDioEror = DIO_enuSucceded;
   if (Copy_u8LedName > NUM_OF_LEDS)
 34a:	84 30       	cpi	r24, 0x04	; 4
 34c:	08 f0       	brcs	.+2      	; 0x350 <LED_enuSetLedState+0x6>
 34e:	5a c0       	rjmp	.+180    	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
   {
	   
	Loc_enuErorState = LED_enuInvalidName ;
	
   }
   else if (Copy_u8LedState != LED_ON_STATE  && Copy_u8LedState != LED_OFF_STATE )
 350:	62 30       	cpi	r22, 0x02	; 2
 352:	08 f0       	brcs	.+2      	; 0x356 <LED_enuSetLedState+0xc>
 354:	59 c0       	rjmp	.+178    	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
	   
   }
   else
    {
	   
    if (Copy_u8LedState == LED_ON_STATE)
 356:	61 30       	cpi	r22, 0x01	; 1
 358:	41 f5       	brne	.+80     	; 0x3aa <LED_enuSetLedState+0x60>
	 {
		 switch (LEDS_Arr[Copy_u8LedName].LED_StrU8ActiveState)
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	fc 01       	movw	r30, r24
 35e:	ee 0f       	add	r30, r30
 360:	ff 1f       	adc	r31, r31
 362:	ee 0f       	add	r30, r30
 364:	ff 1f       	adc	r31, r31
 366:	e0 5a       	subi	r30, 0xA0	; 160
 368:	ff 4f       	sbci	r31, 0xFF	; 255
 36a:	22 81       	ldd	r18, Z+2	; 0x02
 36c:	22 23       	and	r18, r18
 36e:	81 f0       	breq	.+32     	; 0x390 <LED_enuSetLedState+0x46>
 370:	21 30       	cpi	r18, 0x01	; 1
 372:	09 f0       	breq	.+2      	; 0x376 <LED_enuSetLedState+0x2c>
 374:	41 c0       	rjmp	.+130    	; 0x3f8 <LED_enuSetLedState+0xae>
		 {
			case (ACTIVE_HIGH):
		          Loc_enuDioEror=DIO_enuSetPinLogic(LEDS_Arr[Copy_u8LedName].LED_StrU8PortCfg ,LEDS_Arr[Copy_u8LedName].LED_StrU8PinCFg ,DIO_enuLogicHigh);
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	88 0f       	add	r24, r24
 37c:	99 1f       	adc	r25, r25
 37e:	fc 01       	movw	r30, r24
 380:	e0 5a       	subi	r30, 0xA0	; 160
 382:	ff 4f       	sbci	r31, 0xFF	; 255
 384:	61 81       	ldd	r22, Z+1	; 0x01
 386:	41 e0       	ldi	r20, 0x01	; 1
 388:	80 81       	ld	r24, Z
 38a:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuSetPinLogic>
				   break ;
 38e:	37 c0       	rjmp	.+110    	; 0x3fe <LED_enuSetLedState+0xb4>
	        case(ACTIVE_LOW):
			      Loc_enuDioEror=DIO_enuSetPinLogic(LEDS_Arr[Copy_u8LedName].LED_StrU8PortCfg ,LEDS_Arr[Copy_u8LedName].LED_StrU8PinCFg ,DIO_enuLogicLow);
 390:	88 0f       	add	r24, r24
 392:	99 1f       	adc	r25, r25
 394:	88 0f       	add	r24, r24
 396:	99 1f       	adc	r25, r25
 398:	fc 01       	movw	r30, r24
 39a:	e0 5a       	subi	r30, 0xA0	; 160
 39c:	ff 4f       	sbci	r31, 0xFF	; 255
 39e:	61 81       	ldd	r22, Z+1	; 0x01
 3a0:	40 e0       	ldi	r20, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuSetPinLogic>
				   break ;
 3a8:	2a c0       	rjmp	.+84     	; 0x3fe <LED_enuSetLedState+0xb4>
         }
     }
	else
	{
		switch (LEDS_Arr[Copy_u8LedName].LED_StrU8ActiveState)
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	fc 01       	movw	r30, r24
 3ae:	ee 0f       	add	r30, r30
 3b0:	ff 1f       	adc	r31, r31
 3b2:	ee 0f       	add	r30, r30
 3b4:	ff 1f       	adc	r31, r31
 3b6:	e0 5a       	subi	r30, 0xA0	; 160
 3b8:	ff 4f       	sbci	r31, 0xFF	; 255
 3ba:	22 81       	ldd	r18, Z+2	; 0x02
 3bc:	22 23       	and	r18, r18
 3be:	79 f0       	breq	.+30     	; 0x3de <LED_enuSetLedState+0x94>
 3c0:	21 30       	cpi	r18, 0x01	; 1
 3c2:	e1 f4       	brne	.+56     	; 0x3fc <LED_enuSetLedState+0xb2>
		{
			case (ACTIVE_HIGH):
			Loc_enuDioEror=DIO_enuSetPinLogic(LEDS_Arr[Copy_u8LedName].LED_StrU8PortCfg ,LEDS_Arr[Copy_u8LedName].LED_StrU8PinCFg ,DIO_enuLogicLow);
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	88 0f       	add	r24, r24
 3ca:	99 1f       	adc	r25, r25
 3cc:	fc 01       	movw	r30, r24
 3ce:	e0 5a       	subi	r30, 0xA0	; 160
 3d0:	ff 4f       	sbci	r31, 0xFF	; 255
 3d2:	61 81       	ldd	r22, Z+1	; 0x01
 3d4:	40 e0       	ldi	r20, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuSetPinLogic>
			 break ;
 3dc:	10 c0       	rjmp	.+32     	; 0x3fe <LED_enuSetLedState+0xb4>
			case(ACTIVE_LOW):
			Loc_enuDioEror=DIO_enuSetPinLogic(LEDS_Arr[Copy_u8LedName].LED_StrU8PortCfg ,LEDS_Arr[Copy_u8LedName].LED_StrU8PinCFg ,DIO_enuLogicHigh);
 3de:	88 0f       	add	r24, r24
 3e0:	99 1f       	adc	r25, r25
 3e2:	88 0f       	add	r24, r24
 3e4:	99 1f       	adc	r25, r25
 3e6:	fc 01       	movw	r30, r24
 3e8:	e0 5a       	subi	r30, 0xA0	; 160
 3ea:	ff 4f       	sbci	r31, 0xFF	; 255
 3ec:	61 81       	ldd	r22, Z+1	; 0x01
 3ee:	41 e0       	ldi	r20, 0x01	; 1
 3f0:	80 81       	ld	r24, Z
 3f2:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuSetPinLogic>
		     break ;
 3f6:	03 c0       	rjmp	.+6      	; 0x3fe <LED_enuSetLedState+0xb4>
 }

LED_enuErorState LED_enuSetLedState (u8 Copy_u8LedName , u8 Copy_u8LedState)
{
	LED_enuErorState Loc_enuErorState = LED_enusucceeded ;
	DIO_enuErrorStatus_t Loc_enuDioEror = DIO_enuSucceded;
 3f8:	84 e0       	ldi	r24, 0x04	; 4
 3fa:	01 c0       	rjmp	.+2      	; 0x3fe <LED_enuSetLedState+0xb4>
 3fc:	84 e0       	ldi	r24, 0x04	; 4
		
		
	} 
	
   
   if (Loc_enuDioEror != DIO_enuSucceded)
 3fe:	84 30       	cpi	r24, 0x04	; 4
 400:	29 f4       	brne	.+10     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 402:	08 95       	ret
	LED_enuErorState Loc_enuErorState = LED_enusucceeded ;
	DIO_enuErrorStatus_t Loc_enuDioEror = DIO_enuSucceded;
   if (Copy_u8LedName > NUM_OF_LEDS)
   {
	   
	Loc_enuErorState = LED_enuInvalidName ;
 404:	87 e0       	ldi	r24, 0x07	; 7
 406:	08 95       	ret
	
   }
   else if (Copy_u8LedState != LED_ON_STATE  && Copy_u8LedState != LED_OFF_STATE )
   {
	  
	  Loc_enuErorState = LED_enuInvalidLogicState ;
 408:	83 e0       	ldi	r24, 0x03	; 3
 40a:	08 95       	ret
	
   
   if (Loc_enuDioEror != DIO_enuSucceded)
   {
	   
	   Loc_enuErorState = LED_enuDioNOK ;
 40c:	86 e0       	ldi	r24, 0x06	; 6
   }
   
	
 }
return Loc_enuErorState ;
}
 40e:	08 95       	ret

00000410 <main>:



int main(void)
{
    LED_Init();
 410:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LED_Init>
    SWITCH_Init();
 414:	0e 94 4d 04 	call	0x89a	; 0x89a <SWITCH_Init>
    EXTI_Init();
 418:	0e 94 db 00 	call	0x1b6	; 0x1b6 <EXTI_Init>
 41c:	ff cf       	rjmp	.-2      	; 0x41c <main+0xc>

0000041e <__vector_1>:
    }
	return 0 ;
}
// ISR for INT0
void __vector_1(void)
{
 41e:	1f 92       	push	r1
 420:	0f 92       	push	r0
 422:	0f b6       	in	r0, 0x3f	; 63
 424:	0f 92       	push	r0
 426:	11 24       	eor	r1, r1
 428:	2f 93       	push	r18
 42a:	3f 93       	push	r19
 42c:	4f 93       	push	r20
 42e:	5f 93       	push	r21
 430:	6f 93       	push	r22
 432:	7f 93       	push	r23
 434:	8f 93       	push	r24
 436:	9f 93       	push	r25
 438:	af 93       	push	r26
 43a:	bf 93       	push	r27
 43c:	ef 93       	push	r30
 43e:	ff 93       	push	r31
	 LED_enuSetLedState(LED_NO_ZERO , LED_ON_STATE);
 440:	61 e0       	ldi	r22, 0x01	; 1
 442:	80 e0       	ldi	r24, 0x00	; 0
 444:	0e 94 a5 01 	call	0x34a	; 0x34a <LED_enuSetLedState>
}
 448:	ff 91       	pop	r31
 44a:	ef 91       	pop	r30
 44c:	bf 91       	pop	r27
 44e:	af 91       	pop	r26
 450:	9f 91       	pop	r25
 452:	8f 91       	pop	r24
 454:	7f 91       	pop	r23
 456:	6f 91       	pop	r22
 458:	5f 91       	pop	r21
 45a:	4f 91       	pop	r20
 45c:	3f 91       	pop	r19
 45e:	2f 91       	pop	r18
 460:	0f 90       	pop	r0
 462:	0f be       	out	0x3f, r0	; 63
 464:	0f 90       	pop	r0
 466:	1f 90       	pop	r1
 468:	18 95       	reti

0000046a <__vector_2>:

// ISR for INT1
void __vector_2(void)
{
 46a:	1f 92       	push	r1
 46c:	0f 92       	push	r0
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	0f 92       	push	r0
 472:	11 24       	eor	r1, r1
 474:	2f 93       	push	r18
 476:	3f 93       	push	r19
 478:	4f 93       	push	r20
 47a:	5f 93       	push	r21
 47c:	6f 93       	push	r22
 47e:	7f 93       	push	r23
 480:	8f 93       	push	r24
 482:	9f 93       	push	r25
 484:	af 93       	push	r26
 486:	bf 93       	push	r27
 488:	ef 93       	push	r30
 48a:	ff 93       	push	r31
	 LED_enuSetLedState(LED_NO_ONE , LED_ON_STATE);
 48c:	61 e0       	ldi	r22, 0x01	; 1
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	0e 94 a5 01 	call	0x34a	; 0x34a <LED_enuSetLedState>
}
 494:	ff 91       	pop	r31
 496:	ef 91       	pop	r30
 498:	bf 91       	pop	r27
 49a:	af 91       	pop	r26
 49c:	9f 91       	pop	r25
 49e:	8f 91       	pop	r24
 4a0:	7f 91       	pop	r23
 4a2:	6f 91       	pop	r22
 4a4:	5f 91       	pop	r21
 4a6:	4f 91       	pop	r20
 4a8:	3f 91       	pop	r19
 4aa:	2f 91       	pop	r18
 4ac:	0f 90       	pop	r0
 4ae:	0f be       	out	0x3f, r0	; 63
 4b0:	0f 90       	pop	r0
 4b2:	1f 90       	pop	r1
 4b4:	18 95       	reti

000004b6 <__vector_3>:

// ISR for INT2
void __vector_3(void)
{
 4b6:	1f 92       	push	r1
 4b8:	0f 92       	push	r0
 4ba:	0f b6       	in	r0, 0x3f	; 63
 4bc:	0f 92       	push	r0
 4be:	11 24       	eor	r1, r1
 4c0:	2f 93       	push	r18
 4c2:	3f 93       	push	r19
 4c4:	4f 93       	push	r20
 4c6:	5f 93       	push	r21
 4c8:	6f 93       	push	r22
 4ca:	7f 93       	push	r23
 4cc:	8f 93       	push	r24
 4ce:	9f 93       	push	r25
 4d0:	af 93       	push	r26
 4d2:	bf 93       	push	r27
 4d4:	ef 93       	push	r30
 4d6:	ff 93       	push	r31
	 LED_enuSetLedState(LED_NO_TWO , LED_ON_STATE);
 4d8:	61 e0       	ldi	r22, 0x01	; 1
 4da:	82 e0       	ldi	r24, 0x02	; 2
 4dc:	0e 94 a5 01 	call	0x34a	; 0x34a <LED_enuSetLedState>
}
 4e0:	ff 91       	pop	r31
 4e2:	ef 91       	pop	r30
 4e4:	bf 91       	pop	r27
 4e6:	af 91       	pop	r26
 4e8:	9f 91       	pop	r25
 4ea:	8f 91       	pop	r24
 4ec:	7f 91       	pop	r23
 4ee:	6f 91       	pop	r22
 4f0:	5f 91       	pop	r21
 4f2:	4f 91       	pop	r20
 4f4:	3f 91       	pop	r19
 4f6:	2f 91       	pop	r18
 4f8:	0f 90       	pop	r0
 4fa:	0f be       	out	0x3f, r0	; 63
 4fc:	0f 90       	pop	r0
 4fe:	1f 90       	pop	r1
 500:	18 95       	reti

00000502 <PORT_enuSetPinConfiguration>:
				
			}
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
 502:	fc 01       	movw	r30, r24
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
	 
	 if (Add_StrPortCfg->PORT_StrU8PortNum > NUM_OF_PORTS || Add_StrPortCfg->PORT_StrU8PortNum < PORT_enuPortA  )
 504:	80 81       	ld	r24, Z
 506:	85 30       	cpi	r24, 0x05	; 5
 508:	08 f0       	brcs	.+2      	; 0x50c <PORT_enuSetPinConfiguration+0xa>
 50a:	b7 c1       	rjmp	.+878    	; 0x87a <__stack+0x1b>
	 {
		 Loc_enuErorState= PORT_enuInvalidPortNumber;
	 }
	 else if (Add_StrPortCfg->PORT_StrU8PinNum > PORT_enuPin7 || Add_StrPortCfg->PORT_StrU8PinNum < PORT_enuPin0)
 50c:	91 81       	ldd	r25, Z+1	; 0x01
 50e:	98 30       	cpi	r25, 0x08	; 8
 510:	08 f0       	brcs	.+2      	; 0x514 <PORT_enuSetPinConfiguration+0x12>
 512:	b5 c1       	rjmp	.+874    	; 0x87e <__stack+0x1f>
	 {
		 Loc_enuErorState=  PORT_enuInvalidPinNumber;
	 }
	 else if  (Add_StrPortCfg->PORT_StrU8PinCfg > PORT_enuOutput_High || Add_StrPortCfg->PORT_StrU8PinCfg < PORT_enuInputInternalPullUP)
 514:	22 81       	ldd	r18, Z+2	; 0x02
 516:	24 30       	cpi	r18, 0x04	; 4
 518:	08 f0       	brcs	.+2      	; 0x51c <PORT_enuSetPinConfiguration+0x1a>
 51a:	b3 c1       	rjmp	.+870    	; 0x882 <__stack+0x23>
	 }
	 
	 else
	 {
		 
		 switch(Add_StrPortCfg->PORT_StrU8PortNum)
 51c:	81 30       	cpi	r24, 0x01	; 1
 51e:	09 f4       	brne	.+2      	; 0x522 <PORT_enuSetPinConfiguration+0x20>
 520:	71 c0       	rjmp	.+226    	; 0x604 <PORT_enuSetPinConfiguration+0x102>
 522:	38 f0       	brcs	.+14     	; 0x532 <PORT_enuSetPinConfiguration+0x30>
 524:	82 30       	cpi	r24, 0x02	; 2
 526:	09 f4       	brne	.+2      	; 0x52a <PORT_enuSetPinConfiguration+0x28>
 528:	d6 c0       	rjmp	.+428    	; 0x6d6 <PORT_enuSetPinConfiguration+0x1d4>
 52a:	83 30       	cpi	r24, 0x03	; 3
 52c:	09 f4       	brne	.+2      	; 0x530 <PORT_enuSetPinConfiguration+0x2e>
 52e:	3c c1       	rjmp	.+632    	; 0x7a8 <PORT_enuSetPinConfiguration+0x2a6>
 530:	aa c1       	rjmp	.+852    	; 0x886 <__stack+0x27>
		 {
			 case PORT_enuPortA :
			 
			 switch(Add_StrPortCfg->PORT_StrU8PinCfg)
 532:	21 30       	cpi	r18, 0x01	; 1
 534:	09 f4       	brne	.+2      	; 0x538 <PORT_enuSetPinConfiguration+0x36>
 536:	4d c0       	rjmp	.+154    	; 0x5d2 <PORT_enuSetPinConfiguration+0xd0>
 538:	a0 f1       	brcs	.+104    	; 0x5a2 <PORT_enuSetPinConfiguration+0xa0>
 53a:	22 30       	cpi	r18, 0x02	; 2
 53c:	19 f0       	breq	.+6      	; 0x544 <PORT_enuSetPinConfiguration+0x42>
 53e:	23 30       	cpi	r18, 0x03	; 3
 540:	c9 f0       	breq	.+50     	; 0x574 <PORT_enuSetPinConfiguration+0x72>
 542:	a3 c1       	rjmp	.+838    	; 0x88a <__stack+0x2b>
			 {
				 
				 case PORT_enuOutput_Low:
				 SET_BIT(DDRA,Add_StrPortCfg->PORT_StrU8PinNum);
 544:	4a b3       	in	r20, 0x1a	; 26
 546:	21 e0       	ldi	r18, 0x01	; 1
 548:	30 e0       	ldi	r19, 0x00	; 0
 54a:	b9 01       	movw	r22, r18
 54c:	02 c0       	rjmp	.+4      	; 0x552 <PORT_enuSetPinConfiguration+0x50>
 54e:	66 0f       	add	r22, r22
 550:	77 1f       	adc	r23, r23
 552:	9a 95       	dec	r25
 554:	e2 f7       	brpl	.-8      	; 0x54e <PORT_enuSetPinConfiguration+0x4c>
 556:	cb 01       	movw	r24, r22
 558:	84 2b       	or	r24, r20
 55a:	8a bb       	out	0x1a, r24	; 26
				 CLR_BIT(PORTA,Add_StrPortCfg->PORT_StrU8PinNum);
 55c:	8b b3       	in	r24, 0x1b	; 27
 55e:	01 80       	ldd	r0, Z+1	; 0x01
 560:	02 c0       	rjmp	.+4      	; 0x566 <PORT_enuSetPinConfiguration+0x64>
 562:	22 0f       	add	r18, r18
 564:	33 1f       	adc	r19, r19
 566:	0a 94       	dec	r0
 568:	e2 f7       	brpl	.-8      	; 0x562 <PORT_enuSetPinConfiguration+0x60>
 56a:	20 95       	com	r18
 56c:	28 23       	and	r18, r24
 56e:	2b bb       	out	0x1b, r18	; 27
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 570:	84 e0       	ldi	r24, 0x04	; 4
				 
				 case PORT_enuOutput_Low:
				 SET_BIT(DDRA,Add_StrPortCfg->PORT_StrU8PinNum);
				 CLR_BIT(PORTA,Add_StrPortCfg->PORT_StrU8PinNum);
				 
				 break;
 572:	08 95       	ret
				 case PORT_enuOutput_High:
				 SET_BIT(DDRA,Add_StrPortCfg->PORT_StrU8PinNum);
 574:	4a b3       	in	r20, 0x1a	; 26
 576:	21 e0       	ldi	r18, 0x01	; 1
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	b9 01       	movw	r22, r18
 57c:	02 c0       	rjmp	.+4      	; 0x582 <PORT_enuSetPinConfiguration+0x80>
 57e:	66 0f       	add	r22, r22
 580:	77 1f       	adc	r23, r23
 582:	9a 95       	dec	r25
 584:	e2 f7       	brpl	.-8      	; 0x57e <PORT_enuSetPinConfiguration+0x7c>
 586:	cb 01       	movw	r24, r22
 588:	84 2b       	or	r24, r20
 58a:	8a bb       	out	0x1a, r24	; 26
				 SET_BIT(PORTA,Add_StrPortCfg->PORT_StrU8PinNum);
 58c:	8b b3       	in	r24, 0x1b	; 27
 58e:	01 80       	ldd	r0, Z+1	; 0x01
 590:	02 c0       	rjmp	.+4      	; 0x596 <PORT_enuSetPinConfiguration+0x94>
 592:	22 0f       	add	r18, r18
 594:	33 1f       	adc	r19, r19
 596:	0a 94       	dec	r0
 598:	e2 f7       	brpl	.-8      	; 0x592 <PORT_enuSetPinConfiguration+0x90>
 59a:	28 2b       	or	r18, r24
 59c:	2b bb       	out	0x1b, r18	; 27
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 59e:	84 e0       	ldi	r24, 0x04	; 4
				 break;
				 case PORT_enuOutput_High:
				 SET_BIT(DDRA,Add_StrPortCfg->PORT_StrU8PinNum);
				 SET_BIT(PORTA,Add_StrPortCfg->PORT_StrU8PinNum);
				 
				 break;
 5a0:	08 95       	ret
				 case PORT_enuInputInternalPullUP:
				 CLR_BIT(DDRA,Add_StrPortCfg->PORT_StrU8PinNum);
 5a2:	4a b3       	in	r20, 0x1a	; 26
 5a4:	21 e0       	ldi	r18, 0x01	; 1
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	b9 01       	movw	r22, r18
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <PORT_enuSetPinConfiguration+0xae>
 5ac:	66 0f       	add	r22, r22
 5ae:	77 1f       	adc	r23, r23
 5b0:	9a 95       	dec	r25
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <PORT_enuSetPinConfiguration+0xaa>
 5b4:	cb 01       	movw	r24, r22
 5b6:	80 95       	com	r24
 5b8:	84 23       	and	r24, r20
 5ba:	8a bb       	out	0x1a, r24	; 26
				 SET_BIT(PORTA,Add_StrPortCfg->PORT_StrU8PinNum);
 5bc:	8b b3       	in	r24, 0x1b	; 27
 5be:	01 80       	ldd	r0, Z+1	; 0x01
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <PORT_enuSetPinConfiguration+0xc4>
 5c2:	22 0f       	add	r18, r18
 5c4:	33 1f       	adc	r19, r19
 5c6:	0a 94       	dec	r0
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <PORT_enuSetPinConfiguration+0xc0>
 5ca:	28 2b       	or	r18, r24
 5cc:	2b bb       	out	0x1b, r18	; 27
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 5ce:	84 e0       	ldi	r24, 0x04	; 4
				 
				 break;
				 case PORT_enuInputInternalPullUP:
				 CLR_BIT(DDRA,Add_StrPortCfg->PORT_StrU8PinNum);
				 SET_BIT(PORTA,Add_StrPortCfg->PORT_StrU8PinNum);
				 break;
 5d0:	08 95       	ret
				 case PORT_enuInputExternalPullDown:
				 CLR_BIT(DDRA,Add_StrPortCfg->PORT_StrU8PinNum);
 5d2:	4a b3       	in	r20, 0x1a	; 26
 5d4:	21 e0       	ldi	r18, 0x01	; 1
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	b9 01       	movw	r22, r18
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <PORT_enuSetPinConfiguration+0xde>
 5dc:	66 0f       	add	r22, r22
 5de:	77 1f       	adc	r23, r23
 5e0:	9a 95       	dec	r25
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <PORT_enuSetPinConfiguration+0xda>
 5e4:	cb 01       	movw	r24, r22
 5e6:	80 95       	com	r24
 5e8:	84 23       	and	r24, r20
 5ea:	8a bb       	out	0x1a, r24	; 26
				 CLR_BIT(PORTA,Add_StrPortCfg->PORT_StrU8PinNum);
 5ec:	8b b3       	in	r24, 0x1b	; 27
 5ee:	01 80       	ldd	r0, Z+1	; 0x01
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <PORT_enuSetPinConfiguration+0xf4>
 5f2:	22 0f       	add	r18, r18
 5f4:	33 1f       	adc	r19, r19
 5f6:	0a 94       	dec	r0
 5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <PORT_enuSetPinConfiguration+0xf0>
 5fa:	20 95       	com	r18
 5fc:	28 23       	and	r18, r24
 5fe:	2b bb       	out	0x1b, r18	; 27
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 600:	84 e0       	ldi	r24, 0x04	; 4
				 SET_BIT(PORTA,Add_StrPortCfg->PORT_StrU8PinNum);
				 break;
				 case PORT_enuInputExternalPullDown:
				 CLR_BIT(DDRA,Add_StrPortCfg->PORT_StrU8PinNum);
				 CLR_BIT(PORTA,Add_StrPortCfg->PORT_StrU8PinNum);
				 break;
 602:	08 95       	ret
			 }
			 break;
			 
			 case PORT_enuPortB :
			 
			 switch(Add_StrPortCfg->PORT_StrU8PinCfg)
 604:	21 30       	cpi	r18, 0x01	; 1
 606:	09 f4       	brne	.+2      	; 0x60a <PORT_enuSetPinConfiguration+0x108>
 608:	4d c0       	rjmp	.+154    	; 0x6a4 <PORT_enuSetPinConfiguration+0x1a2>
 60a:	a0 f1       	brcs	.+104    	; 0x674 <PORT_enuSetPinConfiguration+0x172>
 60c:	22 30       	cpi	r18, 0x02	; 2
 60e:	19 f0       	breq	.+6      	; 0x616 <PORT_enuSetPinConfiguration+0x114>
 610:	23 30       	cpi	r18, 0x03	; 3
 612:	c9 f0       	breq	.+50     	; 0x646 <PORT_enuSetPinConfiguration+0x144>
 614:	3c c1       	rjmp	.+632    	; 0x88e <__stack+0x2f>
			 {
				 
				 case PORT_enuOutput_Low:
				 SET_BIT(DDRB,Add_StrPortCfg->PORT_StrU8PinNum);
 616:	47 b3       	in	r20, 0x17	; 23
 618:	21 e0       	ldi	r18, 0x01	; 1
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	b9 01       	movw	r22, r18
 61e:	02 c0       	rjmp	.+4      	; 0x624 <PORT_enuSetPinConfiguration+0x122>
 620:	66 0f       	add	r22, r22
 622:	77 1f       	adc	r23, r23
 624:	9a 95       	dec	r25
 626:	e2 f7       	brpl	.-8      	; 0x620 <PORT_enuSetPinConfiguration+0x11e>
 628:	cb 01       	movw	r24, r22
 62a:	84 2b       	or	r24, r20
 62c:	87 bb       	out	0x17, r24	; 23
				 CLR_BIT(PORTB,Add_StrPortCfg->PORT_StrU8PinNum);
 62e:	88 b3       	in	r24, 0x18	; 24
 630:	01 80       	ldd	r0, Z+1	; 0x01
 632:	02 c0       	rjmp	.+4      	; 0x638 <PORT_enuSetPinConfiguration+0x136>
 634:	22 0f       	add	r18, r18
 636:	33 1f       	adc	r19, r19
 638:	0a 94       	dec	r0
 63a:	e2 f7       	brpl	.-8      	; 0x634 <PORT_enuSetPinConfiguration+0x132>
 63c:	20 95       	com	r18
 63e:	28 23       	and	r18, r24
 640:	28 bb       	out	0x18, r18	; 24
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 642:	84 e0       	ldi	r24, 0x04	; 4
				 
				 case PORT_enuOutput_Low:
				 SET_BIT(DDRB,Add_StrPortCfg->PORT_StrU8PinNum);
				 CLR_BIT(PORTB,Add_StrPortCfg->PORT_StrU8PinNum);
				 
				 break;
 644:	08 95       	ret
				 case PORT_enuOutput_High:
				 SET_BIT(DDRB,Add_StrPortCfg->PORT_StrU8PinNum);
 646:	47 b3       	in	r20, 0x17	; 23
 648:	21 e0       	ldi	r18, 0x01	; 1
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	b9 01       	movw	r22, r18
 64e:	02 c0       	rjmp	.+4      	; 0x654 <PORT_enuSetPinConfiguration+0x152>
 650:	66 0f       	add	r22, r22
 652:	77 1f       	adc	r23, r23
 654:	9a 95       	dec	r25
 656:	e2 f7       	brpl	.-8      	; 0x650 <PORT_enuSetPinConfiguration+0x14e>
 658:	cb 01       	movw	r24, r22
 65a:	84 2b       	or	r24, r20
 65c:	87 bb       	out	0x17, r24	; 23
				 SET_BIT(PORTB,Add_StrPortCfg->PORT_StrU8PinNum);
 65e:	88 b3       	in	r24, 0x18	; 24
 660:	01 80       	ldd	r0, Z+1	; 0x01
 662:	02 c0       	rjmp	.+4      	; 0x668 <PORT_enuSetPinConfiguration+0x166>
 664:	22 0f       	add	r18, r18
 666:	33 1f       	adc	r19, r19
 668:	0a 94       	dec	r0
 66a:	e2 f7       	brpl	.-8      	; 0x664 <PORT_enuSetPinConfiguration+0x162>
 66c:	28 2b       	or	r18, r24
 66e:	28 bb       	out	0x18, r18	; 24
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 670:	84 e0       	ldi	r24, 0x04	; 4
				 break;
				 case PORT_enuOutput_High:
				 SET_BIT(DDRB,Add_StrPortCfg->PORT_StrU8PinNum);
				 SET_BIT(PORTB,Add_StrPortCfg->PORT_StrU8PinNum);
				 
				 break;
 672:	08 95       	ret
				 case PORT_enuInputInternalPullUP:
				 CLR_BIT(DDRB,Add_StrPortCfg->PORT_StrU8PinNum);
 674:	47 b3       	in	r20, 0x17	; 23
 676:	21 e0       	ldi	r18, 0x01	; 1
 678:	30 e0       	ldi	r19, 0x00	; 0
 67a:	b9 01       	movw	r22, r18
 67c:	02 c0       	rjmp	.+4      	; 0x682 <PORT_enuSetPinConfiguration+0x180>
 67e:	66 0f       	add	r22, r22
 680:	77 1f       	adc	r23, r23
 682:	9a 95       	dec	r25
 684:	e2 f7       	brpl	.-8      	; 0x67e <PORT_enuSetPinConfiguration+0x17c>
 686:	cb 01       	movw	r24, r22
 688:	80 95       	com	r24
 68a:	84 23       	and	r24, r20
 68c:	87 bb       	out	0x17, r24	; 23
				 SET_BIT(PORTB,Add_StrPortCfg->PORT_StrU8PinNum);
 68e:	88 b3       	in	r24, 0x18	; 24
 690:	01 80       	ldd	r0, Z+1	; 0x01
 692:	02 c0       	rjmp	.+4      	; 0x698 <PORT_enuSetPinConfiguration+0x196>
 694:	22 0f       	add	r18, r18
 696:	33 1f       	adc	r19, r19
 698:	0a 94       	dec	r0
 69a:	e2 f7       	brpl	.-8      	; 0x694 <PORT_enuSetPinConfiguration+0x192>
 69c:	28 2b       	or	r18, r24
 69e:	28 bb       	out	0x18, r18	; 24
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 6a0:	84 e0       	ldi	r24, 0x04	; 4
				 
				 break;
				 case PORT_enuInputInternalPullUP:
				 CLR_BIT(DDRB,Add_StrPortCfg->PORT_StrU8PinNum);
				 SET_BIT(PORTB,Add_StrPortCfg->PORT_StrU8PinNum);
				 break;
 6a2:	08 95       	ret
				 case PORT_enuInputExternalPullDown:
				 CLR_BIT(DDRB,Add_StrPortCfg->PORT_StrU8PinNum);
 6a4:	47 b3       	in	r20, 0x17	; 23
 6a6:	21 e0       	ldi	r18, 0x01	; 1
 6a8:	30 e0       	ldi	r19, 0x00	; 0
 6aa:	b9 01       	movw	r22, r18
 6ac:	02 c0       	rjmp	.+4      	; 0x6b2 <PORT_enuSetPinConfiguration+0x1b0>
 6ae:	66 0f       	add	r22, r22
 6b0:	77 1f       	adc	r23, r23
 6b2:	9a 95       	dec	r25
 6b4:	e2 f7       	brpl	.-8      	; 0x6ae <PORT_enuSetPinConfiguration+0x1ac>
 6b6:	cb 01       	movw	r24, r22
 6b8:	80 95       	com	r24
 6ba:	84 23       	and	r24, r20
 6bc:	87 bb       	out	0x17, r24	; 23
				 CLR_BIT(PORTB,Add_StrPortCfg->PORT_StrU8PinNum);
 6be:	88 b3       	in	r24, 0x18	; 24
 6c0:	01 80       	ldd	r0, Z+1	; 0x01
 6c2:	02 c0       	rjmp	.+4      	; 0x6c8 <PORT_enuSetPinConfiguration+0x1c6>
 6c4:	22 0f       	add	r18, r18
 6c6:	33 1f       	adc	r19, r19
 6c8:	0a 94       	dec	r0
 6ca:	e2 f7       	brpl	.-8      	; 0x6c4 <PORT_enuSetPinConfiguration+0x1c2>
 6cc:	20 95       	com	r18
 6ce:	28 23       	and	r18, r24
 6d0:	28 bb       	out	0x18, r18	; 24
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 6d2:	84 e0       	ldi	r24, 0x04	; 4
				 SET_BIT(PORTB,Add_StrPortCfg->PORT_StrU8PinNum);
				 break;
				 case PORT_enuInputExternalPullDown:
				 CLR_BIT(DDRB,Add_StrPortCfg->PORT_StrU8PinNum);
				 CLR_BIT(PORTB,Add_StrPortCfg->PORT_StrU8PinNum);
				 break;
 6d4:	08 95       	ret
				 
			 }
			 break;
			 
			 case PORT_enuPortC :
			 switch(Add_StrPortCfg->PORT_StrU8PinCfg)
 6d6:	21 30       	cpi	r18, 0x01	; 1
 6d8:	09 f4       	brne	.+2      	; 0x6dc <PORT_enuSetPinConfiguration+0x1da>
 6da:	4d c0       	rjmp	.+154    	; 0x776 <PORT_enuSetPinConfiguration+0x274>
 6dc:	a0 f1       	brcs	.+104    	; 0x746 <PORT_enuSetPinConfiguration+0x244>
 6de:	22 30       	cpi	r18, 0x02	; 2
 6e0:	19 f0       	breq	.+6      	; 0x6e8 <PORT_enuSetPinConfiguration+0x1e6>
 6e2:	23 30       	cpi	r18, 0x03	; 3
 6e4:	c9 f0       	breq	.+50     	; 0x718 <PORT_enuSetPinConfiguration+0x216>
 6e6:	d5 c0       	rjmp	.+426    	; 0x892 <__stack+0x33>
			 {
				 
				 case PORT_enuOutput_Low:
				 SET_BIT(DDRC,Add_StrPortCfg->PORT_StrU8PinNum);
 6e8:	44 b3       	in	r20, 0x14	; 20
 6ea:	21 e0       	ldi	r18, 0x01	; 1
 6ec:	30 e0       	ldi	r19, 0x00	; 0
 6ee:	b9 01       	movw	r22, r18
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <PORT_enuSetPinConfiguration+0x1f4>
 6f2:	66 0f       	add	r22, r22
 6f4:	77 1f       	adc	r23, r23
 6f6:	9a 95       	dec	r25
 6f8:	e2 f7       	brpl	.-8      	; 0x6f2 <PORT_enuSetPinConfiguration+0x1f0>
 6fa:	cb 01       	movw	r24, r22
 6fc:	84 2b       	or	r24, r20
 6fe:	84 bb       	out	0x14, r24	; 20
				 CLR_BIT(PORTC,Add_StrPortCfg->PORT_StrU8PinNum);
 700:	85 b3       	in	r24, 0x15	; 21
 702:	01 80       	ldd	r0, Z+1	; 0x01
 704:	02 c0       	rjmp	.+4      	; 0x70a <PORT_enuSetPinConfiguration+0x208>
 706:	22 0f       	add	r18, r18
 708:	33 1f       	adc	r19, r19
 70a:	0a 94       	dec	r0
 70c:	e2 f7       	brpl	.-8      	; 0x706 <PORT_enuSetPinConfiguration+0x204>
 70e:	20 95       	com	r18
 710:	28 23       	and	r18, r24
 712:	25 bb       	out	0x15, r18	; 21
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 714:	84 e0       	ldi	r24, 0x04	; 4
				 
				 case PORT_enuOutput_Low:
				 SET_BIT(DDRC,Add_StrPortCfg->PORT_StrU8PinNum);
				 CLR_BIT(PORTC,Add_StrPortCfg->PORT_StrU8PinNum);
				 
				 break;
 716:	08 95       	ret
				 case PORT_enuOutput_High:
				 SET_BIT(DDRC,Add_StrPortCfg->PORT_StrU8PinNum);
 718:	44 b3       	in	r20, 0x14	; 20
 71a:	21 e0       	ldi	r18, 0x01	; 1
 71c:	30 e0       	ldi	r19, 0x00	; 0
 71e:	b9 01       	movw	r22, r18
 720:	02 c0       	rjmp	.+4      	; 0x726 <PORT_enuSetPinConfiguration+0x224>
 722:	66 0f       	add	r22, r22
 724:	77 1f       	adc	r23, r23
 726:	9a 95       	dec	r25
 728:	e2 f7       	brpl	.-8      	; 0x722 <PORT_enuSetPinConfiguration+0x220>
 72a:	cb 01       	movw	r24, r22
 72c:	84 2b       	or	r24, r20
 72e:	84 bb       	out	0x14, r24	; 20
				 SET_BIT(PORTC,Add_StrPortCfg->PORT_StrU8PinNum);
 730:	85 b3       	in	r24, 0x15	; 21
 732:	01 80       	ldd	r0, Z+1	; 0x01
 734:	02 c0       	rjmp	.+4      	; 0x73a <PORT_enuSetPinConfiguration+0x238>
 736:	22 0f       	add	r18, r18
 738:	33 1f       	adc	r19, r19
 73a:	0a 94       	dec	r0
 73c:	e2 f7       	brpl	.-8      	; 0x736 <PORT_enuSetPinConfiguration+0x234>
 73e:	28 2b       	or	r18, r24
 740:	25 bb       	out	0x15, r18	; 21
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 742:	84 e0       	ldi	r24, 0x04	; 4
				 break;
				 case PORT_enuOutput_High:
				 SET_BIT(DDRC,Add_StrPortCfg->PORT_StrU8PinNum);
				 SET_BIT(PORTC,Add_StrPortCfg->PORT_StrU8PinNum);
				 
				 break;
 744:	08 95       	ret
				 case PORT_enuInputInternalPullUP:
				 CLR_BIT(DDRC,Add_StrPortCfg->PORT_StrU8PinNum);
 746:	44 b3       	in	r20, 0x14	; 20
 748:	21 e0       	ldi	r18, 0x01	; 1
 74a:	30 e0       	ldi	r19, 0x00	; 0
 74c:	b9 01       	movw	r22, r18
 74e:	02 c0       	rjmp	.+4      	; 0x754 <PORT_enuSetPinConfiguration+0x252>
 750:	66 0f       	add	r22, r22
 752:	77 1f       	adc	r23, r23
 754:	9a 95       	dec	r25
 756:	e2 f7       	brpl	.-8      	; 0x750 <PORT_enuSetPinConfiguration+0x24e>
 758:	cb 01       	movw	r24, r22
 75a:	80 95       	com	r24
 75c:	84 23       	and	r24, r20
 75e:	84 bb       	out	0x14, r24	; 20
				 SET_BIT(PORTC,Add_StrPortCfg->PORT_StrU8PinNum);
 760:	85 b3       	in	r24, 0x15	; 21
 762:	01 80       	ldd	r0, Z+1	; 0x01
 764:	02 c0       	rjmp	.+4      	; 0x76a <PORT_enuSetPinConfiguration+0x268>
 766:	22 0f       	add	r18, r18
 768:	33 1f       	adc	r19, r19
 76a:	0a 94       	dec	r0
 76c:	e2 f7       	brpl	.-8      	; 0x766 <PORT_enuSetPinConfiguration+0x264>
 76e:	28 2b       	or	r18, r24
 770:	25 bb       	out	0x15, r18	; 21
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 772:	84 e0       	ldi	r24, 0x04	; 4
				 
				 break;
				 case PORT_enuInputInternalPullUP:
				 CLR_BIT(DDRC,Add_StrPortCfg->PORT_StrU8PinNum);
				 SET_BIT(PORTC,Add_StrPortCfg->PORT_StrU8PinNum);
				 break;
 774:	08 95       	ret
				 case PORT_enuInputExternalPullDown:
				 CLR_BIT(DDRC,Add_StrPortCfg->PORT_StrU8PinNum);
 776:	44 b3       	in	r20, 0x14	; 20
 778:	21 e0       	ldi	r18, 0x01	; 1
 77a:	30 e0       	ldi	r19, 0x00	; 0
 77c:	b9 01       	movw	r22, r18
 77e:	02 c0       	rjmp	.+4      	; 0x784 <PORT_enuSetPinConfiguration+0x282>
 780:	66 0f       	add	r22, r22
 782:	77 1f       	adc	r23, r23
 784:	9a 95       	dec	r25
 786:	e2 f7       	brpl	.-8      	; 0x780 <PORT_enuSetPinConfiguration+0x27e>
 788:	cb 01       	movw	r24, r22
 78a:	80 95       	com	r24
 78c:	84 23       	and	r24, r20
 78e:	84 bb       	out	0x14, r24	; 20
				 CLR_BIT(PORTC,Add_StrPortCfg->PORT_StrU8PinNum);
 790:	85 b3       	in	r24, 0x15	; 21
 792:	01 80       	ldd	r0, Z+1	; 0x01
 794:	02 c0       	rjmp	.+4      	; 0x79a <PORT_enuSetPinConfiguration+0x298>
 796:	22 0f       	add	r18, r18
 798:	33 1f       	adc	r19, r19
 79a:	0a 94       	dec	r0
 79c:	e2 f7       	brpl	.-8      	; 0x796 <PORT_enuSetPinConfiguration+0x294>
 79e:	20 95       	com	r18
 7a0:	28 23       	and	r18, r24
 7a2:	25 bb       	out	0x15, r18	; 21
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 7a4:	84 e0       	ldi	r24, 0x04	; 4
				 SET_BIT(PORTC,Add_StrPortCfg->PORT_StrU8PinNum);
				 break;
				 case PORT_enuInputExternalPullDown:
				 CLR_BIT(DDRC,Add_StrPortCfg->PORT_StrU8PinNum);
				 CLR_BIT(PORTC,Add_StrPortCfg->PORT_StrU8PinNum);
				 break;
 7a6:	08 95       	ret
				 
			 }
			 break;
			 
			 case PORT_enuPortD :
			 switch(Add_StrPortCfg->PORT_StrU8PinCfg)
 7a8:	21 30       	cpi	r18, 0x01	; 1
 7aa:	09 f4       	brne	.+2      	; 0x7ae <PORT_enuSetPinConfiguration+0x2ac>
 7ac:	4d c0       	rjmp	.+154    	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 7ae:	a0 f1       	brcs	.+104    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7b0:	22 30       	cpi	r18, 0x02	; 2
 7b2:	19 f0       	breq	.+6      	; 0x7ba <PORT_enuSetPinConfiguration+0x2b8>
 7b4:	23 30       	cpi	r18, 0x03	; 3
 7b6:	c9 f0       	breq	.+50     	; 0x7ea <PORT_enuSetPinConfiguration+0x2e8>
 7b8:	6e c0       	rjmp	.+220    	; 0x896 <__stack+0x37>
			 {
				 case PORT_enuOutput_Low:
				 SET_BIT(DDRD,Add_StrPortCfg->PORT_StrU8PinNum);
 7ba:	41 b3       	in	r20, 0x11	; 17
 7bc:	21 e0       	ldi	r18, 0x01	; 1
 7be:	30 e0       	ldi	r19, 0x00	; 0
 7c0:	b9 01       	movw	r22, r18
 7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <PORT_enuSetPinConfiguration+0x2c6>
 7c4:	66 0f       	add	r22, r22
 7c6:	77 1f       	adc	r23, r23
 7c8:	9a 95       	dec	r25
 7ca:	e2 f7       	brpl	.-8      	; 0x7c4 <PORT_enuSetPinConfiguration+0x2c2>
 7cc:	cb 01       	movw	r24, r22
 7ce:	84 2b       	or	r24, r20
 7d0:	81 bb       	out	0x11, r24	; 17
				 CLR_BIT(PORTD,Add_StrPortCfg->PORT_StrU8PinNum);
 7d2:	82 b3       	in	r24, 0x12	; 18
 7d4:	01 80       	ldd	r0, Z+1	; 0x01
 7d6:	02 c0       	rjmp	.+4      	; 0x7dc <PORT_enuSetPinConfiguration+0x2da>
 7d8:	22 0f       	add	r18, r18
 7da:	33 1f       	adc	r19, r19
 7dc:	0a 94       	dec	r0
 7de:	e2 f7       	brpl	.-8      	; 0x7d8 <PORT_enuSetPinConfiguration+0x2d6>
 7e0:	20 95       	com	r18
 7e2:	28 23       	and	r18, r24
 7e4:	22 bb       	out	0x12, r18	; 18
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 7e6:	84 e0       	ldi	r24, 0x04	; 4
			 {
				 case PORT_enuOutput_Low:
				 SET_BIT(DDRD,Add_StrPortCfg->PORT_StrU8PinNum);
				 CLR_BIT(PORTD,Add_StrPortCfg->PORT_StrU8PinNum);
				 
				 break;
 7e8:	08 95       	ret
				 case PORT_enuOutput_High:
				 SET_BIT(DDRD,Add_StrPortCfg->PORT_StrU8PinNum);
 7ea:	41 b3       	in	r20, 0x11	; 17
 7ec:	21 e0       	ldi	r18, 0x01	; 1
 7ee:	30 e0       	ldi	r19, 0x00	; 0
 7f0:	b9 01       	movw	r22, r18
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <PORT_enuSetPinConfiguration+0x2f6>
 7f4:	66 0f       	add	r22, r22
 7f6:	77 1f       	adc	r23, r23
 7f8:	9a 95       	dec	r25
 7fa:	e2 f7       	brpl	.-8      	; 0x7f4 <PORT_enuSetPinConfiguration+0x2f2>
 7fc:	cb 01       	movw	r24, r22
 7fe:	84 2b       	or	r24, r20
 800:	81 bb       	out	0x11, r24	; 17
				 SET_BIT(PORTD,Add_StrPortCfg->PORT_StrU8PinNum);
 802:	82 b3       	in	r24, 0x12	; 18
 804:	01 80       	ldd	r0, Z+1	; 0x01
 806:	02 c0       	rjmp	.+4      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 808:	22 0f       	add	r18, r18
 80a:	33 1f       	adc	r19, r19
 80c:	0a 94       	dec	r0
 80e:	e2 f7       	brpl	.-8      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 810:	28 2b       	or	r18, r24
 812:	22 bb       	out	0x12, r18	; 18
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 814:	84 e0       	ldi	r24, 0x04	; 4
				 break;
				 case PORT_enuOutput_High:
				 SET_BIT(DDRD,Add_StrPortCfg->PORT_StrU8PinNum);
				 SET_BIT(PORTD,Add_StrPortCfg->PORT_StrU8PinNum);
				 
				 break;
 816:	08 95       	ret
				 case PORT_enuInputInternalPullUP:
				 CLR_BIT(DDRD,Add_StrPortCfg->PORT_StrU8PinNum);
 818:	41 b3       	in	r20, 0x11	; 17
 81a:	21 e0       	ldi	r18, 0x01	; 1
 81c:	30 e0       	ldi	r19, 0x00	; 0
 81e:	b9 01       	movw	r22, r18
 820:	02 c0       	rjmp	.+4      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 822:	66 0f       	add	r22, r22
 824:	77 1f       	adc	r23, r23
 826:	9a 95       	dec	r25
 828:	e2 f7       	brpl	.-8      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 82a:	cb 01       	movw	r24, r22
 82c:	80 95       	com	r24
 82e:	84 23       	and	r24, r20
 830:	81 bb       	out	0x11, r24	; 17
				 SET_BIT(PORTD,Add_StrPortCfg->PORT_StrU8PinNum);
 832:	82 b3       	in	r24, 0x12	; 18
 834:	01 80       	ldd	r0, Z+1	; 0x01
 836:	02 c0       	rjmp	.+4      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 838:	22 0f       	add	r18, r18
 83a:	33 1f       	adc	r19, r19
 83c:	0a 94       	dec	r0
 83e:	e2 f7       	brpl	.-8      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 840:	28 2b       	or	r18, r24
 842:	22 bb       	out	0x12, r18	; 18
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 844:	84 e0       	ldi	r24, 0x04	; 4
				 
				 break;
				 case PORT_enuInputInternalPullUP:
				 CLR_BIT(DDRD,Add_StrPortCfg->PORT_StrU8PinNum);
				 SET_BIT(PORTD,Add_StrPortCfg->PORT_StrU8PinNum);
				 break;
 846:	08 95       	ret
				 case PORT_enuInputExternalPullDown:
				 CLR_BIT(DDRD,Add_StrPortCfg->PORT_StrU8PinNum);
 848:	41 b3       	in	r20, 0x11	; 17
 84a:	21 e0       	ldi	r18, 0x01	; 1
 84c:	30 e0       	ldi	r19, 0x00	; 0
 84e:	b9 01       	movw	r22, r18
 850:	02 c0       	rjmp	.+4      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
 852:	66 0f       	add	r22, r22
 854:	77 1f       	adc	r23, r23
 856:	9a 95       	dec	r25
 858:	e2 f7       	brpl	.-8      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
 85a:	cb 01       	movw	r24, r22
 85c:	80 95       	com	r24
 85e:	84 23       	and	r24, r20
 860:	81 bb       	out	0x11, r24	; 17
				 CLR_BIT(PORTD,Add_StrPortCfg->PORT_StrU8PinNum);
 862:	82 b3       	in	r24, 0x12	; 18
 864:	01 80       	ldd	r0, Z+1	; 0x01
 866:	02 c0       	rjmp	.+4      	; 0x86c <__stack+0xd>
 868:	22 0f       	add	r18, r18
 86a:	33 1f       	adc	r19, r19
 86c:	0a 94       	dec	r0
 86e:	e2 f7       	brpl	.-8      	; 0x868 <__stack+0x9>
 870:	20 95       	com	r18
 872:	28 23       	and	r18, r24
 874:	22 bb       	out	0x12, r18	; 18
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 876:	84 e0       	ldi	r24, 0x04	; 4
				 SET_BIT(PORTD,Add_StrPortCfg->PORT_StrU8PinNum);
				 break;
				 case PORT_enuInputExternalPullDown:
				 CLR_BIT(DDRD,Add_StrPortCfg->PORT_StrU8PinNum);
				 CLR_BIT(PORTD,Add_StrPortCfg->PORT_StrU8PinNum);
				 break;
 878:	08 95       	ret
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
	 
	 if (Add_StrPortCfg->PORT_StrU8PortNum > NUM_OF_PORTS || Add_StrPortCfg->PORT_StrU8PortNum < PORT_enuPortA  )
	 {
		 Loc_enuErorState= PORT_enuInvalidPortNumber;
 87a:	80 e0       	ldi	r24, 0x00	; 0
 87c:	08 95       	ret
	 }
	 else if (Add_StrPortCfg->PORT_StrU8PinNum > PORT_enuPin7 || Add_StrPortCfg->PORT_StrU8PinNum < PORT_enuPin0)
	 {
		 Loc_enuErorState=  PORT_enuInvalidPinNumber;
 87e:	81 e0       	ldi	r24, 0x01	; 1
 880:	08 95       	ret
	 }
	 else if  (Add_StrPortCfg->PORT_StrU8PinCfg > PORT_enuOutput_High || Add_StrPortCfg->PORT_StrU8PinCfg < PORT_enuInputInternalPullUP)
	 {
		 
		 Loc_enuErorState = PORT_enuIvalidpinConfiguration;
 882:	83 e0       	ldi	r24, 0x03	; 3
 884:	08 95       	ret
	 
 }
 */
 PORT_enuErrorStatus_t PORT_enuSetPinConfiguration(PORT_StrCFg_t *Add_StrPortCfg){
	 
	 PORT_enuErrorStatus_t Loc_enuErorState=  PORT_enuSucceded;
 886:	84 e0       	ldi	r24, 0x04	; 4
 888:	08 95       	ret
 88a:	84 e0       	ldi	r24, 0x04	; 4
 88c:	08 95       	ret
 88e:	84 e0       	ldi	r24, 0x04	; 4
 890:	08 95       	ret
 892:	84 e0       	ldi	r24, 0x04	; 4
 894:	08 95       	ret
 896:	84 e0       	ldi	r24, 0x04	; 4
		 }
		 
	 }
	 
	 return Loc_enuErorState;
 }
 898:	08 95       	ret

0000089a <SWITCH_Init>:
 #include "SWITCH.h" 
 
 extern SWITCH_StrCfg_t SWITCHS_Arr[NUM_OF_SWITCHS];
 
 SWITCH_enuErorState SWITCH_Init(void)
 {
 89a:	1f 93       	push	r17
 89c:	cf 93       	push	r28
 89e:	df 93       	push	r29
 8a0:	cd b7       	in	r28, 0x3d	; 61
 8a2:	de b7       	in	r29, 0x3e	; 62
 8a4:	29 97       	sbiw	r28, 0x09	; 9
 8a6:	0f b6       	in	r0, 0x3f	; 63
 8a8:	f8 94       	cli
 8aa:	de bf       	out	0x3e, r29	; 62
 8ac:	0f be       	out	0x3f, r0	; 63
 8ae:	cd bf       	out	0x3d, r28	; 61
      SWITCH_enuErorState Loc_SWITCHErrorState = SWITCH_enusucceeded ;
	  PORT_enuErrorStatus_t Loc_PORTErorState = PORT_enuSucceded ;
	  PORT_StrCFg_t Loc_Str_CurrSWITCH_Arr[NUM_OF_SWITCHS];
	  u8 LocU8Counter;
	  for(LocU8Counter = 0 ; LocU8Counter < NUM_OF_SWITCHS ; LocU8Counter ++)
 8b0:	10 e0       	ldi	r17, 0x00	; 0
 extern SWITCH_StrCfg_t SWITCHS_Arr[NUM_OF_SWITCHS];
 
 SWITCH_enuErorState SWITCH_Init(void)
 {
      SWITCH_enuErorState Loc_SWITCHErrorState = SWITCH_enusucceeded ;
	  PORT_enuErrorStatus_t Loc_PORTErorState = PORT_enuSucceded ;
 8b2:	84 e0       	ldi	r24, 0x04	; 4
	  PORT_StrCFg_t Loc_Str_CurrSWITCH_Arr[NUM_OF_SWITCHS];
	  u8 LocU8Counter;
	  for(LocU8Counter = 0 ; LocU8Counter < NUM_OF_SWITCHS ; LocU8Counter ++)
 8b4:	5d c0       	rjmp	.+186    	; 0x970 <SWITCH_Init+0xd6>
	  {
		  
		  if (SWITCHS_Arr[LocU8Counter].SWITCH_StrU8PortCfg > NUM_OF_PORTS || SWITCHS_Arr[LocU8Counter].SWITCH_StrU8PortCfg < SWITCH_PORTA )
 8b6:	21 2f       	mov	r18, r17
 8b8:	30 e0       	ldi	r19, 0x00	; 0
 8ba:	f9 01       	movw	r30, r18
 8bc:	ee 0f       	add	r30, r30
 8be:	ff 1f       	adc	r31, r31
 8c0:	e2 0f       	add	r30, r18
 8c2:	f3 1f       	adc	r31, r19
 8c4:	e4 59       	subi	r30, 0x94	; 148
 8c6:	ff 4f       	sbci	r31, 0xFF	; 255
 8c8:	40 81       	ld	r20, Z
 8ca:	45 30       	cpi	r20, 0x05	; 5
 8cc:	08 f0       	brcs	.+2      	; 0x8d0 <SWITCH_Init+0x36>
 8ce:	55 c0       	rjmp	.+170    	; 0x97a <SWITCH_Init+0xe0>
			  
			  Loc_SWITCHErrorState = SWITCH_enuInvalidPort ;
			  break;
			  
		  }
		  else if (SWITCHS_Arr[LocU8Counter].SWITCH_StrU8PinCFg > SWITCH_PIN7 || SWITCHS_Arr[LocU8Counter].SWITCH_StrU8PinCFg < SWITCH_PIN0 )
 8d0:	f9 01       	movw	r30, r18
 8d2:	ee 0f       	add	r30, r30
 8d4:	ff 1f       	adc	r31, r31
 8d6:	e2 0f       	add	r30, r18
 8d8:	f3 1f       	adc	r31, r19
 8da:	e4 59       	subi	r30, 0x94	; 148
 8dc:	ff 4f       	sbci	r31, 0xFF	; 255
 8de:	51 81       	ldd	r21, Z+1	; 0x01
 8e0:	58 30       	cpi	r21, 0x08	; 8
 8e2:	08 f0       	brcs	.+2      	; 0x8e6 <SWITCH_Init+0x4c>
 8e4:	4c c0       	rjmp	.+152    	; 0x97e <SWITCH_Init+0xe4>
			  
			  Loc_SWITCHErrorState = SWITCH_enuInvalidPin ;
			  break;
			  
		  }
		  else if (SWITCHS_Arr[LocU8Counter].SWITCH_StrU8SWITCHState != SWITCH_PULLUP && SWITCHS_Arr[LocU8Counter].SWITCH_StrU8SWITCHState != SWITCH_PULLDOWN)
 8e6:	f9 01       	movw	r30, r18
 8e8:	ee 0f       	add	r30, r30
 8ea:	ff 1f       	adc	r31, r31
 8ec:	e2 0f       	add	r30, r18
 8ee:	f3 1f       	adc	r31, r19
 8f0:	e4 59       	subi	r30, 0x94	; 148
 8f2:	ff 4f       	sbci	r31, 0xFF	; 255
 8f4:	92 81       	ldd	r25, Z+2	; 0x02
 8f6:	92 30       	cpi	r25, 0x02	; 2
 8f8:	08 f0       	brcs	.+2      	; 0x8fc <SWITCH_Init+0x62>
 8fa:	43 c0       	rjmp	.+134    	; 0x982 <SWITCH_Init+0xe8>
			  
		  }
		  else
		  {
			    
				 Loc_Str_CurrSWITCH_Arr[LocU8Counter].PORT_StrU8PortNum = SWITCHS_Arr[LocU8Counter].SWITCH_StrU8PortCfg ;
 8fc:	f9 01       	movw	r30, r18
 8fe:	ee 0f       	add	r30, r30
 900:	ff 1f       	adc	r31, r31
 902:	e2 0f       	add	r30, r18
 904:	f3 1f       	adc	r31, r19
 906:	61 e0       	ldi	r22, 0x01	; 1
 908:	70 e0       	ldi	r23, 0x00	; 0
 90a:	6c 0f       	add	r22, r28
 90c:	7d 1f       	adc	r23, r29
 90e:	e6 0f       	add	r30, r22
 910:	f7 1f       	adc	r31, r23
 912:	40 83       	st	Z, r20
				 Loc_Str_CurrSWITCH_Arr[LocU8Counter].PORT_StrU8PinNum = SWITCHS_Arr[LocU8Counter].SWITCH_StrU8PinCFg;
 914:	51 83       	std	Z+1, r21	; 0x01
	            
				  switch(SWITCHS_Arr[LocU8Counter].SWITCH_StrU8SWITCHState)	
 916:	99 23       	and	r25, r25
 918:	19 f0       	breq	.+6      	; 0x920 <SWITCH_Init+0x86>
 91a:	91 30       	cpi	r25, 0x01	; 1
 91c:	71 f0       	breq	.+28     	; 0x93a <SWITCH_Init+0xa0>
 91e:	1a c0       	rjmp	.+52     	; 0x954 <SWITCH_Init+0xba>
				  {
					  
					  case (SWITCH_PULLUP) :
					     Loc_Str_CurrSWITCH_Arr[LocU8Counter].PORT_StrU8PinCfg = PORT_enuInputInternalPullUP ;
 920:	f9 01       	movw	r30, r18
 922:	ee 0f       	add	r30, r30
 924:	ff 1f       	adc	r31, r31
 926:	e2 0f       	add	r30, r18
 928:	f3 1f       	adc	r31, r19
 92a:	81 e0       	ldi	r24, 0x01	; 1
 92c:	90 e0       	ldi	r25, 0x00	; 0
 92e:	8c 0f       	add	r24, r28
 930:	9d 1f       	adc	r25, r29
 932:	e8 0f       	add	r30, r24
 934:	f9 1f       	adc	r31, r25
 936:	12 82       	std	Z+2, r1	; 0x02
					       break;
 938:	0d c0       	rjmp	.+26     	; 0x954 <SWITCH_Init+0xba>
					  case (SWITCH_PULLDOWN):
					      Loc_Str_CurrSWITCH_Arr[LocU8Counter].PORT_StrU8PinCfg = PORT_enuInputExternalPullDown ;
 93a:	f9 01       	movw	r30, r18
 93c:	ee 0f       	add	r30, r30
 93e:	ff 1f       	adc	r31, r31
 940:	e2 0f       	add	r30, r18
 942:	f3 1f       	adc	r31, r19
 944:	61 e0       	ldi	r22, 0x01	; 1
 946:	70 e0       	ldi	r23, 0x00	; 0
 948:	6c 0f       	add	r22, r28
 94a:	7d 1f       	adc	r23, r29
 94c:	e6 0f       	add	r30, r22
 94e:	f7 1f       	adc	r31, r23
 950:	81 e0       	ldi	r24, 0x01	; 1
 952:	82 83       	std	Z+2, r24	; 0x02
					       break;
				  }					  
					  
				  
				  Loc_PORTErorState = PORT_enuSetPinConfiguration(&Loc_Str_CurrSWITCH_Arr[LocU8Counter]);
 954:	c9 01       	movw	r24, r18
 956:	88 0f       	add	r24, r24
 958:	99 1f       	adc	r25, r25
 95a:	82 0f       	add	r24, r18
 95c:	93 1f       	adc	r25, r19
 95e:	21 e0       	ldi	r18, 0x01	; 1
 960:	30 e0       	ldi	r19, 0x00	; 0
 962:	2c 0f       	add	r18, r28
 964:	3d 1f       	adc	r19, r29
 966:	82 0f       	add	r24, r18
 968:	93 1f       	adc	r25, r19
 96a:	0e 94 81 02 	call	0x502	; 0x502 <PORT_enuSetPinConfiguration>
 {
      SWITCH_enuErorState Loc_SWITCHErrorState = SWITCH_enusucceeded ;
	  PORT_enuErrorStatus_t Loc_PORTErorState = PORT_enuSucceded ;
	  PORT_StrCFg_t Loc_Str_CurrSWITCH_Arr[NUM_OF_SWITCHS];
	  u8 LocU8Counter;
	  for(LocU8Counter = 0 ; LocU8Counter < NUM_OF_SWITCHS ; LocU8Counter ++)
 96e:	1f 5f       	subi	r17, 0xFF	; 255
 970:	13 30       	cpi	r17, 0x03	; 3
 972:	08 f4       	brcc	.+2      	; 0x976 <SWITCH_Init+0xdc>
 974:	a0 cf       	rjmp	.-192    	; 0x8b6 <SWITCH_Init+0x1c>
 
 extern SWITCH_StrCfg_t SWITCHS_Arr[NUM_OF_SWITCHS];
 
 SWITCH_enuErorState SWITCH_Init(void)
 {
      SWITCH_enuErorState Loc_SWITCHErrorState = SWITCH_enusucceeded ;
 976:	93 e0       	ldi	r25, 0x03	; 3
 978:	05 c0       	rjmp	.+10     	; 0x984 <SWITCH_Init+0xea>
	  {
		  
		  if (SWITCHS_Arr[LocU8Counter].SWITCH_StrU8PortCfg > NUM_OF_PORTS || SWITCHS_Arr[LocU8Counter].SWITCH_StrU8PortCfg < SWITCH_PORTA )
		  {
			  
			  Loc_SWITCHErrorState = SWITCH_enuInvalidPort ;
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	03 c0       	rjmp	.+6      	; 0x984 <SWITCH_Init+0xea>
			  
		  }
		  else if (SWITCHS_Arr[LocU8Counter].SWITCH_StrU8PinCFg > SWITCH_PIN7 || SWITCHS_Arr[LocU8Counter].SWITCH_StrU8PinCFg < SWITCH_PIN0 )
		  {
			  
			  Loc_SWITCHErrorState = SWITCH_enuInvalidPin ;
 97e:	91 e0       	ldi	r25, 0x01	; 1
 980:	01 c0       	rjmp	.+2      	; 0x984 <SWITCH_Init+0xea>
			  
		  }
		  else if (SWITCHS_Arr[LocU8Counter].SWITCH_StrU8SWITCHState != SWITCH_PULLUP && SWITCHS_Arr[LocU8Counter].SWITCH_StrU8SWITCHState != SWITCH_PULLDOWN)
		  {
			  
			  Loc_SWITCHErrorState = SWITCH_enuInvalidSWITCHState ;
 982:	92 e0       	ldi	r25, 0x02	; 2
		 }	  
	 }
	 
	 
	 
	     if (Loc_PORTErorState != PORT_enuSucceded)
 984:	84 30       	cpi	r24, 0x04	; 4
 986:	09 f0       	breq	.+2      	; 0x98a <SWITCH_Init+0xf0>
		  { 
		 
		      Loc_SWITCHErrorState = SWITCH_enuPortNOK ;
 988:	94 e0       	ldi	r25, 0x04	; 4
	      }
	           return Loc_SWITCHErrorState;
 }
 98a:	89 2f       	mov	r24, r25
 98c:	29 96       	adiw	r28, 0x09	; 9
 98e:	0f b6       	in	r0, 0x3f	; 63
 990:	f8 94       	cli
 992:	de bf       	out	0x3e, r29	; 62
 994:	0f be       	out	0x3f, r0	; 63
 996:	cd bf       	out	0x3d, r28	; 61
 998:	df 91       	pop	r29
 99a:	cf 91       	pop	r28
 99c:	1f 91       	pop	r17
 99e:	08 95       	ret

000009a0 <_exit>:
 9a0:	f8 94       	cli

000009a2 <__stop_program>:
 9a2:	ff cf       	rjmp	.-2      	; 0x9a2 <__stop_program>
