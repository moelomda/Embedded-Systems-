
Interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000002f6  0000036a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000037a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b0  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c9a  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000800  00000000  00000000  00001132  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000083f  00000000  00000000  00001932  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000154  00000000  00000000  00002174  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000906  00000000  00000000  000022c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ae8  00000000  00000000  00002bce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  000036b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 01 	jmp	0x27e	; 0x27e <__vector_1>
   8:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__vector_2>
   c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__vector_3>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ef       	ldi	r30, 0xF6	; 246
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 3e 01 	call	0x27c	; 0x27c <main>
  7a:	0c 94 79 01 	jmp	0x2f2	; 0x2f2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_enuSetPinLogic>:
}
DIO_enuErrorStatus_t DIO_enuSetPinLogic(DIO_enuPortNumber_t Copy_PortNum , DIO_enuPinNumber_t Copy_PinNUm , DIO_enuSetPinLogic_t Copy_PinLogic)
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
	  
	if (Copy_PortNum > NUM_OF_PORTS || Copy_PortNum < DIO_enuPortA  )
  82:	85 30       	cpi	r24, 0x05	; 5
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_enuSetPinLogic+0x6>
  86:	87 c0       	rjmp	.+270    	; 0x196 <DIO_enuSetPinLogic+0x114>
	{
       Loc_enuErorState= DIO_enuInvalidPortNumber;
	}
	else if(Copy_PinNUm > DIO_enuPin7 || Copy_PinNUm < DIO_enuPin0)
  88:	68 30       	cpi	r22, 0x08	; 8
  8a:	08 f0       	brcs	.+2      	; 0x8e <DIO_enuSetPinLogic+0xc>
  8c:	86 c0       	rjmp	.+268    	; 0x19a <DIO_enuSetPinLogic+0x118>
	{
        Loc_enuErorState= DIO_enuInvalidPinNumber;
	}
	else if (Copy_PinLogic != DIO_enuLogicHigh && Copy_PinLogic != DIO_enuLogicLow)
  8e:	42 30       	cpi	r20, 0x02	; 2
  90:	08 f0       	brcs	.+2      	; 0x94 <DIO_enuSetPinLogic+0x12>
  92:	85 c0       	rjmp	.+266    	; 0x19e <DIO_enuSetPinLogic+0x11c>
	{
		Loc_enuErorState= DIO_enuInvalidPinLogic;
	}
	else
	{
	   switch(Copy_PortNum)	
  94:	81 30       	cpi	r24, 0x01	; 1
  96:	31 f1       	breq	.+76     	; 0xe4 <DIO_enuSetPinLogic+0x62>
  98:	38 f0       	brcs	.+14     	; 0xa8 <DIO_enuSetPinLogic+0x26>
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	09 f4       	brne	.+2      	; 0xa0 <DIO_enuSetPinLogic+0x1e>
  9e:	40 c0       	rjmp	.+128    	; 0x120 <DIO_enuSetPinLogic+0x9e>
  a0:	83 30       	cpi	r24, 0x03	; 3
  a2:	09 f4       	brne	.+2      	; 0xa6 <DIO_enuSetPinLogic+0x24>
  a4:	5b c0       	rjmp	.+182    	; 0x15c <DIO_enuSetPinLogic+0xda>
  a6:	7d c0       	rjmp	.+250    	; 0x1a2 <DIO_enuSetPinLogic+0x120>
	   {
		   case DIO_enuPortA:
		          switch(Copy_PinLogic)
  a8:	44 23       	and	r20, r20
  aa:	79 f0       	breq	.+30     	; 0xca <DIO_enuSetPinLogic+0x48>
  ac:	41 30       	cpi	r20, 0x01	; 1
  ae:	09 f0       	breq	.+2      	; 0xb2 <DIO_enuSetPinLogic+0x30>
  b0:	7a c0       	rjmp	.+244    	; 0x1a6 <DIO_enuSetPinLogic+0x124>
				  {
					  case DIO_enuLogicHigh :
					      SET_BIT(PORTA,Copy_PinNUm);
  b2:	2b b3       	in	r18, 0x1b	; 27
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	02 c0       	rjmp	.+4      	; 0xbe <DIO_enuSetPinLogic+0x3c>
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	6a 95       	dec	r22
  c0:	e2 f7       	brpl	.-8      	; 0xba <DIO_enuSetPinLogic+0x38>
  c2:	82 2b       	or	r24, r18
  c4:	8b bb       	out	0x1b, r24	; 27
	
	return Loc_enuErorState;
}
DIO_enuErrorStatus_t DIO_enuSetPinLogic(DIO_enuPortNumber_t Copy_PortNum , DIO_enuPinNumber_t Copy_PinNUm , DIO_enuSetPinLogic_t Copy_PinLogic)
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
  c6:	84 e0       	ldi	r24, 0x04	; 4
		   case DIO_enuPortA:
		          switch(Copy_PinLogic)
				  {
					  case DIO_enuLogicHigh :
					      SET_BIT(PORTA,Copy_PinNUm);
					       break;
  c8:	08 95       	ret
					  case DIO_enuLogicLow :
					      CLR_BIT(PORTA,Copy_PinNUm);
  ca:	2b b3       	in	r18, 0x1b	; 27
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <DIO_enuSetPinLogic+0x54>
  d2:	88 0f       	add	r24, r24
  d4:	99 1f       	adc	r25, r25
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <DIO_enuSetPinLogic+0x50>
  da:	80 95       	com	r24
  dc:	82 23       	and	r24, r18
  de:	8b bb       	out	0x1b, r24	; 27
	
	return Loc_enuErorState;
}
DIO_enuErrorStatus_t DIO_enuSetPinLogic(DIO_enuPortNumber_t Copy_PortNum , DIO_enuPinNumber_t Copy_PinNUm , DIO_enuSetPinLogic_t Copy_PinLogic)
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
  e0:	84 e0       	ldi	r24, 0x04	; 4
					  case DIO_enuLogicHigh :
					      SET_BIT(PORTA,Copy_PinNUm);
					       break;
					  case DIO_enuLogicLow :
					      CLR_BIT(PORTA,Copy_PinNUm);
						   break;
  e2:	08 95       	ret
					  default:
					       break; 
				  }
				  break;
			case DIO_enuPortB:
			         switch(Copy_PinLogic)
  e4:	44 23       	and	r20, r20
  e6:	79 f0       	breq	.+30     	; 0x106 <DIO_enuSetPinLogic+0x84>
  e8:	41 30       	cpi	r20, 0x01	; 1
  ea:	09 f0       	breq	.+2      	; 0xee <DIO_enuSetPinLogic+0x6c>
  ec:	5e c0       	rjmp	.+188    	; 0x1aa <DIO_enuSetPinLogic+0x128>
			         {
				         case DIO_enuLogicHigh :
				         SET_BIT(PORTB,Copy_PinNUm);
  ee:	28 b3       	in	r18, 0x18	; 24
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	02 c0       	rjmp	.+4      	; 0xfa <DIO_enuSetPinLogic+0x78>
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	6a 95       	dec	r22
  fc:	e2 f7       	brpl	.-8      	; 0xf6 <DIO_enuSetPinLogic+0x74>
  fe:	82 2b       	or	r24, r18
 100:	88 bb       	out	0x18, r24	; 24
	
	return Loc_enuErorState;
}
DIO_enuErrorStatus_t DIO_enuSetPinLogic(DIO_enuPortNumber_t Copy_PortNum , DIO_enuPinNumber_t Copy_PinNUm , DIO_enuSetPinLogic_t Copy_PinLogic)
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
 102:	84 e0       	ldi	r24, 0x04	; 4
			case DIO_enuPortB:
			         switch(Copy_PinLogic)
			         {
				         case DIO_enuLogicHigh :
				         SET_BIT(PORTB,Copy_PinNUm);
				         break;
 104:	08 95       	ret
				         case DIO_enuLogicLow :
				         CLR_BIT(PORTB,Copy_PinNUm);
 106:	28 b3       	in	r18, 0x18	; 24
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_enuSetPinLogic+0x90>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_enuSetPinLogic+0x8c>
 116:	80 95       	com	r24
 118:	82 23       	and	r24, r18
 11a:	88 bb       	out	0x18, r24	; 24
	
	return Loc_enuErorState;
}
DIO_enuErrorStatus_t DIO_enuSetPinLogic(DIO_enuPortNumber_t Copy_PortNum , DIO_enuPinNumber_t Copy_PinNUm , DIO_enuSetPinLogic_t Copy_PinLogic)
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
 11c:	84 e0       	ldi	r24, 0x04	; 4
				         case DIO_enuLogicHigh :
				         SET_BIT(PORTB,Copy_PinNUm);
				         break;
				         case DIO_enuLogicLow :
				         CLR_BIT(PORTB,Copy_PinNUm);
				         break;
 11e:	08 95       	ret
				         default:
				         break;
			         }
			         break;
			case DIO_enuPortC:
			     switch(Copy_PinLogic)
 120:	44 23       	and	r20, r20
 122:	79 f0       	breq	.+30     	; 0x142 <DIO_enuSetPinLogic+0xc0>
 124:	41 30       	cpi	r20, 0x01	; 1
 126:	09 f0       	breq	.+2      	; 0x12a <DIO_enuSetPinLogic+0xa8>
 128:	42 c0       	rjmp	.+132    	; 0x1ae <DIO_enuSetPinLogic+0x12c>
			      {
				    case DIO_enuLogicHigh :
				       SET_BIT(PORTC,Copy_PinNUm);
 12a:	25 b3       	in	r18, 0x15	; 21
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_enuSetPinLogic+0xb4>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_enuSetPinLogic+0xb0>
 13a:	82 2b       	or	r24, r18
 13c:	85 bb       	out	0x15, r24	; 21
	
	return Loc_enuErorState;
}
DIO_enuErrorStatus_t DIO_enuSetPinLogic(DIO_enuPortNumber_t Copy_PortNum , DIO_enuPinNumber_t Copy_PinNUm , DIO_enuSetPinLogic_t Copy_PinLogic)
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
 13e:	84 e0       	ldi	r24, 0x04	; 4
			case DIO_enuPortC:
			     switch(Copy_PinLogic)
			      {
				    case DIO_enuLogicHigh :
				       SET_BIT(PORTC,Copy_PinNUm);
				        break;
 140:	08 95       	ret
				    case DIO_enuLogicLow :
				       CLR_BIT(PORTC,Copy_PinNUm);
 142:	25 b3       	in	r18, 0x15	; 21
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	02 c0       	rjmp	.+4      	; 0x14e <DIO_enuSetPinLogic+0xcc>
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	6a 95       	dec	r22
 150:	e2 f7       	brpl	.-8      	; 0x14a <DIO_enuSetPinLogic+0xc8>
 152:	80 95       	com	r24
 154:	82 23       	and	r24, r18
 156:	85 bb       	out	0x15, r24	; 21
	
	return Loc_enuErorState;
}
DIO_enuErrorStatus_t DIO_enuSetPinLogic(DIO_enuPortNumber_t Copy_PortNum , DIO_enuPinNumber_t Copy_PinNUm , DIO_enuSetPinLogic_t Copy_PinLogic)
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
 158:	84 e0       	ldi	r24, 0x04	; 4
				    case DIO_enuLogicHigh :
				       SET_BIT(PORTC,Copy_PinNUm);
				        break;
				    case DIO_enuLogicLow :
				       CLR_BIT(PORTC,Copy_PinNUm);
				       break;
 15a:	08 95       	ret
				    default:
				      break;
			      }
			   break;
			case DIO_enuPortD:
			   switch(Copy_PinLogic)
 15c:	44 23       	and	r20, r20
 15e:	71 f0       	breq	.+28     	; 0x17c <DIO_enuSetPinLogic+0xfa>
 160:	41 30       	cpi	r20, 0x01	; 1
 162:	39 f5       	brne	.+78     	; 0x1b2 <DIO_enuSetPinLogic+0x130>
			    {
				  case DIO_enuLogicHigh :
				      SET_BIT(PORTD,Copy_PinNUm);
 164:	22 b3       	in	r18, 0x12	; 18
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_enuSetPinLogic+0xee>
 16c:	88 0f       	add	r24, r24
 16e:	99 1f       	adc	r25, r25
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_enuSetPinLogic+0xea>
 174:	82 2b       	or	r24, r18
 176:	82 bb       	out	0x12, r24	; 18
	
	return Loc_enuErorState;
}
DIO_enuErrorStatus_t DIO_enuSetPinLogic(DIO_enuPortNumber_t Copy_PortNum , DIO_enuPinNumber_t Copy_PinNUm , DIO_enuSetPinLogic_t Copy_PinLogic)
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
 178:	84 e0       	ldi	r24, 0x04	; 4
			case DIO_enuPortD:
			   switch(Copy_PinLogic)
			    {
				  case DIO_enuLogicHigh :
				      SET_BIT(PORTD,Copy_PinNUm);
				       break;
 17a:	08 95       	ret
				  case DIO_enuLogicLow :
				      CLR_BIT(PORTD,Copy_PinNUm);
 17c:	22 b3       	in	r18, 0x12	; 18
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	02 c0       	rjmp	.+4      	; 0x188 <DIO_enuSetPinLogic+0x106>
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	6a 95       	dec	r22
 18a:	e2 f7       	brpl	.-8      	; 0x184 <DIO_enuSetPinLogic+0x102>
 18c:	80 95       	com	r24
 18e:	82 23       	and	r24, r18
 190:	82 bb       	out	0x12, r24	; 18
	
	return Loc_enuErorState;
}
DIO_enuErrorStatus_t DIO_enuSetPinLogic(DIO_enuPortNumber_t Copy_PortNum , DIO_enuPinNumber_t Copy_PinNUm , DIO_enuSetPinLogic_t Copy_PinLogic)
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
 192:	84 e0       	ldi	r24, 0x04	; 4
				  case DIO_enuLogicHigh :
				      SET_BIT(PORTD,Copy_PinNUm);
				       break;
				  case DIO_enuLogicLow :
				      CLR_BIT(PORTD,Copy_PinNUm);
				       break;
 194:	08 95       	ret
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
	  
	if (Copy_PortNum > NUM_OF_PORTS || Copy_PortNum < DIO_enuPortA  )
	{
       Loc_enuErorState= DIO_enuInvalidPortNumber;
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	08 95       	ret
	}
	else if(Copy_PinNUm > DIO_enuPin7 || Copy_PinNUm < DIO_enuPin0)
	{
        Loc_enuErorState= DIO_enuInvalidPinNumber;
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	08 95       	ret
	}
	else if (Copy_PinLogic != DIO_enuLogicHigh && Copy_PinLogic != DIO_enuLogicLow)
	{
		Loc_enuErorState= DIO_enuInvalidPinLogic;
 19e:	82 e0       	ldi	r24, 0x02	; 2
 1a0:	08 95       	ret
	
	return Loc_enuErorState;
}
DIO_enuErrorStatus_t DIO_enuSetPinLogic(DIO_enuPortNumber_t Copy_PortNum , DIO_enuPinNumber_t Copy_PinNUm , DIO_enuSetPinLogic_t Copy_PinLogic)
{ 
	  DIO_enuErrorStatus_t Loc_enuErorState= DIO_enuSucceded;
 1a2:	84 e0       	ldi	r24, 0x04	; 4
 1a4:	08 95       	ret
 1a6:	84 e0       	ldi	r24, 0x04	; 4
 1a8:	08 95       	ret
 1aa:	84 e0       	ldi	r24, 0x04	; 4
 1ac:	08 95       	ret
 1ae:	84 e0       	ldi	r24, 0x04	; 4
 1b0:	08 95       	ret
 1b2:	84 e0       	ldi	r24, 0x04	; 4
		
}
	
	return Loc_enuErorState;
	
}
 1b4:	08 95       	ret

000001b6 <LED_enuSetLedState>:

LED_enuErorState LED_enuSetLedState (u8 Copy_u8LedName , u8 Copy_u8LedState)
{
	LED_enuErorState Loc_enuErorState = LED_enusucceeded ;
	DIO_enuErrorStatus_t Loc_enuDioEror = DIO_enuSucceded;
   if (Copy_u8LedName > NUM_OF_LEDS)
 1b6:	85 30       	cpi	r24, 0x05	; 5
 1b8:	08 f0       	brcs	.+2      	; 0x1bc <LED_enuSetLedState+0x6>
 1ba:	5a c0       	rjmp	.+180    	; 0x270 <LED_enuSetLedState+0xba>
   {
	   
	Loc_enuErorState = LED_enuInvalidName ;
	
   }
   else if (Copy_u8LedState != LED_ON_STATE  && Copy_u8LedState != LED_OFF_STATE )
 1bc:	62 30       	cpi	r22, 0x02	; 2
 1be:	08 f0       	brcs	.+2      	; 0x1c2 <LED_enuSetLedState+0xc>
 1c0:	59 c0       	rjmp	.+178    	; 0x274 <LED_enuSetLedState+0xbe>
	   
   }
   else
    {
	   
    if (Copy_u8LedState == LED_ON_STATE)
 1c2:	61 30       	cpi	r22, 0x01	; 1
 1c4:	41 f5       	brne	.+80     	; 0x216 <LED_enuSetLedState+0x60>
	 {
		 switch (LEDS_Arr[Copy_u8LedName].LED_StrU8ActiveState)
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	fc 01       	movw	r30, r24
 1ca:	ee 0f       	add	r30, r30
 1cc:	ff 1f       	adc	r31, r31
 1ce:	ee 0f       	add	r30, r30
 1d0:	ff 1f       	adc	r31, r31
 1d2:	e0 5a       	subi	r30, 0xA0	; 160
 1d4:	ff 4f       	sbci	r31, 0xFF	; 255
 1d6:	22 81       	ldd	r18, Z+2	; 0x02
 1d8:	22 23       	and	r18, r18
 1da:	81 f0       	breq	.+32     	; 0x1fc <LED_enuSetLedState+0x46>
 1dc:	21 30       	cpi	r18, 0x01	; 1
 1de:	09 f0       	breq	.+2      	; 0x1e2 <LED_enuSetLedState+0x2c>
 1e0:	41 c0       	rjmp	.+130    	; 0x264 <LED_enuSetLedState+0xae>
		 {
			case (ACTIVE_HIGH):
		          Loc_enuDioEror=DIO_enuSetPinLogic(LEDS_Arr[Copy_u8LedName].LED_StrU8PortCfg ,LEDS_Arr[Copy_u8LedName].LED_StrU8PinCFg ,DIO_enuLogicHigh);
 1e2:	88 0f       	add	r24, r24
 1e4:	99 1f       	adc	r25, r25
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	fc 01       	movw	r30, r24
 1ec:	e0 5a       	subi	r30, 0xA0	; 160
 1ee:	ff 4f       	sbci	r31, 0xFF	; 255
 1f0:	61 81       	ldd	r22, Z+1	; 0x01
 1f2:	41 e0       	ldi	r20, 0x01	; 1
 1f4:	80 81       	ld	r24, Z
 1f6:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuSetPinLogic>
				   break ;
 1fa:	37 c0       	rjmp	.+110    	; 0x26a <LED_enuSetLedState+0xb4>
	        case(ACTIVE_LOW):
			      Loc_enuDioEror=DIO_enuSetPinLogic(LEDS_Arr[Copy_u8LedName].LED_StrU8PortCfg ,LEDS_Arr[Copy_u8LedName].LED_StrU8PinCFg ,DIO_enuLogicLow);
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	fc 01       	movw	r30, r24
 206:	e0 5a       	subi	r30, 0xA0	; 160
 208:	ff 4f       	sbci	r31, 0xFF	; 255
 20a:	61 81       	ldd	r22, Z+1	; 0x01
 20c:	40 e0       	ldi	r20, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuSetPinLogic>
				   break ;
 214:	2a c0       	rjmp	.+84     	; 0x26a <LED_enuSetLedState+0xb4>
         }
     }
	else
	{
		switch (LEDS_Arr[Copy_u8LedName].LED_StrU8ActiveState)
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	fc 01       	movw	r30, r24
 21a:	ee 0f       	add	r30, r30
 21c:	ff 1f       	adc	r31, r31
 21e:	ee 0f       	add	r30, r30
 220:	ff 1f       	adc	r31, r31
 222:	e0 5a       	subi	r30, 0xA0	; 160
 224:	ff 4f       	sbci	r31, 0xFF	; 255
 226:	22 81       	ldd	r18, Z+2	; 0x02
 228:	22 23       	and	r18, r18
 22a:	79 f0       	breq	.+30     	; 0x24a <LED_enuSetLedState+0x94>
 22c:	21 30       	cpi	r18, 0x01	; 1
 22e:	e1 f4       	brne	.+56     	; 0x268 <LED_enuSetLedState+0xb2>
		{
			case (ACTIVE_HIGH):
			Loc_enuDioEror=DIO_enuSetPinLogic(LEDS_Arr[Copy_u8LedName].LED_StrU8PortCfg ,LEDS_Arr[Copy_u8LedName].LED_StrU8PinCFg ,DIO_enuLogicLow);
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	fc 01       	movw	r30, r24
 23a:	e0 5a       	subi	r30, 0xA0	; 160
 23c:	ff 4f       	sbci	r31, 0xFF	; 255
 23e:	61 81       	ldd	r22, Z+1	; 0x01
 240:	40 e0       	ldi	r20, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuSetPinLogic>
			 break ;
 248:	10 c0       	rjmp	.+32     	; 0x26a <LED_enuSetLedState+0xb4>
			case(ACTIVE_LOW):
			Loc_enuDioEror=DIO_enuSetPinLogic(LEDS_Arr[Copy_u8LedName].LED_StrU8PortCfg ,LEDS_Arr[Copy_u8LedName].LED_StrU8PinCFg ,DIO_enuLogicHigh);
 24a:	88 0f       	add	r24, r24
 24c:	99 1f       	adc	r25, r25
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	fc 01       	movw	r30, r24
 254:	e0 5a       	subi	r30, 0xA0	; 160
 256:	ff 4f       	sbci	r31, 0xFF	; 255
 258:	61 81       	ldd	r22, Z+1	; 0x01
 25a:	41 e0       	ldi	r20, 0x01	; 1
 25c:	80 81       	ld	r24, Z
 25e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_enuSetPinLogic>
		     break ;
 262:	03 c0       	rjmp	.+6      	; 0x26a <LED_enuSetLedState+0xb4>
 }

LED_enuErorState LED_enuSetLedState (u8 Copy_u8LedName , u8 Copy_u8LedState)
{
	LED_enuErorState Loc_enuErorState = LED_enusucceeded ;
	DIO_enuErrorStatus_t Loc_enuDioEror = DIO_enuSucceded;
 264:	84 e0       	ldi	r24, 0x04	; 4
 266:	01 c0       	rjmp	.+2      	; 0x26a <LED_enuSetLedState+0xb4>
 268:	84 e0       	ldi	r24, 0x04	; 4
		
		
	} 
	
   
   if (Loc_enuDioEror != DIO_enuSucceded)
 26a:	84 30       	cpi	r24, 0x04	; 4
 26c:	29 f4       	brne	.+10     	; 0x278 <LED_enuSetLedState+0xc2>
 26e:	08 95       	ret
	LED_enuErorState Loc_enuErorState = LED_enusucceeded ;
	DIO_enuErrorStatus_t Loc_enuDioEror = DIO_enuSucceded;
   if (Copy_u8LedName > NUM_OF_LEDS)
   {
	   
	Loc_enuErorState = LED_enuInvalidName ;
 270:	87 e0       	ldi	r24, 0x07	; 7
 272:	08 95       	ret
	
   }
   else if (Copy_u8LedState != LED_ON_STATE  && Copy_u8LedState != LED_OFF_STATE )
   {
	  
	  Loc_enuErorState = LED_enuInvalidLogicState ;
 274:	83 e0       	ldi	r24, 0x03	; 3
 276:	08 95       	ret
	
   
   if (Loc_enuDioEror != DIO_enuSucceded)
   {
	   
	   Loc_enuErorState = LED_enuDioNOK ;
 278:	86 e0       	ldi	r24, 0x06	; 6
   }
   
	
 }
return Loc_enuErorState ;
}
 27a:	08 95       	ret

0000027c <main>:
void __vector_3(void) __attribute((signal)); // INT2



int main(void)
{
 27c:	ff cf       	rjmp	.-2      	; 0x27c <main>

0000027e <__vector_1>:
	
	return 0 ;
}
// ISR for INT0
void __vector_1(void)
{
 27e:	1f 92       	push	r1
 280:	0f 92       	push	r0
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	0f 92       	push	r0
 286:	11 24       	eor	r1, r1
 288:	2f 93       	push	r18
 28a:	3f 93       	push	r19
 28c:	4f 93       	push	r20
 28e:	5f 93       	push	r21
 290:	6f 93       	push	r22
 292:	7f 93       	push	r23
 294:	8f 93       	push	r24
 296:	9f 93       	push	r25
 298:	af 93       	push	r26
 29a:	bf 93       	push	r27
 29c:	ef 93       	push	r30
 29e:	ff 93       	push	r31
	
	LED_enuSetLedState(LED_NO_ZERO , LED_ON_STATE);
 2a0:	61 e0       	ldi	r22, 0x01	; 1
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	0e 94 db 00 	call	0x1b6	; 0x1b6 <LED_enuSetLedState>
}
 2a8:	ff 91       	pop	r31
 2aa:	ef 91       	pop	r30
 2ac:	bf 91       	pop	r27
 2ae:	af 91       	pop	r26
 2b0:	9f 91       	pop	r25
 2b2:	8f 91       	pop	r24
 2b4:	7f 91       	pop	r23
 2b6:	6f 91       	pop	r22
 2b8:	5f 91       	pop	r21
 2ba:	4f 91       	pop	r20
 2bc:	3f 91       	pop	r19
 2be:	2f 91       	pop	r18
 2c0:	0f 90       	pop	r0
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	0f 90       	pop	r0
 2c6:	1f 90       	pop	r1
 2c8:	18 95       	reti

000002ca <__vector_2>:

// ISR for INT1
void __vector_2(void)
{
 2ca:	1f 92       	push	r1
 2cc:	0f 92       	push	r0
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	0f 92       	push	r0
 2d2:	11 24       	eor	r1, r1
	
}
 2d4:	0f 90       	pop	r0
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	0f 90       	pop	r0
 2da:	1f 90       	pop	r1
 2dc:	18 95       	reti

000002de <__vector_3>:

// ISR for INT2
void __vector_3(void)
{
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	0f 92       	push	r0
 2e6:	11 24       	eor	r1, r1
	
 2e8:	0f 90       	pop	r0
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	0f 90       	pop	r0
 2ee:	1f 90       	pop	r1
 2f0:	18 95       	reti

000002f2 <_exit>:
 2f2:	f8 94       	cli

000002f4 <__stop_program>:
 2f4:	ff cf       	rjmp	.-2      	; 0x2f4 <__stop_program>
